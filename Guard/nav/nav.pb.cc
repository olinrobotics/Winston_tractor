// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nav.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nav {

namespace {

const ::google::protobuf::Descriptor* LabViewIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabViewIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabViewOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabViewOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Waystates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Waystates_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ctrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ctrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Img_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Img_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPY_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatLon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatLon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alt_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyRPYDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyRPYDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyFRDDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyFRDDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyFRDRateDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyFRDRateDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelRPY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelRPY_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelFRD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelFRD_reflection_ = NULL;
const ::google::protobuf::Descriptor* FusedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FusedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelFusedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelFusedState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Behavior_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_nav_2eproto() {
  protobuf_AddDesc_nav_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nav.proto");
  GOOGLE_CHECK(file != NULL);
  LabViewIn_descriptor_ = file->message_type(0);
  static const int LabViewIn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabViewIn, data_),
  };
  LabViewIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabViewIn_descriptor_,
      LabViewIn::default_instance_,
      LabViewIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabViewIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabViewIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabViewIn));
  LabViewOut_descriptor_ = file->message_type(1);
  static const int LabViewOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabViewOut, data_),
  };
  LabViewOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabViewOut_descriptor_,
      LabViewOut::default_instance_,
      LabViewOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabViewOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabViewOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabViewOut));
  Mission_descriptor_ = file->message_type(2);
  static const int Mission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, behavior_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  Waystates_descriptor_ = file->message_type(3);
  static const int Waystates_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, rollr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, pitchr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, yawr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, latr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, lonr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, altm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, rollraterps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, pitchraterps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, yawraterps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, forwardratemps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, rightratemps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, downratemps_),
  };
  Waystates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Waystates_descriptor_,
      Waystates::default_instance_,
      Waystates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waystates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Waystates));
  Ctrl_descriptor_ = file->message_type(4);
  static const int Ctrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ctrl, ureal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ctrl, uint_),
  };
  Ctrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ctrl_descriptor_,
      Ctrl::default_instance_,
      Ctrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ctrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ctrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ctrl));
  Img_descriptor_ = file->message_type(5);
  static const int Img_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, fovr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, strides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, data_),
  };
  Img_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Img_descriptor_,
      Img::default_instance_,
      Img_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Img));
  RPY_descriptor_ = file->message_type(6);
  static const int RPY_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, rollr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, pitchr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, yawr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, rollsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, pitchsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, yawsigmar_),
  };
  RPY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPY_descriptor_,
      RPY::default_instance_,
      RPY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPY));
  LatLon_descriptor_ = file->message_type(7);
  static const int LatLon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, latr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, lonr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, latsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, lonsigmar_),
  };
  LatLon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LatLon_descriptor_,
      LatLon::default_instance_,
      LatLon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LatLon));
  Alt_descriptor_ = file->message_type(8);
  static const int Alt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alt, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alt, altm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alt, altsigmam_),
  };
  Alt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alt_descriptor_,
      Alt::default_instance_,
      Alt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alt));
  BodyRPYDelta_descriptor_ = file->message_type(9);
  static const int BodyRPYDelta_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, timedeltas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, rolldeltar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, pitchdeltar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, yawdeltar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, rolldeltasigmarps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, pitchdeltasigmarps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, yawdeltasigmarps_),
  };
  BodyRPYDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyRPYDelta_descriptor_,
      BodyRPYDelta::default_instance_,
      BodyRPYDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyRPYDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyRPYDelta));
  BodyFRDDelta_descriptor_ = file->message_type(10);
  static const int BodyFRDDelta_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, timedeltas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, forwarddeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, rightdeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, downdeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, forwarddeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, rightdeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, downdeltasigmam_),
  };
  BodyFRDDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyFRDDelta_descriptor_,
      BodyFRDDelta::default_instance_,
      BodyFRDDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyFRDDelta));
  BodyFRDRateDelta_descriptor_ = file->message_type(11);
  static const int BodyFRDRateDelta_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, timedeltas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, forwardratedeltamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, rightratedeltamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, downratedeltamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, forwardratedeltasigmamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, rightratedeltasigmamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, downratedeltasigmamps_),
  };
  BodyFRDRateDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyFRDRateDelta_descriptor_,
      BodyFRDRateDelta::default_instance_,
      BodyFRDRateDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyFRDRateDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyFRDRateDelta));
  RelRPY_descriptor_ = file->message_type(12);
  static const int RelRPY_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, rollr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, pitchr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, yawr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, rollsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, pitchsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, yawsigmar_),
  };
  RelRPY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelRPY_descriptor_,
      RelRPY::default_instance_,
      RelRPY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelRPY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelRPY));
  RelFRD_descriptor_ = file->message_type(13);
  static const int RelFRD_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, forwardm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, rightm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, downm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, forwardsigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, rightsigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, downsigmam_),
  };
  RelFRD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelFRD_descriptor_,
      RelFRD::default_instance_,
      RelFRD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFRD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelFRD));
  FusedState_descriptor_ = file->message_type(14);
  static const int FusedState_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, timedeltas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rollr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, pitchr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, yawr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rolldeltar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, pitchdeltar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, yawdeltar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, latr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, lonr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, altm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, forwarddeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rightdeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, downdeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, forwardratedeltamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rightratedeltamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, downratedeltamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rollsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, pitchsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, yawsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rolldeltasigmarps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, pitchdeltasigmarps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, yawdeltasigmarps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, latsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, lonsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, altsigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, forwarddeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rightdeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, downdeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, forwardratedeltasigmamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, rightratedeltasigmamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, downratedeltasigmamps_),
  };
  FusedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FusedState_descriptor_,
      FusedState::default_instance_,
      FusedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FusedState));
  RelFusedState_descriptor_ = file->message_type(15);
  static const int RelFusedState_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, ownid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, rollr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, pitchr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, yawr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, forwardm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, rightm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, downm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, forwarddeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, rightdeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, downdeltam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, forwarddeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, rightdeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, downdeltasigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, rollsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, pitchsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, yawsigmar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, forwardsigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, rightsigmam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, downsigmam_),
  };
  RelFusedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelFusedState_descriptor_,
      RelFusedState::default_instance_,
      RelFusedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelFusedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelFusedState));
  Behavior_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nav_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabViewIn_descriptor_, &LabViewIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabViewOut_descriptor_, &LabViewOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Waystates_descriptor_, &Waystates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ctrl_descriptor_, &Ctrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Img_descriptor_, &Img::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPY_descriptor_, &RPY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LatLon_descriptor_, &LatLon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alt_descriptor_, &Alt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyRPYDelta_descriptor_, &BodyRPYDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyFRDDelta_descriptor_, &BodyFRDDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyFRDRateDelta_descriptor_, &BodyFRDRateDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelRPY_descriptor_, &RelRPY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelFRD_descriptor_, &RelFRD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FusedState_descriptor_, &FusedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelFusedState_descriptor_, &RelFusedState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nav_2eproto() {
  delete LabViewIn::default_instance_;
  delete LabViewIn_reflection_;
  delete LabViewOut::default_instance_;
  delete LabViewOut_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete Waystates::default_instance_;
  delete Waystates_reflection_;
  delete Ctrl::default_instance_;
  delete Ctrl_reflection_;
  delete Img::default_instance_;
  delete Img_reflection_;
  delete RPY::default_instance_;
  delete RPY_reflection_;
  delete LatLon::default_instance_;
  delete LatLon_reflection_;
  delete Alt::default_instance_;
  delete Alt_reflection_;
  delete BodyRPYDelta::default_instance_;
  delete BodyRPYDelta_reflection_;
  delete BodyFRDDelta::default_instance_;
  delete BodyFRDDelta_reflection_;
  delete BodyFRDRateDelta::default_instance_;
  delete BodyFRDRateDelta_reflection_;
  delete RelRPY::default_instance_;
  delete RelRPY_reflection_;
  delete RelFRD::default_instance_;
  delete RelFRD_reflection_;
  delete FusedState::default_instance_;
  delete FusedState_reflection_;
  delete RelFusedState::default_instance_;
  delete RelFusedState_reflection_;
}

void protobuf_AddDesc_nav_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tnav.proto\022\003nav\"\031\n\tLabViewIn\022\014\n\004data\030\001 "
    "\002(\014\"\032\n\nLabViewOut\022\014\n\004data\030\001 \002(\014\"*\n\007Missi"
    "on\022\037\n\010behavior\030\001 \002(\0162\r.nav.Behavior\"\363\001\n\t"
    "Waystates\022\r\n\005timeS\030\001 \003(\001\022\r\n\005rollR\030\002 \003(\001\022"
    "\016\n\006pitchR\030\003 \003(\001\022\014\n\004yawR\030\004 \003(\001\022\014\n\004latR\030\005 "
    "\003(\001\022\014\n\004lonR\030\006 \003(\001\022\014\n\004altM\030\007 \003(\001\022\023\n\013rollR"
    "ateRPS\030\010 \003(\001\022\024\n\014pitchRateRPS\030\t \003(\001\022\022\n\nya"
    "wRateRPS\030\n \003(\001\022\026\n\016forwardRateMPS\030\013 \003(\001\022\024"
    "\n\014rightRateMPS\030\014 \003(\001\022\023\n\013downRateMPS\030\r \003("
    "\001\"#\n\004Ctrl\022\r\n\005uReal\030\001 \003(\001\022\014\n\004uInt\030\002 \003(\005\"`"
    "\n\003Img\022\r\n\005timeS\030\001 \002(\001\022\014\n\004fovR\030\002 \002(\001\022\r\n\005st"
    "eps\030\003 \002(\r\022\017\n\007strides\030\004 \002(\r\022\016\n\006layers\030\005 \002"
    "(\r\022\014\n\004data\030\006 \002(\014\"\206\001\n\003RPY\022\r\n\005timeS\030\001 \002(\001\022"
    "\r\n\005rollR\030\002 \002(\001\022\016\n\006pitchR\030\003 \002(\001\022\014\n\004yawR\030\004"
    " \002(\001\022\025\n\nrollSigmaR\030\005 \001(\001:\0010\022\026\n\013pitchSigm"
    "aR\030\006 \001(\001:\0010\022\024\n\tyawSigmaR\030\007 \001(\001:\0010\"_\n\006Lat"
    "Lon\022\r\n\005timeS\030\001 \002(\001\022\014\n\004latR\030\002 \002(\001\022\014\n\004lonR"
    "\030\003 \002(\001\022\024\n\tlatSigmaR\030\004 \001(\001:\0010\022\024\n\tlonSigma"
    "R\030\005 \001(\001:\0010\"8\n\003Alt\022\r\n\005timeS\030\001 \002(\001\022\014\n\004altM"
    "\030\002 \002(\001\022\024\n\taltSigmaM\030\003 \001(\001:\0010\"\307\001\n\014BodyRPY"
    "Delta\022\r\n\005timeS\030\001 \002(\001\022\022\n\ntimeDeltaS\030\002 \002(\001"
    "\022\022\n\nrollDeltaR\030\003 \002(\001\022\023\n\013pitchDeltaR\030\004 \002("
    "\001\022\021\n\tyawDeltaR\030\005 \002(\001\022\034\n\021rollDeltaSigmaRP"
    "S\030\006 \001(\001:\0010\022\035\n\022pitchDeltaSigmaRPS\030\007 \001(\001:\001"
    "0\022\033\n\020yawDeltaSigmaRPS\030\010 \001(\001:\0010\"\311\001\n\014BodyF"
    "RDDelta\022\r\n\005timeS\030\001 \002(\001\022\022\n\ntimeDeltaS\030\002 \002"
    "(\001\022\025\n\rforwardDeltaM\030\003 \002(\001\022\023\n\013rightDeltaM"
    "\030\004 \002(\001\022\022\n\ndownDeltaM\030\005 \002(\001\022\035\n\022forwardDel"
    "taSigmaM\030\006 \001(\001:\0010\022\033\n\020rightDeltaSigmaM\030\007 "
    "\001(\001:\0010\022\032\n\017downDeltaSigmaM\030\010 \001(\001:\0010\"\361\001\n\020B"
    "odyFRDRateDelta\022\r\n\005timeS\030\001 \002(\001\022\022\n\ntimeDe"
    "ltaS\030\002 \002(\001\022\033\n\023forwardRateDeltaMPS\030\003 \002(\001\022"
    "\031\n\021rightRateDeltaMPS\030\004 \002(\001\022\030\n\020downRateDe"
    "ltaMPS\030\005 \002(\001\022#\n\030forwardRateDeltaSigmaMPS"
    "\030\006 \001(\001:\0010\022!\n\026rightRateDeltaSigmaMPS\030\007 \001("
    "\001:\0010\022 \n\025downRateDeltaSigmaMPS\030\010 \001(\001:\0010\"\233"
    "\001\n\006RelRPY\022\020\n\010targetID\030\001 \002(\t\022\r\n\005timeS\030\002 \002"
    "(\001\022\r\n\005rollR\030\003 \002(\001\022\016\n\006pitchR\030\004 \002(\001\022\014\n\004yaw"
    "R\030\005 \002(\001\022\025\n\nrollSigmaR\030\006 \001(\001:\0010\022\026\n\013pitchS"
    "igmaR\030\007 \001(\001:\0010\022\024\n\tyawSigmaR\030\010 \001(\001:\0010\"\243\001\n"
    "\006RelFRD\022\020\n\010targetID\030\001 \002(\t\022\r\n\005timeS\030\002 \002(\001"
    "\022\020\n\010forwardM\030\003 \002(\001\022\016\n\006rightM\030\004 \002(\001\022\r\n\005do"
    "wnM\030\005 \002(\001\022\030\n\rforwardSigmaM\030\006 \001(\001:\0010\022\026\n\013r"
    "ightSigmaM\030\007 \001(\001:\0010\022\025\n\ndownSigmaM\030\010 \001(\001:"
    "\0010\"\367\005\n\nFusedState\022\r\n\005timeS\030\001 \002(\001\022\022\n\ntime"
    "DeltaS\030\002 \002(\001\022\r\n\005rollR\030\003 \002(\001\022\016\n\006pitchR\030\004 "
    "\002(\001\022\014\n\004yawR\030\005 \002(\001\022\022\n\nrollDeltaR\030\006 \002(\001\022\023\n"
    "\013pitchDeltaR\030\007 \002(\001\022\021\n\tyawDeltaR\030\010 \002(\001\022\014\n"
    "\004latR\030\t \002(\001\022\014\n\004lonR\030\n \002(\001\022\014\n\004altM\030\013 \002(\001\022"
    "\025\n\rforwardDeltaM\030\014 \002(\001\022\023\n\013rightDeltaM\030\r "
    "\002(\001\022\022\n\ndownDeltaM\030\016 \002(\001\022\033\n\023forwardRateDe"
    "ltaMPS\030\017 \002(\001\022\031\n\021rightRateDeltaMPS\030\020 \002(\001\022"
    "\030\n\020downRateDeltaMPS\030\021 \002(\001\022\025\n\nrollSigmaR\030"
    "\022 \001(\001:\0010\022\026\n\013pitchSigmaR\030\023 \001(\001:\0010\022\024\n\tyawS"
    "igmaR\030\024 \001(\001:\0010\022\034\n\021rollDeltaSigmaRPS\030\025 \001("
    "\001:\0010\022\035\n\022pitchDeltaSigmaRPS\030\026 \001(\001:\0010\022\033\n\020y"
    "awDeltaSigmaRPS\030\027 \001(\001:\0010\022\024\n\tlatSigmaR\030\030 "
    "\001(\001:\0010\022\024\n\tlonSigmaR\030\031 \001(\001:\0010\022\024\n\taltSigma"
    "M\030\032 \001(\001:\0010\022\035\n\022forwardDeltaSigmaM\030\033 \001(\001:\001"
    "0\022\033\n\020rightDeltaSigmaM\030\034 \001(\001:\0010\022\032\n\017downDe"
    "ltaSigmaM\030\035 \001(\001:\0010\022#\n\030forwardRateDeltaSi"
    "gmaMPS\030\036 \001(\001:\0010\022!\n\026rightRateDeltaSigmaMP"
    "S\030\037 \001(\001:\0010\022 \n\025downRateDeltaSigmaMPS\030  \001("
    "\001:\0010\"\303\003\n\rRelFusedState\022\r\n\005ownID\030\001 \002(\t\022\020\n"
    "\010targetID\030\002 \002(\t\022\r\n\005timeS\030\003 \002(\001\022\r\n\005rollR\030"
    "\004 \002(\001\022\016\n\006pitchR\030\005 \002(\001\022\014\n\004yawR\030\006 \002(\001\022\020\n\010f"
    "orwardM\030\007 \002(\001\022\016\n\006rightM\030\010 \002(\001\022\r\n\005downM\030\t"
    " \002(\001\022\025\n\rforwardDeltaM\030\n \002(\001\022\023\n\013rightDelt"
    "aM\030\013 \002(\001\022\022\n\ndownDeltaM\030\014 \002(\001\022\035\n\022forwardD"
    "eltaSigmaM\030\r \001(\001:\0010\022\033\n\020rightDeltaSigmaM\030"
    "\016 \001(\001:\0010\022\032\n\017downDeltaSigmaM\030\017 \001(\001:\0010\022\025\n\n"
    "rollSigmaR\030\020 \001(\001:\0010\022\026\n\013pitchSigmaR\030\021 \001(\001"
    ":\0010\022\024\n\tyawSigmaR\030\022 \001(\001:\0010\022\030\n\rforwardSigm"
    "aM\030\023 \001(\001:\0010\022\026\n\013rightSigmaM\030\024 \001(\001:\0010\022\025\n\nd"
    "ownSigmaM\030\025 \001(\001:\0010*J\n\010Behavior\022\n\n\006LOITER"
    "\020\000\022\014\n\010APPROACH\020\001\022\013\n\007CAPTURE\020\002\022\013\n\007RELEASE"
    "\020\003\022\n\n\006DEPART\020\004B\007\n\000B\003nav", 3063);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nav.proto", &protobuf_RegisterTypes);
  LabViewIn::default_instance_ = new LabViewIn();
  LabViewOut::default_instance_ = new LabViewOut();
  Mission::default_instance_ = new Mission();
  Waystates::default_instance_ = new Waystates();
  Ctrl::default_instance_ = new Ctrl();
  Img::default_instance_ = new Img();
  RPY::default_instance_ = new RPY();
  LatLon::default_instance_ = new LatLon();
  Alt::default_instance_ = new Alt();
  BodyRPYDelta::default_instance_ = new BodyRPYDelta();
  BodyFRDDelta::default_instance_ = new BodyFRDDelta();
  BodyFRDRateDelta::default_instance_ = new BodyFRDRateDelta();
  RelRPY::default_instance_ = new RelRPY();
  RelFRD::default_instance_ = new RelFRD();
  FusedState::default_instance_ = new FusedState();
  RelFusedState::default_instance_ = new RelFusedState();
  LabViewIn::default_instance_->InitAsDefaultInstance();
  LabViewOut::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  Waystates::default_instance_->InitAsDefaultInstance();
  Ctrl::default_instance_->InitAsDefaultInstance();
  Img::default_instance_->InitAsDefaultInstance();
  RPY::default_instance_->InitAsDefaultInstance();
  LatLon::default_instance_->InitAsDefaultInstance();
  Alt::default_instance_->InitAsDefaultInstance();
  BodyRPYDelta::default_instance_->InitAsDefaultInstance();
  BodyFRDDelta::default_instance_->InitAsDefaultInstance();
  BodyFRDRateDelta::default_instance_->InitAsDefaultInstance();
  RelRPY::default_instance_->InitAsDefaultInstance();
  RelFRD::default_instance_->InitAsDefaultInstance();
  FusedState::default_instance_->InitAsDefaultInstance();
  RelFusedState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nav_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nav_2eproto {
  StaticDescriptorInitializer_nav_2eproto() {
    protobuf_AddDesc_nav_2eproto();
  }
} static_descriptor_initializer_nav_2eproto_;
const ::google::protobuf::EnumDescriptor* Behavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Behavior_descriptor_;
}
bool Behavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LabViewIn::kDataFieldNumber;
#endif  // !_MSC_VER

LabViewIn::LabViewIn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.LabViewIn)
}

void LabViewIn::InitAsDefaultInstance() {
}

LabViewIn::LabViewIn(const LabViewIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.LabViewIn)
}

void LabViewIn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabViewIn::~LabViewIn() {
  // @@protoc_insertion_point(destructor:nav.LabViewIn)
  SharedDtor();
}

void LabViewIn::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LabViewIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabViewIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabViewIn_descriptor_;
}

const LabViewIn& LabViewIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

LabViewIn* LabViewIn::default_instance_ = NULL;

LabViewIn* LabViewIn::New() const {
  return new LabViewIn;
}

void LabViewIn::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabViewIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.LabViewIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.LabViewIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.LabViewIn)
  return false;
#undef DO_
}

void LabViewIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.LabViewIn)
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.LabViewIn)
}

::google::protobuf::uint8* LabViewIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.LabViewIn)
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.LabViewIn)
  return target;
}

int LabViewIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabViewIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabViewIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabViewIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabViewIn::MergeFrom(const LabViewIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabViewIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabViewIn::CopyFrom(const LabViewIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabViewIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LabViewIn::Swap(LabViewIn* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabViewIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabViewIn_descriptor_;
  metadata.reflection = LabViewIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabViewOut::kDataFieldNumber;
#endif  // !_MSC_VER

LabViewOut::LabViewOut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.LabViewOut)
}

void LabViewOut::InitAsDefaultInstance() {
}

LabViewOut::LabViewOut(const LabViewOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.LabViewOut)
}

void LabViewOut::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabViewOut::~LabViewOut() {
  // @@protoc_insertion_point(destructor:nav.LabViewOut)
  SharedDtor();
}

void LabViewOut::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LabViewOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabViewOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabViewOut_descriptor_;
}

const LabViewOut& LabViewOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

LabViewOut* LabViewOut::default_instance_ = NULL;

LabViewOut* LabViewOut::New() const {
  return new LabViewOut;
}

void LabViewOut::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabViewOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.LabViewOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.LabViewOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.LabViewOut)
  return false;
#undef DO_
}

void LabViewOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.LabViewOut)
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.LabViewOut)
}

::google::protobuf::uint8* LabViewOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.LabViewOut)
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.LabViewOut)
  return target;
}

int LabViewOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabViewOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabViewOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabViewOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabViewOut::MergeFrom(const LabViewOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabViewOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabViewOut::CopyFrom(const LabViewOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabViewOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LabViewOut::Swap(LabViewOut* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabViewOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabViewOut_descriptor_;
  metadata.reflection = LabViewOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mission::kBehaviorFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.Mission)
}

void Mission::InitAsDefaultInstance() {
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.Mission)
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  behavior_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:nav.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
  behavior_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nav.Behavior behavior = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nav::Behavior_IsValid(value)) {
            set_behavior(static_cast< ::nav::Behavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.Mission)
  // required .nav.Behavior behavior = 1;
  if (has_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->behavior(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.Mission)
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.Mission)
  // required .nav.Behavior behavior = 1;
  if (has_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->behavior(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.Mission)
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nav.Behavior behavior = 1;
    if (has_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_behavior()) {
      set_behavior(from.behavior());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    std::swap(behavior_, other->behavior_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Waystates::kTimeSFieldNumber;
const int Waystates::kRollRFieldNumber;
const int Waystates::kPitchRFieldNumber;
const int Waystates::kYawRFieldNumber;
const int Waystates::kLatRFieldNumber;
const int Waystates::kLonRFieldNumber;
const int Waystates::kAltMFieldNumber;
const int Waystates::kRollRateRPSFieldNumber;
const int Waystates::kPitchRateRPSFieldNumber;
const int Waystates::kYawRateRPSFieldNumber;
const int Waystates::kForwardRateMPSFieldNumber;
const int Waystates::kRightRateMPSFieldNumber;
const int Waystates::kDownRateMPSFieldNumber;
#endif  // !_MSC_VER

Waystates::Waystates()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.Waystates)
}

void Waystates::InitAsDefaultInstance() {
}

Waystates::Waystates(const Waystates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.Waystates)
}

void Waystates::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Waystates::~Waystates() {
  // @@protoc_insertion_point(destructor:nav.Waystates)
  SharedDtor();
}

void Waystates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Waystates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waystates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waystates_descriptor_;
}

const Waystates& Waystates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

Waystates* Waystates::default_instance_ = NULL;

Waystates* Waystates::New() const {
  return new Waystates;
}

void Waystates::Clear() {
  times_.Clear();
  rollr_.Clear();
  pitchr_.Clear();
  yawr_.Clear();
  latr_.Clear();
  lonr_.Clear();
  altm_.Clear();
  rollraterps_.Clear();
  pitchraterps_.Clear();
  yawraterps_.Clear();
  forwardratemps_.Clear();
  rightratemps_.Clear();
  downratemps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Waystates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.Waystates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double timeS = 1;
      case 1: {
        if (tag == 9) {
         parse_timeS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_times())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_timeS;
        if (input->ExpectTag(17)) goto parse_rollR;
        break;
      }

      // repeated double rollR = 2;
      case 2: {
        if (tag == 17) {
         parse_rollR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_rollr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rollr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rollR;
        if (input->ExpectTag(25)) goto parse_pitchR;
        break;
      }

      // repeated double pitchR = 3;
      case 3: {
        if (tag == 25) {
         parse_pitchR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_pitchr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pitchr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pitchR;
        if (input->ExpectTag(33)) goto parse_yawR;
        break;
      }

      // repeated double yawR = 4;
      case 4: {
        if (tag == 33) {
         parse_yawR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_yawr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_yawr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yawR;
        if (input->ExpectTag(41)) goto parse_latR;
        break;
      }

      // repeated double latR = 5;
      case 5: {
        if (tag == 41) {
         parse_latR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_latr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_latr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_latR;
        if (input->ExpectTag(49)) goto parse_lonR;
        break;
      }

      // repeated double lonR = 6;
      case 6: {
        if (tag == 49) {
         parse_lonR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_lonr())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_lonr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_lonR;
        if (input->ExpectTag(57)) goto parse_altM;
        break;
      }

      // repeated double altM = 7;
      case 7: {
        if (tag == 57) {
         parse_altM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_altm())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_altm())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_altM;
        if (input->ExpectTag(65)) goto parse_rollRateRPS;
        break;
      }

      // repeated double rollRateRPS = 8;
      case 8: {
        if (tag == 65) {
         parse_rollRateRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_rollraterps())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rollraterps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_rollRateRPS;
        if (input->ExpectTag(73)) goto parse_pitchRateRPS;
        break;
      }

      // repeated double pitchRateRPS = 9;
      case 9: {
        if (tag == 73) {
         parse_pitchRateRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_pitchraterps())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pitchraterps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_pitchRateRPS;
        if (input->ExpectTag(81)) goto parse_yawRateRPS;
        break;
      }

      // repeated double yawRateRPS = 10;
      case 10: {
        if (tag == 81) {
         parse_yawRateRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_yawraterps())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_yawraterps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_yawRateRPS;
        if (input->ExpectTag(89)) goto parse_forwardRateMPS;
        break;
      }

      // repeated double forwardRateMPS = 11;
      case 11: {
        if (tag == 89) {
         parse_forwardRateMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_forwardratemps())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_forwardratemps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_forwardRateMPS;
        if (input->ExpectTag(97)) goto parse_rightRateMPS;
        break;
      }

      // repeated double rightRateMPS = 12;
      case 12: {
        if (tag == 97) {
         parse_rightRateMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_rightratemps())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rightratemps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_rightRateMPS;
        if (input->ExpectTag(105)) goto parse_downRateMPS;
        break;
      }

      // repeated double downRateMPS = 13;
      case 13: {
        if (tag == 105) {
         parse_downRateMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 105, input, this->mutable_downratemps())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_downratemps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_downRateMPS;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.Waystates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.Waystates)
  return false;
#undef DO_
}

void Waystates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.Waystates)
  // repeated double timeS = 1;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->times(i), output);
  }

  // repeated double rollR = 2;
  for (int i = 0; i < this->rollr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->rollr(i), output);
  }

  // repeated double pitchR = 3;
  for (int i = 0; i < this->pitchr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->pitchr(i), output);
  }

  // repeated double yawR = 4;
  for (int i = 0; i < this->yawr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->yawr(i), output);
  }

  // repeated double latR = 5;
  for (int i = 0; i < this->latr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->latr(i), output);
  }

  // repeated double lonR = 6;
  for (int i = 0; i < this->lonr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->lonr(i), output);
  }

  // repeated double altM = 7;
  for (int i = 0; i < this->altm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->altm(i), output);
  }

  // repeated double rollRateRPS = 8;
  for (int i = 0; i < this->rollraterps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->rollraterps(i), output);
  }

  // repeated double pitchRateRPS = 9;
  for (int i = 0; i < this->pitchraterps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->pitchraterps(i), output);
  }

  // repeated double yawRateRPS = 10;
  for (int i = 0; i < this->yawraterps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->yawraterps(i), output);
  }

  // repeated double forwardRateMPS = 11;
  for (int i = 0; i < this->forwardratemps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->forwardratemps(i), output);
  }

  // repeated double rightRateMPS = 12;
  for (int i = 0; i < this->rightratemps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->rightratemps(i), output);
  }

  // repeated double downRateMPS = 13;
  for (int i = 0; i < this->downratemps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      13, this->downratemps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.Waystates)
}

::google::protobuf::uint8* Waystates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.Waystates)
  // repeated double timeS = 1;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->times(i), target);
  }

  // repeated double rollR = 2;
  for (int i = 0; i < this->rollr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->rollr(i), target);
  }

  // repeated double pitchR = 3;
  for (int i = 0; i < this->pitchr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->pitchr(i), target);
  }

  // repeated double yawR = 4;
  for (int i = 0; i < this->yawr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->yawr(i), target);
  }

  // repeated double latR = 5;
  for (int i = 0; i < this->latr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->latr(i), target);
  }

  // repeated double lonR = 6;
  for (int i = 0; i < this->lonr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->lonr(i), target);
  }

  // repeated double altM = 7;
  for (int i = 0; i < this->altm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->altm(i), target);
  }

  // repeated double rollRateRPS = 8;
  for (int i = 0; i < this->rollraterps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->rollraterps(i), target);
  }

  // repeated double pitchRateRPS = 9;
  for (int i = 0; i < this->pitchraterps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->pitchraterps(i), target);
  }

  // repeated double yawRateRPS = 10;
  for (int i = 0; i < this->yawraterps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->yawraterps(i), target);
  }

  // repeated double forwardRateMPS = 11;
  for (int i = 0; i < this->forwardratemps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->forwardratemps(i), target);
  }

  // repeated double rightRateMPS = 12;
  for (int i = 0; i < this->rightratemps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->rightratemps(i), target);
  }

  // repeated double downRateMPS = 13;
  for (int i = 0; i < this->downratemps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(13, this->downratemps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.Waystates)
  return target;
}

int Waystates::ByteSize() const {
  int total_size = 0;

  // repeated double timeS = 1;
  {
    int data_size = 0;
    data_size = 8 * this->times_size();
    total_size += 1 * this->times_size() + data_size;
  }

  // repeated double rollR = 2;
  {
    int data_size = 0;
    data_size = 8 * this->rollr_size();
    total_size += 1 * this->rollr_size() + data_size;
  }

  // repeated double pitchR = 3;
  {
    int data_size = 0;
    data_size = 8 * this->pitchr_size();
    total_size += 1 * this->pitchr_size() + data_size;
  }

  // repeated double yawR = 4;
  {
    int data_size = 0;
    data_size = 8 * this->yawr_size();
    total_size += 1 * this->yawr_size() + data_size;
  }

  // repeated double latR = 5;
  {
    int data_size = 0;
    data_size = 8 * this->latr_size();
    total_size += 1 * this->latr_size() + data_size;
  }

  // repeated double lonR = 6;
  {
    int data_size = 0;
    data_size = 8 * this->lonr_size();
    total_size += 1 * this->lonr_size() + data_size;
  }

  // repeated double altM = 7;
  {
    int data_size = 0;
    data_size = 8 * this->altm_size();
    total_size += 1 * this->altm_size() + data_size;
  }

  // repeated double rollRateRPS = 8;
  {
    int data_size = 0;
    data_size = 8 * this->rollraterps_size();
    total_size += 1 * this->rollraterps_size() + data_size;
  }

  // repeated double pitchRateRPS = 9;
  {
    int data_size = 0;
    data_size = 8 * this->pitchraterps_size();
    total_size += 1 * this->pitchraterps_size() + data_size;
  }

  // repeated double yawRateRPS = 10;
  {
    int data_size = 0;
    data_size = 8 * this->yawraterps_size();
    total_size += 1 * this->yawraterps_size() + data_size;
  }

  // repeated double forwardRateMPS = 11;
  {
    int data_size = 0;
    data_size = 8 * this->forwardratemps_size();
    total_size += 1 * this->forwardratemps_size() + data_size;
  }

  // repeated double rightRateMPS = 12;
  {
    int data_size = 0;
    data_size = 8 * this->rightratemps_size();
    total_size += 1 * this->rightratemps_size() + data_size;
  }

  // repeated double downRateMPS = 13;
  {
    int data_size = 0;
    data_size = 8 * this->downratemps_size();
    total_size += 1 * this->downratemps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waystates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Waystates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Waystates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Waystates::MergeFrom(const Waystates& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_.MergeFrom(from.times_);
  rollr_.MergeFrom(from.rollr_);
  pitchr_.MergeFrom(from.pitchr_);
  yawr_.MergeFrom(from.yawr_);
  latr_.MergeFrom(from.latr_);
  lonr_.MergeFrom(from.lonr_);
  altm_.MergeFrom(from.altm_);
  rollraterps_.MergeFrom(from.rollraterps_);
  pitchraterps_.MergeFrom(from.pitchraterps_);
  yawraterps_.MergeFrom(from.yawraterps_);
  forwardratemps_.MergeFrom(from.forwardratemps_);
  rightratemps_.MergeFrom(from.rightratemps_);
  downratemps_.MergeFrom(from.downratemps_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Waystates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waystates::CopyFrom(const Waystates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waystates::IsInitialized() const {

  return true;
}

void Waystates::Swap(Waystates* other) {
  if (other != this) {
    times_.Swap(&other->times_);
    rollr_.Swap(&other->rollr_);
    pitchr_.Swap(&other->pitchr_);
    yawr_.Swap(&other->yawr_);
    latr_.Swap(&other->latr_);
    lonr_.Swap(&other->lonr_);
    altm_.Swap(&other->altm_);
    rollraterps_.Swap(&other->rollraterps_);
    pitchraterps_.Swap(&other->pitchraterps_);
    yawraterps_.Swap(&other->yawraterps_);
    forwardratemps_.Swap(&other->forwardratemps_);
    rightratemps_.Swap(&other->rightratemps_);
    downratemps_.Swap(&other->downratemps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Waystates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Waystates_descriptor_;
  metadata.reflection = Waystates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ctrl::kURealFieldNumber;
const int Ctrl::kUIntFieldNumber;
#endif  // !_MSC_VER

Ctrl::Ctrl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.Ctrl)
}

void Ctrl::InitAsDefaultInstance() {
}

Ctrl::Ctrl(const Ctrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.Ctrl)
}

void Ctrl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ctrl::~Ctrl() {
  // @@protoc_insertion_point(destructor:nav.Ctrl)
  SharedDtor();
}

void Ctrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ctrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ctrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ctrl_descriptor_;
}

const Ctrl& Ctrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

Ctrl* Ctrl::default_instance_ = NULL;

Ctrl* Ctrl::New() const {
  return new Ctrl;
}

void Ctrl::Clear() {
  ureal_.Clear();
  uint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ctrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.Ctrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double uReal = 1;
      case 1: {
        if (tag == 9) {
         parse_uReal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_ureal())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ureal())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_uReal;
        if (input->ExpectTag(16)) goto parse_uInt;
        break;
      }

      // repeated int32 uInt = 2;
      case 2: {
        if (tag == 16) {
         parse_uInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_uint())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_uint())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uInt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.Ctrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.Ctrl)
  return false;
#undef DO_
}

void Ctrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.Ctrl)
  // repeated double uReal = 1;
  for (int i = 0; i < this->ureal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->ureal(i), output);
  }

  // repeated int32 uInt = 2;
  for (int i = 0; i < this->uint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->uint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.Ctrl)
}

::google::protobuf::uint8* Ctrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.Ctrl)
  // repeated double uReal = 1;
  for (int i = 0; i < this->ureal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->ureal(i), target);
  }

  // repeated int32 uInt = 2;
  for (int i = 0; i < this->uint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->uint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.Ctrl)
  return target;
}

int Ctrl::ByteSize() const {
  int total_size = 0;

  // repeated double uReal = 1;
  {
    int data_size = 0;
    data_size = 8 * this->ureal_size();
    total_size += 1 * this->ureal_size() + data_size;
  }

  // repeated int32 uInt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->uint(i));
    }
    total_size += 1 * this->uint_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ctrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ctrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ctrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ctrl::MergeFrom(const Ctrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  ureal_.MergeFrom(from.ureal_);
  uint_.MergeFrom(from.uint_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ctrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ctrl::CopyFrom(const Ctrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ctrl::IsInitialized() const {

  return true;
}

void Ctrl::Swap(Ctrl* other) {
  if (other != this) {
    ureal_.Swap(&other->ureal_);
    uint_.Swap(&other->uint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ctrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ctrl_descriptor_;
  metadata.reflection = Ctrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Img::kTimeSFieldNumber;
const int Img::kFovRFieldNumber;
const int Img::kStepsFieldNumber;
const int Img::kStridesFieldNumber;
const int Img::kLayersFieldNumber;
const int Img::kDataFieldNumber;
#endif  // !_MSC_VER

Img::Img()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.Img)
}

void Img::InitAsDefaultInstance() {
}

Img::Img(const Img& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.Img)
}

void Img::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  times_ = 0;
  fovr_ = 0;
  steps_ = 0u;
  strides_ = 0u;
  layers_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Img::~Img() {
  // @@protoc_insertion_point(destructor:nav.Img)
  SharedDtor();
}

void Img::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Img::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Img::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Img_descriptor_;
}

const Img& Img::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

Img* Img::default_instance_ = NULL;

Img* Img::New() const {
  return new Img;
}

void Img::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Img*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(times_, strides_);
    layers_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Img::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.Img)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_fovR;
        break;
      }

      // required double fovR = 2;
      case 2: {
        if (tag == 17) {
         parse_fovR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fovr_)));
          set_has_fovr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_steps;
        break;
      }

      // required uint32 steps = 3;
      case 3: {
        if (tag == 24) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steps_)));
          set_has_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_strides;
        break;
      }

      // required uint32 strides = 4;
      case 4: {
        if (tag == 32) {
         parse_strides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strides_)));
          set_has_strides();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_layers;
        break;
      }

      // required uint32 layers = 5;
      case 5: {
        if (tag == 40) {
         parse_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layers_)));
          set_has_layers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // required bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.Img)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.Img)
  return false;
#undef DO_
}

void Img::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.Img)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double fovR = 2;
  if (has_fovr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fovr(), output);
  }

  // required uint32 steps = 3;
  if (has_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->steps(), output);
  }

  // required uint32 strides = 4;
  if (has_strides()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->strides(), output);
  }

  // required uint32 layers = 5;
  if (has_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->layers(), output);
  }

  // required bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.Img)
}

::google::protobuf::uint8* Img::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.Img)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double fovR = 2;
  if (has_fovr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fovr(), target);
  }

  // required uint32 steps = 3;
  if (has_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->steps(), target);
  }

  // required uint32 strides = 4;
  if (has_strides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->strides(), target);
  }

  // required uint32 layers = 5;
  if (has_layers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->layers(), target);
  }

  // required bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.Img)
  return target;
}

int Img::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double fovR = 2;
    if (has_fovr()) {
      total_size += 1 + 8;
    }

    // required uint32 steps = 3;
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steps());
    }

    // required uint32 strides = 4;
    if (has_strides()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strides());
    }

    // required uint32 layers = 5;
    if (has_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layers());
    }

    // required bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Img::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Img* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Img*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Img::MergeFrom(const Img& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_fovr()) {
      set_fovr(from.fovr());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
    if (from.has_strides()) {
      set_strides(from.strides());
    }
    if (from.has_layers()) {
      set_layers(from.layers());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Img::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Img::CopyFrom(const Img& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Img::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Img::Swap(Img* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(fovr_, other->fovr_);
    std::swap(steps_, other->steps_);
    std::swap(strides_, other->strides_);
    std::swap(layers_, other->layers_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Img::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Img_descriptor_;
  metadata.reflection = Img_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPY::kTimeSFieldNumber;
const int RPY::kRollRFieldNumber;
const int RPY::kPitchRFieldNumber;
const int RPY::kYawRFieldNumber;
const int RPY::kRollSigmaRFieldNumber;
const int RPY::kPitchSigmaRFieldNumber;
const int RPY::kYawSigmaRFieldNumber;
#endif  // !_MSC_VER

RPY::RPY()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.RPY)
}

void RPY::InitAsDefaultInstance() {
}

RPY::RPY(const RPY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.RPY)
}

void RPY::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  rollr_ = 0;
  pitchr_ = 0;
  yawr_ = 0;
  rollsigmar_ = 0;
  pitchsigmar_ = 0;
  yawsigmar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPY::~RPY() {
  // @@protoc_insertion_point(destructor:nav.RPY)
  SharedDtor();
}

void RPY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RPY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPY_descriptor_;
}

const RPY& RPY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

RPY* RPY::default_instance_ = NULL;

RPY* RPY::New() const {
  return new RPY;
}

void RPY::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RPY*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(times_, yawsigmar_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.RPY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rollR;
        break;
      }

      // required double rollR = 2;
      case 2: {
        if (tag == 17) {
         parse_rollR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollr_)));
          set_has_rollr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pitchR;
        break;
      }

      // required double pitchR = 3;
      case 3: {
        if (tag == 25) {
         parse_pitchR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchr_)));
          set_has_pitchr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yawR;
        break;
      }

      // required double yawR = 4;
      case 4: {
        if (tag == 33) {
         parse_yawR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawr_)));
          set_has_yawr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rollSigmaR;
        break;
      }

      // optional double rollSigmaR = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_rollSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollsigmar_)));
          set_has_rollsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_pitchSigmaR;
        break;
      }

      // optional double pitchSigmaR = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_pitchSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchsigmar_)));
          set_has_pitchsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_yawSigmaR;
        break;
      }

      // optional double yawSigmaR = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_yawSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawsigmar_)));
          set_has_yawsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.RPY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.RPY)
  return false;
#undef DO_
}

void RPY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.RPY)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double rollR = 2;
  if (has_rollr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rollr(), output);
  }

  // required double pitchR = 3;
  if (has_pitchr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pitchr(), output);
  }

  // required double yawR = 4;
  if (has_yawr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yawr(), output);
  }

  // optional double rollSigmaR = 5 [default = 0];
  if (has_rollsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rollsigmar(), output);
  }

  // optional double pitchSigmaR = 6 [default = 0];
  if (has_pitchsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pitchsigmar(), output);
  }

  // optional double yawSigmaR = 7 [default = 0];
  if (has_yawsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yawsigmar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.RPY)
}

::google::protobuf::uint8* RPY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.RPY)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double rollR = 2;
  if (has_rollr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rollr(), target);
  }

  // required double pitchR = 3;
  if (has_pitchr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pitchr(), target);
  }

  // required double yawR = 4;
  if (has_yawr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yawr(), target);
  }

  // optional double rollSigmaR = 5 [default = 0];
  if (has_rollsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rollsigmar(), target);
  }

  // optional double pitchSigmaR = 6 [default = 0];
  if (has_pitchsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pitchsigmar(), target);
  }

  // optional double yawSigmaR = 7 [default = 0];
  if (has_yawsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yawsigmar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.RPY)
  return target;
}

int RPY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double rollR = 2;
    if (has_rollr()) {
      total_size += 1 + 8;
    }

    // required double pitchR = 3;
    if (has_pitchr()) {
      total_size += 1 + 8;
    }

    // required double yawR = 4;
    if (has_yawr()) {
      total_size += 1 + 8;
    }

    // optional double rollSigmaR = 5 [default = 0];
    if (has_rollsigmar()) {
      total_size += 1 + 8;
    }

    // optional double pitchSigmaR = 6 [default = 0];
    if (has_pitchsigmar()) {
      total_size += 1 + 8;
    }

    // optional double yawSigmaR = 7 [default = 0];
    if (has_yawsigmar()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPY::MergeFrom(const RPY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_rollr()) {
      set_rollr(from.rollr());
    }
    if (from.has_pitchr()) {
      set_pitchr(from.pitchr());
    }
    if (from.has_yawr()) {
      set_yawr(from.yawr());
    }
    if (from.has_rollsigmar()) {
      set_rollsigmar(from.rollsigmar());
    }
    if (from.has_pitchsigmar()) {
      set_pitchsigmar(from.pitchsigmar());
    }
    if (from.has_yawsigmar()) {
      set_yawsigmar(from.yawsigmar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPY::CopyFrom(const RPY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPY::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RPY::Swap(RPY* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(rollr_, other->rollr_);
    std::swap(pitchr_, other->pitchr_);
    std::swap(yawr_, other->yawr_);
    std::swap(rollsigmar_, other->rollsigmar_);
    std::swap(pitchsigmar_, other->pitchsigmar_);
    std::swap(yawsigmar_, other->yawsigmar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPY_descriptor_;
  metadata.reflection = RPY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LatLon::kTimeSFieldNumber;
const int LatLon::kLatRFieldNumber;
const int LatLon::kLonRFieldNumber;
const int LatLon::kLatSigmaRFieldNumber;
const int LatLon::kLonSigmaRFieldNumber;
#endif  // !_MSC_VER

LatLon::LatLon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.LatLon)
}

void LatLon::InitAsDefaultInstance() {
}

LatLon::LatLon(const LatLon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.LatLon)
}

void LatLon::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  latr_ = 0;
  lonr_ = 0;
  latsigmar_ = 0;
  lonsigmar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatLon::~LatLon() {
  // @@protoc_insertion_point(destructor:nav.LatLon)
  SharedDtor();
}

void LatLon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatLon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatLon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatLon_descriptor_;
}

const LatLon& LatLon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

LatLon* LatLon::default_instance_ = NULL;

LatLon* LatLon::New() const {
  return new LatLon;
}

void LatLon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LatLon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(times_, lonsigmar_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LatLon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.LatLon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latR;
        break;
      }

      // required double latR = 2;
      case 2: {
        if (tag == 17) {
         parse_latR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latr_)));
          set_has_latr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lonR;
        break;
      }

      // required double lonR = 3;
      case 3: {
        if (tag == 25) {
         parse_lonR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lonr_)));
          set_has_lonr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_latSigmaR;
        break;
      }

      // optional double latSigmaR = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_latSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latsigmar_)));
          set_has_latsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lonSigmaR;
        break;
      }

      // optional double lonSigmaR = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_lonSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lonsigmar_)));
          set_has_lonsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.LatLon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.LatLon)
  return false;
#undef DO_
}

void LatLon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.LatLon)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double latR = 2;
  if (has_latr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latr(), output);
  }

  // required double lonR = 3;
  if (has_lonr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lonr(), output);
  }

  // optional double latSigmaR = 4 [default = 0];
  if (has_latsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latsigmar(), output);
  }

  // optional double lonSigmaR = 5 [default = 0];
  if (has_lonsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lonsigmar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.LatLon)
}

::google::protobuf::uint8* LatLon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.LatLon)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double latR = 2;
  if (has_latr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latr(), target);
  }

  // required double lonR = 3;
  if (has_lonr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lonr(), target);
  }

  // optional double latSigmaR = 4 [default = 0];
  if (has_latsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latsigmar(), target);
  }

  // optional double lonSigmaR = 5 [default = 0];
  if (has_lonsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lonsigmar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.LatLon)
  return target;
}

int LatLon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double latR = 2;
    if (has_latr()) {
      total_size += 1 + 8;
    }

    // required double lonR = 3;
    if (has_lonr()) {
      total_size += 1 + 8;
    }

    // optional double latSigmaR = 4 [default = 0];
    if (has_latsigmar()) {
      total_size += 1 + 8;
    }

    // optional double lonSigmaR = 5 [default = 0];
    if (has_lonsigmar()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatLon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LatLon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LatLon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LatLon::MergeFrom(const LatLon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_latr()) {
      set_latr(from.latr());
    }
    if (from.has_lonr()) {
      set_lonr(from.lonr());
    }
    if (from.has_latsigmar()) {
      set_latsigmar(from.latsigmar());
    }
    if (from.has_lonsigmar()) {
      set_lonsigmar(from.lonsigmar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LatLon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatLon::CopyFrom(const LatLon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LatLon::Swap(LatLon* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(latr_, other->latr_);
    std::swap(lonr_, other->lonr_);
    std::swap(latsigmar_, other->latsigmar_);
    std::swap(lonsigmar_, other->lonsigmar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LatLon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatLon_descriptor_;
  metadata.reflection = LatLon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Alt::kTimeSFieldNumber;
const int Alt::kAltMFieldNumber;
const int Alt::kAltSigmaMFieldNumber;
#endif  // !_MSC_VER

Alt::Alt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.Alt)
}

void Alt::InitAsDefaultInstance() {
}

Alt::Alt(const Alt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.Alt)
}

void Alt::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  altm_ = 0;
  altsigmam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alt::~Alt() {
  // @@protoc_insertion_point(destructor:nav.Alt)
  SharedDtor();
}

void Alt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Alt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alt_descriptor_;
}

const Alt& Alt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

Alt* Alt::default_instance_ = NULL;

Alt* Alt::New() const {
  return new Alt;
}

void Alt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Alt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(times_, altsigmam_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.Alt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_altM;
        break;
      }

      // required double altM = 2;
      case 2: {
        if (tag == 17) {
         parse_altM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altm_)));
          set_has_altm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_altSigmaM;
        break;
      }

      // optional double altSigmaM = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_altSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altsigmam_)));
          set_has_altsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.Alt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.Alt)
  return false;
#undef DO_
}

void Alt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.Alt)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double altM = 2;
  if (has_altm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->altm(), output);
  }

  // optional double altSigmaM = 3 [default = 0];
  if (has_altsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altsigmam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.Alt)
}

::google::protobuf::uint8* Alt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.Alt)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double altM = 2;
  if (has_altm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->altm(), target);
  }

  // optional double altSigmaM = 3 [default = 0];
  if (has_altsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altsigmam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.Alt)
  return target;
}

int Alt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double altM = 2;
    if (has_altm()) {
      total_size += 1 + 8;
    }

    // optional double altSigmaM = 3 [default = 0];
    if (has_altsigmam()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alt::MergeFrom(const Alt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_altm()) {
      set_altm(from.altm());
    }
    if (from.has_altsigmam()) {
      set_altsigmam(from.altsigmam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alt::CopyFrom(const Alt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Alt::Swap(Alt* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(altm_, other->altm_);
    std::swap(altsigmam_, other->altsigmam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alt_descriptor_;
  metadata.reflection = Alt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyRPYDelta::kTimeSFieldNumber;
const int BodyRPYDelta::kTimeDeltaSFieldNumber;
const int BodyRPYDelta::kRollDeltaRFieldNumber;
const int BodyRPYDelta::kPitchDeltaRFieldNumber;
const int BodyRPYDelta::kYawDeltaRFieldNumber;
const int BodyRPYDelta::kRollDeltaSigmaRPSFieldNumber;
const int BodyRPYDelta::kPitchDeltaSigmaRPSFieldNumber;
const int BodyRPYDelta::kYawDeltaSigmaRPSFieldNumber;
#endif  // !_MSC_VER

BodyRPYDelta::BodyRPYDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.BodyRPYDelta)
}

void BodyRPYDelta::InitAsDefaultInstance() {
}

BodyRPYDelta::BodyRPYDelta(const BodyRPYDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.BodyRPYDelta)
}

void BodyRPYDelta::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  timedeltas_ = 0;
  rolldeltar_ = 0;
  pitchdeltar_ = 0;
  yawdeltar_ = 0;
  rolldeltasigmarps_ = 0;
  pitchdeltasigmarps_ = 0;
  yawdeltasigmarps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyRPYDelta::~BodyRPYDelta() {
  // @@protoc_insertion_point(destructor:nav.BodyRPYDelta)
  SharedDtor();
}

void BodyRPYDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BodyRPYDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyRPYDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyRPYDelta_descriptor_;
}

const BodyRPYDelta& BodyRPYDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

BodyRPYDelta* BodyRPYDelta::default_instance_ = NULL;

BodyRPYDelta* BodyRPYDelta::New() const {
  return new BodyRPYDelta;
}

void BodyRPYDelta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BodyRPYDelta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, yawdeltasigmarps_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyRPYDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.BodyRPYDelta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeDeltaS;
        break;
      }

      // required double timeDeltaS = 2;
      case 2: {
        if (tag == 17) {
         parse_timeDeltaS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timedeltas_)));
          set_has_timedeltas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rollDeltaR;
        break;
      }

      // required double rollDeltaR = 3;
      case 3: {
        if (tag == 25) {
         parse_rollDeltaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rolldeltar_)));
          set_has_rolldeltar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pitchDeltaR;
        break;
      }

      // required double pitchDeltaR = 4;
      case 4: {
        if (tag == 33) {
         parse_pitchDeltaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchdeltar_)));
          set_has_pitchdeltar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_yawDeltaR;
        break;
      }

      // required double yawDeltaR = 5;
      case 5: {
        if (tag == 41) {
         parse_yawDeltaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawdeltar_)));
          set_has_yawdeltar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rollDeltaSigmaRPS;
        break;
      }

      // optional double rollDeltaSigmaRPS = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_rollDeltaSigmaRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rolldeltasigmarps_)));
          set_has_rolldeltasigmarps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_pitchDeltaSigmaRPS;
        break;
      }

      // optional double pitchDeltaSigmaRPS = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_pitchDeltaSigmaRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchdeltasigmarps_)));
          set_has_pitchdeltasigmarps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_yawDeltaSigmaRPS;
        break;
      }

      // optional double yawDeltaSigmaRPS = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_yawDeltaSigmaRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawdeltasigmarps_)));
          set_has_yawdeltasigmarps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.BodyRPYDelta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.BodyRPYDelta)
  return false;
#undef DO_
}

void BodyRPYDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.BodyRPYDelta)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timedeltas(), output);
  }

  // required double rollDeltaR = 3;
  if (has_rolldeltar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rolldeltar(), output);
  }

  // required double pitchDeltaR = 4;
  if (has_pitchdeltar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitchdeltar(), output);
  }

  // required double yawDeltaR = 5;
  if (has_yawdeltar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yawdeltar(), output);
  }

  // optional double rollDeltaSigmaRPS = 6 [default = 0];
  if (has_rolldeltasigmarps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rolldeltasigmarps(), output);
  }

  // optional double pitchDeltaSigmaRPS = 7 [default = 0];
  if (has_pitchdeltasigmarps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pitchdeltasigmarps(), output);
  }

  // optional double yawDeltaSigmaRPS = 8 [default = 0];
  if (has_yawdeltasigmarps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->yawdeltasigmarps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.BodyRPYDelta)
}

::google::protobuf::uint8* BodyRPYDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.BodyRPYDelta)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timedeltas(), target);
  }

  // required double rollDeltaR = 3;
  if (has_rolldeltar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rolldeltar(), target);
  }

  // required double pitchDeltaR = 4;
  if (has_pitchdeltar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitchdeltar(), target);
  }

  // required double yawDeltaR = 5;
  if (has_yawdeltar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yawdeltar(), target);
  }

  // optional double rollDeltaSigmaRPS = 6 [default = 0];
  if (has_rolldeltasigmarps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rolldeltasigmarps(), target);
  }

  // optional double pitchDeltaSigmaRPS = 7 [default = 0];
  if (has_pitchdeltasigmarps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pitchdeltasigmarps(), target);
  }

  // optional double yawDeltaSigmaRPS = 8 [default = 0];
  if (has_yawdeltasigmarps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->yawdeltasigmarps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.BodyRPYDelta)
  return target;
}

int BodyRPYDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double timeDeltaS = 2;
    if (has_timedeltas()) {
      total_size += 1 + 8;
    }

    // required double rollDeltaR = 3;
    if (has_rolldeltar()) {
      total_size += 1 + 8;
    }

    // required double pitchDeltaR = 4;
    if (has_pitchdeltar()) {
      total_size += 1 + 8;
    }

    // required double yawDeltaR = 5;
    if (has_yawdeltar()) {
      total_size += 1 + 8;
    }

    // optional double rollDeltaSigmaRPS = 6 [default = 0];
    if (has_rolldeltasigmarps()) {
      total_size += 1 + 8;
    }

    // optional double pitchDeltaSigmaRPS = 7 [default = 0];
    if (has_pitchdeltasigmarps()) {
      total_size += 1 + 8;
    }

    // optional double yawDeltaSigmaRPS = 8 [default = 0];
    if (has_yawdeltasigmarps()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyRPYDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyRPYDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyRPYDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyRPYDelta::MergeFrom(const BodyRPYDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_timedeltas()) {
      set_timedeltas(from.timedeltas());
    }
    if (from.has_rolldeltar()) {
      set_rolldeltar(from.rolldeltar());
    }
    if (from.has_pitchdeltar()) {
      set_pitchdeltar(from.pitchdeltar());
    }
    if (from.has_yawdeltar()) {
      set_yawdeltar(from.yawdeltar());
    }
    if (from.has_rolldeltasigmarps()) {
      set_rolldeltasigmarps(from.rolldeltasigmarps());
    }
    if (from.has_pitchdeltasigmarps()) {
      set_pitchdeltasigmarps(from.pitchdeltasigmarps());
    }
    if (from.has_yawdeltasigmarps()) {
      set_yawdeltasigmarps(from.yawdeltasigmarps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyRPYDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyRPYDelta::CopyFrom(const BodyRPYDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyRPYDelta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BodyRPYDelta::Swap(BodyRPYDelta* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(timedeltas_, other->timedeltas_);
    std::swap(rolldeltar_, other->rolldeltar_);
    std::swap(pitchdeltar_, other->pitchdeltar_);
    std::swap(yawdeltar_, other->yawdeltar_);
    std::swap(rolldeltasigmarps_, other->rolldeltasigmarps_);
    std::swap(pitchdeltasigmarps_, other->pitchdeltasigmarps_);
    std::swap(yawdeltasigmarps_, other->yawdeltasigmarps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyRPYDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyRPYDelta_descriptor_;
  metadata.reflection = BodyRPYDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyFRDDelta::kTimeSFieldNumber;
const int BodyFRDDelta::kTimeDeltaSFieldNumber;
const int BodyFRDDelta::kForwardDeltaMFieldNumber;
const int BodyFRDDelta::kRightDeltaMFieldNumber;
const int BodyFRDDelta::kDownDeltaMFieldNumber;
const int BodyFRDDelta::kForwardDeltaSigmaMFieldNumber;
const int BodyFRDDelta::kRightDeltaSigmaMFieldNumber;
const int BodyFRDDelta::kDownDeltaSigmaMFieldNumber;
#endif  // !_MSC_VER

BodyFRDDelta::BodyFRDDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.BodyFRDDelta)
}

void BodyFRDDelta::InitAsDefaultInstance() {
}

BodyFRDDelta::BodyFRDDelta(const BodyFRDDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.BodyFRDDelta)
}

void BodyFRDDelta::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  timedeltas_ = 0;
  forwarddeltam_ = 0;
  rightdeltam_ = 0;
  downdeltam_ = 0;
  forwarddeltasigmam_ = 0;
  rightdeltasigmam_ = 0;
  downdeltasigmam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyFRDDelta::~BodyFRDDelta() {
  // @@protoc_insertion_point(destructor:nav.BodyFRDDelta)
  SharedDtor();
}

void BodyFRDDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BodyFRDDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyFRDDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyFRDDelta_descriptor_;
}

const BodyFRDDelta& BodyFRDDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

BodyFRDDelta* BodyFRDDelta::default_instance_ = NULL;

BodyFRDDelta* BodyFRDDelta::New() const {
  return new BodyFRDDelta;
}

void BodyFRDDelta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BodyFRDDelta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, downdeltasigmam_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyFRDDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.BodyFRDDelta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeDeltaS;
        break;
      }

      // required double timeDeltaS = 2;
      case 2: {
        if (tag == 17) {
         parse_timeDeltaS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timedeltas_)));
          set_has_timedeltas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_forwardDeltaM;
        break;
      }

      // required double forwardDeltaM = 3;
      case 3: {
        if (tag == 25) {
         parse_forwardDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwarddeltam_)));
          set_has_forwarddeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rightDeltaM;
        break;
      }

      // required double rightDeltaM = 4;
      case 4: {
        if (tag == 33) {
         parse_rightDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightdeltam_)));
          set_has_rightdeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_downDeltaM;
        break;
      }

      // required double downDeltaM = 5;
      case 5: {
        if (tag == 41) {
         parse_downDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downdeltam_)));
          set_has_downdeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_forwardDeltaSigmaM;
        break;
      }

      // optional double forwardDeltaSigmaM = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_forwardDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwarddeltasigmam_)));
          set_has_forwarddeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rightDeltaSigmaM;
        break;
      }

      // optional double rightDeltaSigmaM = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_rightDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightdeltasigmam_)));
          set_has_rightdeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_downDeltaSigmaM;
        break;
      }

      // optional double downDeltaSigmaM = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_downDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downdeltasigmam_)));
          set_has_downdeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.BodyFRDDelta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.BodyFRDDelta)
  return false;
#undef DO_
}

void BodyFRDDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.BodyFRDDelta)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timedeltas(), output);
  }

  // required double forwardDeltaM = 3;
  if (has_forwarddeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->forwarddeltam(), output);
  }

  // required double rightDeltaM = 4;
  if (has_rightdeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rightdeltam(), output);
  }

  // required double downDeltaM = 5;
  if (has_downdeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->downdeltam(), output);
  }

  // optional double forwardDeltaSigmaM = 6 [default = 0];
  if (has_forwarddeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->forwarddeltasigmam(), output);
  }

  // optional double rightDeltaSigmaM = 7 [default = 0];
  if (has_rightdeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rightdeltasigmam(), output);
  }

  // optional double downDeltaSigmaM = 8 [default = 0];
  if (has_downdeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->downdeltasigmam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.BodyFRDDelta)
}

::google::protobuf::uint8* BodyFRDDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.BodyFRDDelta)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timedeltas(), target);
  }

  // required double forwardDeltaM = 3;
  if (has_forwarddeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->forwarddeltam(), target);
  }

  // required double rightDeltaM = 4;
  if (has_rightdeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rightdeltam(), target);
  }

  // required double downDeltaM = 5;
  if (has_downdeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->downdeltam(), target);
  }

  // optional double forwardDeltaSigmaM = 6 [default = 0];
  if (has_forwarddeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->forwarddeltasigmam(), target);
  }

  // optional double rightDeltaSigmaM = 7 [default = 0];
  if (has_rightdeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rightdeltasigmam(), target);
  }

  // optional double downDeltaSigmaM = 8 [default = 0];
  if (has_downdeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->downdeltasigmam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.BodyFRDDelta)
  return target;
}

int BodyFRDDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double timeDeltaS = 2;
    if (has_timedeltas()) {
      total_size += 1 + 8;
    }

    // required double forwardDeltaM = 3;
    if (has_forwarddeltam()) {
      total_size += 1 + 8;
    }

    // required double rightDeltaM = 4;
    if (has_rightdeltam()) {
      total_size += 1 + 8;
    }

    // required double downDeltaM = 5;
    if (has_downdeltam()) {
      total_size += 1 + 8;
    }

    // optional double forwardDeltaSigmaM = 6 [default = 0];
    if (has_forwarddeltasigmam()) {
      total_size += 1 + 8;
    }

    // optional double rightDeltaSigmaM = 7 [default = 0];
    if (has_rightdeltasigmam()) {
      total_size += 1 + 8;
    }

    // optional double downDeltaSigmaM = 8 [default = 0];
    if (has_downdeltasigmam()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyFRDDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyFRDDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyFRDDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyFRDDelta::MergeFrom(const BodyFRDDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_timedeltas()) {
      set_timedeltas(from.timedeltas());
    }
    if (from.has_forwarddeltam()) {
      set_forwarddeltam(from.forwarddeltam());
    }
    if (from.has_rightdeltam()) {
      set_rightdeltam(from.rightdeltam());
    }
    if (from.has_downdeltam()) {
      set_downdeltam(from.downdeltam());
    }
    if (from.has_forwarddeltasigmam()) {
      set_forwarddeltasigmam(from.forwarddeltasigmam());
    }
    if (from.has_rightdeltasigmam()) {
      set_rightdeltasigmam(from.rightdeltasigmam());
    }
    if (from.has_downdeltasigmam()) {
      set_downdeltasigmam(from.downdeltasigmam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyFRDDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyFRDDelta::CopyFrom(const BodyFRDDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyFRDDelta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BodyFRDDelta::Swap(BodyFRDDelta* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(timedeltas_, other->timedeltas_);
    std::swap(forwarddeltam_, other->forwarddeltam_);
    std::swap(rightdeltam_, other->rightdeltam_);
    std::swap(downdeltam_, other->downdeltam_);
    std::swap(forwarddeltasigmam_, other->forwarddeltasigmam_);
    std::swap(rightdeltasigmam_, other->rightdeltasigmam_);
    std::swap(downdeltasigmam_, other->downdeltasigmam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyFRDDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyFRDDelta_descriptor_;
  metadata.reflection = BodyFRDDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyFRDRateDelta::kTimeSFieldNumber;
const int BodyFRDRateDelta::kTimeDeltaSFieldNumber;
const int BodyFRDRateDelta::kForwardRateDeltaMPSFieldNumber;
const int BodyFRDRateDelta::kRightRateDeltaMPSFieldNumber;
const int BodyFRDRateDelta::kDownRateDeltaMPSFieldNumber;
const int BodyFRDRateDelta::kForwardRateDeltaSigmaMPSFieldNumber;
const int BodyFRDRateDelta::kRightRateDeltaSigmaMPSFieldNumber;
const int BodyFRDRateDelta::kDownRateDeltaSigmaMPSFieldNumber;
#endif  // !_MSC_VER

BodyFRDRateDelta::BodyFRDRateDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.BodyFRDRateDelta)
}

void BodyFRDRateDelta::InitAsDefaultInstance() {
}

BodyFRDRateDelta::BodyFRDRateDelta(const BodyFRDRateDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.BodyFRDRateDelta)
}

void BodyFRDRateDelta::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  timedeltas_ = 0;
  forwardratedeltamps_ = 0;
  rightratedeltamps_ = 0;
  downratedeltamps_ = 0;
  forwardratedeltasigmamps_ = 0;
  rightratedeltasigmamps_ = 0;
  downratedeltasigmamps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyFRDRateDelta::~BodyFRDRateDelta() {
  // @@protoc_insertion_point(destructor:nav.BodyFRDRateDelta)
  SharedDtor();
}

void BodyFRDRateDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BodyFRDRateDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyFRDRateDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyFRDRateDelta_descriptor_;
}

const BodyFRDRateDelta& BodyFRDRateDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

BodyFRDRateDelta* BodyFRDRateDelta::default_instance_ = NULL;

BodyFRDRateDelta* BodyFRDRateDelta::New() const {
  return new BodyFRDRateDelta;
}

void BodyFRDRateDelta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BodyFRDRateDelta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, downratedeltasigmamps_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyFRDRateDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.BodyFRDRateDelta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeDeltaS;
        break;
      }

      // required double timeDeltaS = 2;
      case 2: {
        if (tag == 17) {
         parse_timeDeltaS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timedeltas_)));
          set_has_timedeltas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_forwardRateDeltaMPS;
        break;
      }

      // required double forwardRateDeltaMPS = 3;
      case 3: {
        if (tag == 25) {
         parse_forwardRateDeltaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardratedeltamps_)));
          set_has_forwardratedeltamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rightRateDeltaMPS;
        break;
      }

      // required double rightRateDeltaMPS = 4;
      case 4: {
        if (tag == 33) {
         parse_rightRateDeltaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightratedeltamps_)));
          set_has_rightratedeltamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_downRateDeltaMPS;
        break;
      }

      // required double downRateDeltaMPS = 5;
      case 5: {
        if (tag == 41) {
         parse_downRateDeltaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downratedeltamps_)));
          set_has_downratedeltamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_forwardRateDeltaSigmaMPS;
        break;
      }

      // optional double forwardRateDeltaSigmaMPS = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_forwardRateDeltaSigmaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardratedeltasigmamps_)));
          set_has_forwardratedeltasigmamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rightRateDeltaSigmaMPS;
        break;
      }

      // optional double rightRateDeltaSigmaMPS = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_rightRateDeltaSigmaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightratedeltasigmamps_)));
          set_has_rightratedeltasigmamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_downRateDeltaSigmaMPS;
        break;
      }

      // optional double downRateDeltaSigmaMPS = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_downRateDeltaSigmaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downratedeltasigmamps_)));
          set_has_downratedeltasigmamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.BodyFRDRateDelta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.BodyFRDRateDelta)
  return false;
#undef DO_
}

void BodyFRDRateDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.BodyFRDRateDelta)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timedeltas(), output);
  }

  // required double forwardRateDeltaMPS = 3;
  if (has_forwardratedeltamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->forwardratedeltamps(), output);
  }

  // required double rightRateDeltaMPS = 4;
  if (has_rightratedeltamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rightratedeltamps(), output);
  }

  // required double downRateDeltaMPS = 5;
  if (has_downratedeltamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->downratedeltamps(), output);
  }

  // optional double forwardRateDeltaSigmaMPS = 6 [default = 0];
  if (has_forwardratedeltasigmamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->forwardratedeltasigmamps(), output);
  }

  // optional double rightRateDeltaSigmaMPS = 7 [default = 0];
  if (has_rightratedeltasigmamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rightratedeltasigmamps(), output);
  }

  // optional double downRateDeltaSigmaMPS = 8 [default = 0];
  if (has_downratedeltasigmamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->downratedeltasigmamps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.BodyFRDRateDelta)
}

::google::protobuf::uint8* BodyFRDRateDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.BodyFRDRateDelta)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timedeltas(), target);
  }

  // required double forwardRateDeltaMPS = 3;
  if (has_forwardratedeltamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->forwardratedeltamps(), target);
  }

  // required double rightRateDeltaMPS = 4;
  if (has_rightratedeltamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rightratedeltamps(), target);
  }

  // required double downRateDeltaMPS = 5;
  if (has_downratedeltamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->downratedeltamps(), target);
  }

  // optional double forwardRateDeltaSigmaMPS = 6 [default = 0];
  if (has_forwardratedeltasigmamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->forwardratedeltasigmamps(), target);
  }

  // optional double rightRateDeltaSigmaMPS = 7 [default = 0];
  if (has_rightratedeltasigmamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rightratedeltasigmamps(), target);
  }

  // optional double downRateDeltaSigmaMPS = 8 [default = 0];
  if (has_downratedeltasigmamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->downratedeltasigmamps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.BodyFRDRateDelta)
  return target;
}

int BodyFRDRateDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double timeDeltaS = 2;
    if (has_timedeltas()) {
      total_size += 1 + 8;
    }

    // required double forwardRateDeltaMPS = 3;
    if (has_forwardratedeltamps()) {
      total_size += 1 + 8;
    }

    // required double rightRateDeltaMPS = 4;
    if (has_rightratedeltamps()) {
      total_size += 1 + 8;
    }

    // required double downRateDeltaMPS = 5;
    if (has_downratedeltamps()) {
      total_size += 1 + 8;
    }

    // optional double forwardRateDeltaSigmaMPS = 6 [default = 0];
    if (has_forwardratedeltasigmamps()) {
      total_size += 1 + 8;
    }

    // optional double rightRateDeltaSigmaMPS = 7 [default = 0];
    if (has_rightratedeltasigmamps()) {
      total_size += 1 + 8;
    }

    // optional double downRateDeltaSigmaMPS = 8 [default = 0];
    if (has_downratedeltasigmamps()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyFRDRateDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyFRDRateDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyFRDRateDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyFRDRateDelta::MergeFrom(const BodyFRDRateDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_timedeltas()) {
      set_timedeltas(from.timedeltas());
    }
    if (from.has_forwardratedeltamps()) {
      set_forwardratedeltamps(from.forwardratedeltamps());
    }
    if (from.has_rightratedeltamps()) {
      set_rightratedeltamps(from.rightratedeltamps());
    }
    if (from.has_downratedeltamps()) {
      set_downratedeltamps(from.downratedeltamps());
    }
    if (from.has_forwardratedeltasigmamps()) {
      set_forwardratedeltasigmamps(from.forwardratedeltasigmamps());
    }
    if (from.has_rightratedeltasigmamps()) {
      set_rightratedeltasigmamps(from.rightratedeltasigmamps());
    }
    if (from.has_downratedeltasigmamps()) {
      set_downratedeltasigmamps(from.downratedeltasigmamps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyFRDRateDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyFRDRateDelta::CopyFrom(const BodyFRDRateDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyFRDRateDelta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BodyFRDRateDelta::Swap(BodyFRDRateDelta* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(timedeltas_, other->timedeltas_);
    std::swap(forwardratedeltamps_, other->forwardratedeltamps_);
    std::swap(rightratedeltamps_, other->rightratedeltamps_);
    std::swap(downratedeltamps_, other->downratedeltamps_);
    std::swap(forwardratedeltasigmamps_, other->forwardratedeltasigmamps_);
    std::swap(rightratedeltasigmamps_, other->rightratedeltasigmamps_);
    std::swap(downratedeltasigmamps_, other->downratedeltasigmamps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyFRDRateDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyFRDRateDelta_descriptor_;
  metadata.reflection = BodyFRDRateDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelRPY::kTargetIDFieldNumber;
const int RelRPY::kTimeSFieldNumber;
const int RelRPY::kRollRFieldNumber;
const int RelRPY::kPitchRFieldNumber;
const int RelRPY::kYawRFieldNumber;
const int RelRPY::kRollSigmaRFieldNumber;
const int RelRPY::kPitchSigmaRFieldNumber;
const int RelRPY::kYawSigmaRFieldNumber;
#endif  // !_MSC_VER

RelRPY::RelRPY()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.RelRPY)
}

void RelRPY::InitAsDefaultInstance() {
}

RelRPY::RelRPY(const RelRPY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.RelRPY)
}

void RelRPY::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  times_ = 0;
  rollr_ = 0;
  pitchr_ = 0;
  yawr_ = 0;
  rollsigmar_ = 0;
  pitchsigmar_ = 0;
  yawsigmar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelRPY::~RelRPY() {
  // @@protoc_insertion_point(destructor:nav.RelRPY)
  SharedDtor();
}

void RelRPY::SharedDtor() {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetid_;
  }
  if (this != default_instance_) {
  }
}

void RelRPY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelRPY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelRPY_descriptor_;
}

const RelRPY& RelRPY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

RelRPY* RelRPY::default_instance_ = NULL;

RelRPY* RelRPY::New() const {
  return new RelRPY;
}

void RelRPY::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RelRPY*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, yawsigmar_);
    if (has_targetid()) {
      if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelRPY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.RelRPY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string targetID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetid().data(), this->targetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeS;
        break;
      }

      // required double timeS = 2;
      case 2: {
        if (tag == 17) {
         parse_timeS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rollR;
        break;
      }

      // required double rollR = 3;
      case 3: {
        if (tag == 25) {
         parse_rollR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollr_)));
          set_has_rollr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pitchR;
        break;
      }

      // required double pitchR = 4;
      case 4: {
        if (tag == 33) {
         parse_pitchR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchr_)));
          set_has_pitchr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_yawR;
        break;
      }

      // required double yawR = 5;
      case 5: {
        if (tag == 41) {
         parse_yawR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawr_)));
          set_has_yawr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rollSigmaR;
        break;
      }

      // optional double rollSigmaR = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_rollSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollsigmar_)));
          set_has_rollsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_pitchSigmaR;
        break;
      }

      // optional double pitchSigmaR = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_pitchSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchsigmar_)));
          set_has_pitchsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_yawSigmaR;
        break;
      }

      // optional double yawSigmaR = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_yawSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawsigmar_)));
          set_has_yawsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.RelRPY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.RelRPY)
  return false;
#undef DO_
}

void RelRPY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.RelRPY)
  // required string targetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetid().data(), this->targetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->targetid(), output);
  }

  // required double timeS = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->times(), output);
  }

  // required double rollR = 3;
  if (has_rollr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rollr(), output);
  }

  // required double pitchR = 4;
  if (has_pitchr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitchr(), output);
  }

  // required double yawR = 5;
  if (has_yawr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yawr(), output);
  }

  // optional double rollSigmaR = 6 [default = 0];
  if (has_rollsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rollsigmar(), output);
  }

  // optional double pitchSigmaR = 7 [default = 0];
  if (has_pitchsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pitchsigmar(), output);
  }

  // optional double yawSigmaR = 8 [default = 0];
  if (has_yawsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->yawsigmar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.RelRPY)
}

::google::protobuf::uint8* RelRPY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.RelRPY)
  // required string targetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetid().data(), this->targetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetid(), target);
  }

  // required double timeS = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->times(), target);
  }

  // required double rollR = 3;
  if (has_rollr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rollr(), target);
  }

  // required double pitchR = 4;
  if (has_pitchr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitchr(), target);
  }

  // required double yawR = 5;
  if (has_yawr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yawr(), target);
  }

  // optional double rollSigmaR = 6 [default = 0];
  if (has_rollsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rollsigmar(), target);
  }

  // optional double pitchSigmaR = 7 [default = 0];
  if (has_pitchsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pitchsigmar(), target);
  }

  // optional double yawSigmaR = 8 [default = 0];
  if (has_yawsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->yawsigmar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.RelRPY)
  return target;
}

int RelRPY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string targetID = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetid());
    }

    // required double timeS = 2;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double rollR = 3;
    if (has_rollr()) {
      total_size += 1 + 8;
    }

    // required double pitchR = 4;
    if (has_pitchr()) {
      total_size += 1 + 8;
    }

    // required double yawR = 5;
    if (has_yawr()) {
      total_size += 1 + 8;
    }

    // optional double rollSigmaR = 6 [default = 0];
    if (has_rollsigmar()) {
      total_size += 1 + 8;
    }

    // optional double pitchSigmaR = 7 [default = 0];
    if (has_pitchsigmar()) {
      total_size += 1 + 8;
    }

    // optional double yawSigmaR = 8 [default = 0];
    if (has_yawsigmar()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelRPY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelRPY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelRPY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelRPY::MergeFrom(const RelRPY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_rollr()) {
      set_rollr(from.rollr());
    }
    if (from.has_pitchr()) {
      set_pitchr(from.pitchr());
    }
    if (from.has_yawr()) {
      set_yawr(from.yawr());
    }
    if (from.has_rollsigmar()) {
      set_rollsigmar(from.rollsigmar());
    }
    if (from.has_pitchsigmar()) {
      set_pitchsigmar(from.pitchsigmar());
    }
    if (from.has_yawsigmar()) {
      set_yawsigmar(from.yawsigmar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelRPY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelRPY::CopyFrom(const RelRPY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelRPY::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RelRPY::Swap(RelRPY* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(times_, other->times_);
    std::swap(rollr_, other->rollr_);
    std::swap(pitchr_, other->pitchr_);
    std::swap(yawr_, other->yawr_);
    std::swap(rollsigmar_, other->rollsigmar_);
    std::swap(pitchsigmar_, other->pitchsigmar_);
    std::swap(yawsigmar_, other->yawsigmar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelRPY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelRPY_descriptor_;
  metadata.reflection = RelRPY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelFRD::kTargetIDFieldNumber;
const int RelFRD::kTimeSFieldNumber;
const int RelFRD::kForwardMFieldNumber;
const int RelFRD::kRightMFieldNumber;
const int RelFRD::kDownMFieldNumber;
const int RelFRD::kForwardSigmaMFieldNumber;
const int RelFRD::kRightSigmaMFieldNumber;
const int RelFRD::kDownSigmaMFieldNumber;
#endif  // !_MSC_VER

RelFRD::RelFRD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.RelFRD)
}

void RelFRD::InitAsDefaultInstance() {
}

RelFRD::RelFRD(const RelFRD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.RelFRD)
}

void RelFRD::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  times_ = 0;
  forwardm_ = 0;
  rightm_ = 0;
  downm_ = 0;
  forwardsigmam_ = 0;
  rightsigmam_ = 0;
  downsigmam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelFRD::~RelFRD() {
  // @@protoc_insertion_point(destructor:nav.RelFRD)
  SharedDtor();
}

void RelFRD::SharedDtor() {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetid_;
  }
  if (this != default_instance_) {
  }
}

void RelFRD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelFRD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelFRD_descriptor_;
}

const RelFRD& RelFRD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

RelFRD* RelFRD::default_instance_ = NULL;

RelFRD* RelFRD::New() const {
  return new RelFRD;
}

void RelFRD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RelFRD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, downsigmam_);
    if (has_targetid()) {
      if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelFRD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.RelFRD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string targetID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetid().data(), this->targetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeS;
        break;
      }

      // required double timeS = 2;
      case 2: {
        if (tag == 17) {
         parse_timeS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_forwardM;
        break;
      }

      // required double forwardM = 3;
      case 3: {
        if (tag == 25) {
         parse_forwardM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardm_)));
          set_has_forwardm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rightM;
        break;
      }

      // required double rightM = 4;
      case 4: {
        if (tag == 33) {
         parse_rightM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightm_)));
          set_has_rightm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_downM;
        break;
      }

      // required double downM = 5;
      case 5: {
        if (tag == 41) {
         parse_downM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downm_)));
          set_has_downm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_forwardSigmaM;
        break;
      }

      // optional double forwardSigmaM = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_forwardSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardsigmam_)));
          set_has_forwardsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rightSigmaM;
        break;
      }

      // optional double rightSigmaM = 7 [default = 0];
      case 7: {
        if (tag == 57) {
         parse_rightSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightsigmam_)));
          set_has_rightsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_downSigmaM;
        break;
      }

      // optional double downSigmaM = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_downSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsigmam_)));
          set_has_downsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.RelFRD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.RelFRD)
  return false;
#undef DO_
}

void RelFRD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.RelFRD)
  // required string targetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetid().data(), this->targetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->targetid(), output);
  }

  // required double timeS = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->times(), output);
  }

  // required double forwardM = 3;
  if (has_forwardm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->forwardm(), output);
  }

  // required double rightM = 4;
  if (has_rightm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rightm(), output);
  }

  // required double downM = 5;
  if (has_downm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->downm(), output);
  }

  // optional double forwardSigmaM = 6 [default = 0];
  if (has_forwardsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->forwardsigmam(), output);
  }

  // optional double rightSigmaM = 7 [default = 0];
  if (has_rightsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rightsigmam(), output);
  }

  // optional double downSigmaM = 8 [default = 0];
  if (has_downsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->downsigmam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.RelFRD)
}

::google::protobuf::uint8* RelFRD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.RelFRD)
  // required string targetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetid().data(), this->targetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetid(), target);
  }

  // required double timeS = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->times(), target);
  }

  // required double forwardM = 3;
  if (has_forwardm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->forwardm(), target);
  }

  // required double rightM = 4;
  if (has_rightm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rightm(), target);
  }

  // required double downM = 5;
  if (has_downm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->downm(), target);
  }

  // optional double forwardSigmaM = 6 [default = 0];
  if (has_forwardsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->forwardsigmam(), target);
  }

  // optional double rightSigmaM = 7 [default = 0];
  if (has_rightsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rightsigmam(), target);
  }

  // optional double downSigmaM = 8 [default = 0];
  if (has_downsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->downsigmam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.RelFRD)
  return target;
}

int RelFRD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string targetID = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetid());
    }

    // required double timeS = 2;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double forwardM = 3;
    if (has_forwardm()) {
      total_size += 1 + 8;
    }

    // required double rightM = 4;
    if (has_rightm()) {
      total_size += 1 + 8;
    }

    // required double downM = 5;
    if (has_downm()) {
      total_size += 1 + 8;
    }

    // optional double forwardSigmaM = 6 [default = 0];
    if (has_forwardsigmam()) {
      total_size += 1 + 8;
    }

    // optional double rightSigmaM = 7 [default = 0];
    if (has_rightsigmam()) {
      total_size += 1 + 8;
    }

    // optional double downSigmaM = 8 [default = 0];
    if (has_downsigmam()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelFRD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelFRD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelFRD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelFRD::MergeFrom(const RelFRD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_forwardm()) {
      set_forwardm(from.forwardm());
    }
    if (from.has_rightm()) {
      set_rightm(from.rightm());
    }
    if (from.has_downm()) {
      set_downm(from.downm());
    }
    if (from.has_forwardsigmam()) {
      set_forwardsigmam(from.forwardsigmam());
    }
    if (from.has_rightsigmam()) {
      set_rightsigmam(from.rightsigmam());
    }
    if (from.has_downsigmam()) {
      set_downsigmam(from.downsigmam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelFRD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelFRD::CopyFrom(const RelFRD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelFRD::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RelFRD::Swap(RelFRD* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(times_, other->times_);
    std::swap(forwardm_, other->forwardm_);
    std::swap(rightm_, other->rightm_);
    std::swap(downm_, other->downm_);
    std::swap(forwardsigmam_, other->forwardsigmam_);
    std::swap(rightsigmam_, other->rightsigmam_);
    std::swap(downsigmam_, other->downsigmam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelFRD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelFRD_descriptor_;
  metadata.reflection = RelFRD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FusedState::kTimeSFieldNumber;
const int FusedState::kTimeDeltaSFieldNumber;
const int FusedState::kRollRFieldNumber;
const int FusedState::kPitchRFieldNumber;
const int FusedState::kYawRFieldNumber;
const int FusedState::kRollDeltaRFieldNumber;
const int FusedState::kPitchDeltaRFieldNumber;
const int FusedState::kYawDeltaRFieldNumber;
const int FusedState::kLatRFieldNumber;
const int FusedState::kLonRFieldNumber;
const int FusedState::kAltMFieldNumber;
const int FusedState::kForwardDeltaMFieldNumber;
const int FusedState::kRightDeltaMFieldNumber;
const int FusedState::kDownDeltaMFieldNumber;
const int FusedState::kForwardRateDeltaMPSFieldNumber;
const int FusedState::kRightRateDeltaMPSFieldNumber;
const int FusedState::kDownRateDeltaMPSFieldNumber;
const int FusedState::kRollSigmaRFieldNumber;
const int FusedState::kPitchSigmaRFieldNumber;
const int FusedState::kYawSigmaRFieldNumber;
const int FusedState::kRollDeltaSigmaRPSFieldNumber;
const int FusedState::kPitchDeltaSigmaRPSFieldNumber;
const int FusedState::kYawDeltaSigmaRPSFieldNumber;
const int FusedState::kLatSigmaRFieldNumber;
const int FusedState::kLonSigmaRFieldNumber;
const int FusedState::kAltSigmaMFieldNumber;
const int FusedState::kForwardDeltaSigmaMFieldNumber;
const int FusedState::kRightDeltaSigmaMFieldNumber;
const int FusedState::kDownDeltaSigmaMFieldNumber;
const int FusedState::kForwardRateDeltaSigmaMPSFieldNumber;
const int FusedState::kRightRateDeltaSigmaMPSFieldNumber;
const int FusedState::kDownRateDeltaSigmaMPSFieldNumber;
#endif  // !_MSC_VER

FusedState::FusedState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.FusedState)
}

void FusedState::InitAsDefaultInstance() {
}

FusedState::FusedState(const FusedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.FusedState)
}

void FusedState::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  timedeltas_ = 0;
  rollr_ = 0;
  pitchr_ = 0;
  yawr_ = 0;
  rolldeltar_ = 0;
  pitchdeltar_ = 0;
  yawdeltar_ = 0;
  latr_ = 0;
  lonr_ = 0;
  altm_ = 0;
  forwarddeltam_ = 0;
  rightdeltam_ = 0;
  downdeltam_ = 0;
  forwardratedeltamps_ = 0;
  rightratedeltamps_ = 0;
  downratedeltamps_ = 0;
  rollsigmar_ = 0;
  pitchsigmar_ = 0;
  yawsigmar_ = 0;
  rolldeltasigmarps_ = 0;
  pitchdeltasigmarps_ = 0;
  yawdeltasigmarps_ = 0;
  latsigmar_ = 0;
  lonsigmar_ = 0;
  altsigmam_ = 0;
  forwarddeltasigmam_ = 0;
  rightdeltasigmam_ = 0;
  downdeltasigmam_ = 0;
  forwardratedeltasigmamps_ = 0;
  rightratedeltasigmamps_ = 0;
  downratedeltasigmamps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FusedState::~FusedState() {
  // @@protoc_insertion_point(destructor:nav.FusedState)
  SharedDtor();
}

void FusedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FusedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FusedState_descriptor_;
}

const FusedState& FusedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

FusedState* FusedState::default_instance_ = NULL;

FusedState* FusedState::New() const {
  return new FusedState;
}

void FusedState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FusedState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, yawdeltar_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(latr_, rightratedeltamps_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(downratedeltamps_, latsigmar_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(lonsigmar_, downratedeltasigmamps_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FusedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.FusedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timeDeltaS;
        break;
      }

      // required double timeDeltaS = 2;
      case 2: {
        if (tag == 17) {
         parse_timeDeltaS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timedeltas_)));
          set_has_timedeltas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rollR;
        break;
      }

      // required double rollR = 3;
      case 3: {
        if (tag == 25) {
         parse_rollR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollr_)));
          set_has_rollr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pitchR;
        break;
      }

      // required double pitchR = 4;
      case 4: {
        if (tag == 33) {
         parse_pitchR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchr_)));
          set_has_pitchr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_yawR;
        break;
      }

      // required double yawR = 5;
      case 5: {
        if (tag == 41) {
         parse_yawR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawr_)));
          set_has_yawr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rollDeltaR;
        break;
      }

      // required double rollDeltaR = 6;
      case 6: {
        if (tag == 49) {
         parse_rollDeltaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rolldeltar_)));
          set_has_rolldeltar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_pitchDeltaR;
        break;
      }

      // required double pitchDeltaR = 7;
      case 7: {
        if (tag == 57) {
         parse_pitchDeltaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchdeltar_)));
          set_has_pitchdeltar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_yawDeltaR;
        break;
      }

      // required double yawDeltaR = 8;
      case 8: {
        if (tag == 65) {
         parse_yawDeltaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawdeltar_)));
          set_has_yawdeltar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_latR;
        break;
      }

      // required double latR = 9;
      case 9: {
        if (tag == 73) {
         parse_latR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latr_)));
          set_has_latr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_lonR;
        break;
      }

      // required double lonR = 10;
      case 10: {
        if (tag == 81) {
         parse_lonR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lonr_)));
          set_has_lonr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_altM;
        break;
      }

      // required double altM = 11;
      case 11: {
        if (tag == 89) {
         parse_altM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altm_)));
          set_has_altm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_forwardDeltaM;
        break;
      }

      // required double forwardDeltaM = 12;
      case 12: {
        if (tag == 97) {
         parse_forwardDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwarddeltam_)));
          set_has_forwarddeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_rightDeltaM;
        break;
      }

      // required double rightDeltaM = 13;
      case 13: {
        if (tag == 105) {
         parse_rightDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightdeltam_)));
          set_has_rightdeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_downDeltaM;
        break;
      }

      // required double downDeltaM = 14;
      case 14: {
        if (tag == 113) {
         parse_downDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downdeltam_)));
          set_has_downdeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_forwardRateDeltaMPS;
        break;
      }

      // required double forwardRateDeltaMPS = 15;
      case 15: {
        if (tag == 121) {
         parse_forwardRateDeltaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardratedeltamps_)));
          set_has_forwardratedeltamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_rightRateDeltaMPS;
        break;
      }

      // required double rightRateDeltaMPS = 16;
      case 16: {
        if (tag == 129) {
         parse_rightRateDeltaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightratedeltamps_)));
          set_has_rightratedeltamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_downRateDeltaMPS;
        break;
      }

      // required double downRateDeltaMPS = 17;
      case 17: {
        if (tag == 137) {
         parse_downRateDeltaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downratedeltamps_)));
          set_has_downratedeltamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_rollSigmaR;
        break;
      }

      // optional double rollSigmaR = 18 [default = 0];
      case 18: {
        if (tag == 145) {
         parse_rollSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollsigmar_)));
          set_has_rollsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_pitchSigmaR;
        break;
      }

      // optional double pitchSigmaR = 19 [default = 0];
      case 19: {
        if (tag == 153) {
         parse_pitchSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchsigmar_)));
          set_has_pitchsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_yawSigmaR;
        break;
      }

      // optional double yawSigmaR = 20 [default = 0];
      case 20: {
        if (tag == 161) {
         parse_yawSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawsigmar_)));
          set_has_yawsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_rollDeltaSigmaRPS;
        break;
      }

      // optional double rollDeltaSigmaRPS = 21 [default = 0];
      case 21: {
        if (tag == 169) {
         parse_rollDeltaSigmaRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rolldeltasigmarps_)));
          set_has_rolldeltasigmarps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_pitchDeltaSigmaRPS;
        break;
      }

      // optional double pitchDeltaSigmaRPS = 22 [default = 0];
      case 22: {
        if (tag == 177) {
         parse_pitchDeltaSigmaRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchdeltasigmarps_)));
          set_has_pitchdeltasigmarps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_yawDeltaSigmaRPS;
        break;
      }

      // optional double yawDeltaSigmaRPS = 23 [default = 0];
      case 23: {
        if (tag == 185) {
         parse_yawDeltaSigmaRPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawdeltasigmarps_)));
          set_has_yawdeltasigmarps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_latSigmaR;
        break;
      }

      // optional double latSigmaR = 24 [default = 0];
      case 24: {
        if (tag == 193) {
         parse_latSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latsigmar_)));
          set_has_latsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_lonSigmaR;
        break;
      }

      // optional double lonSigmaR = 25 [default = 0];
      case 25: {
        if (tag == 201) {
         parse_lonSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lonsigmar_)));
          set_has_lonsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_altSigmaM;
        break;
      }

      // optional double altSigmaM = 26 [default = 0];
      case 26: {
        if (tag == 209) {
         parse_altSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altsigmam_)));
          set_has_altsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_forwardDeltaSigmaM;
        break;
      }

      // optional double forwardDeltaSigmaM = 27 [default = 0];
      case 27: {
        if (tag == 217) {
         parse_forwardDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwarddeltasigmam_)));
          set_has_forwarddeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_rightDeltaSigmaM;
        break;
      }

      // optional double rightDeltaSigmaM = 28 [default = 0];
      case 28: {
        if (tag == 225) {
         parse_rightDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightdeltasigmam_)));
          set_has_rightdeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_downDeltaSigmaM;
        break;
      }

      // optional double downDeltaSigmaM = 29 [default = 0];
      case 29: {
        if (tag == 233) {
         parse_downDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downdeltasigmam_)));
          set_has_downdeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_forwardRateDeltaSigmaMPS;
        break;
      }

      // optional double forwardRateDeltaSigmaMPS = 30 [default = 0];
      case 30: {
        if (tag == 241) {
         parse_forwardRateDeltaSigmaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardratedeltasigmamps_)));
          set_has_forwardratedeltasigmamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_rightRateDeltaSigmaMPS;
        break;
      }

      // optional double rightRateDeltaSigmaMPS = 31 [default = 0];
      case 31: {
        if (tag == 249) {
         parse_rightRateDeltaSigmaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightratedeltasigmamps_)));
          set_has_rightratedeltasigmamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_downRateDeltaSigmaMPS;
        break;
      }

      // optional double downRateDeltaSigmaMPS = 32 [default = 0];
      case 32: {
        if (tag == 257) {
         parse_downRateDeltaSigmaMPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downratedeltasigmamps_)));
          set_has_downratedeltasigmamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.FusedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.FusedState)
  return false;
#undef DO_
}

void FusedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.FusedState)
  // required double timeS = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->times(), output);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timedeltas(), output);
  }

  // required double rollR = 3;
  if (has_rollr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rollr(), output);
  }

  // required double pitchR = 4;
  if (has_pitchr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitchr(), output);
  }

  // required double yawR = 5;
  if (has_yawr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yawr(), output);
  }

  // required double rollDeltaR = 6;
  if (has_rolldeltar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rolldeltar(), output);
  }

  // required double pitchDeltaR = 7;
  if (has_pitchdeltar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pitchdeltar(), output);
  }

  // required double yawDeltaR = 8;
  if (has_yawdeltar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->yawdeltar(), output);
  }

  // required double latR = 9;
  if (has_latr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->latr(), output);
  }

  // required double lonR = 10;
  if (has_lonr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lonr(), output);
  }

  // required double altM = 11;
  if (has_altm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->altm(), output);
  }

  // required double forwardDeltaM = 12;
  if (has_forwarddeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->forwarddeltam(), output);
  }

  // required double rightDeltaM = 13;
  if (has_rightdeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->rightdeltam(), output);
  }

  // required double downDeltaM = 14;
  if (has_downdeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->downdeltam(), output);
  }

  // required double forwardRateDeltaMPS = 15;
  if (has_forwardratedeltamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->forwardratedeltamps(), output);
  }

  // required double rightRateDeltaMPS = 16;
  if (has_rightratedeltamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->rightratedeltamps(), output);
  }

  // required double downRateDeltaMPS = 17;
  if (has_downratedeltamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->downratedeltamps(), output);
  }

  // optional double rollSigmaR = 18 [default = 0];
  if (has_rollsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->rollsigmar(), output);
  }

  // optional double pitchSigmaR = 19 [default = 0];
  if (has_pitchsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->pitchsigmar(), output);
  }

  // optional double yawSigmaR = 20 [default = 0];
  if (has_yawsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->yawsigmar(), output);
  }

  // optional double rollDeltaSigmaRPS = 21 [default = 0];
  if (has_rolldeltasigmarps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->rolldeltasigmarps(), output);
  }

  // optional double pitchDeltaSigmaRPS = 22 [default = 0];
  if (has_pitchdeltasigmarps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->pitchdeltasigmarps(), output);
  }

  // optional double yawDeltaSigmaRPS = 23 [default = 0];
  if (has_yawdeltasigmarps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->yawdeltasigmarps(), output);
  }

  // optional double latSigmaR = 24 [default = 0];
  if (has_latsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->latsigmar(), output);
  }

  // optional double lonSigmaR = 25 [default = 0];
  if (has_lonsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lonsigmar(), output);
  }

  // optional double altSigmaM = 26 [default = 0];
  if (has_altsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->altsigmam(), output);
  }

  // optional double forwardDeltaSigmaM = 27 [default = 0];
  if (has_forwarddeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->forwarddeltasigmam(), output);
  }

  // optional double rightDeltaSigmaM = 28 [default = 0];
  if (has_rightdeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->rightdeltasigmam(), output);
  }

  // optional double downDeltaSigmaM = 29 [default = 0];
  if (has_downdeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->downdeltasigmam(), output);
  }

  // optional double forwardRateDeltaSigmaMPS = 30 [default = 0];
  if (has_forwardratedeltasigmamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->forwardratedeltasigmamps(), output);
  }

  // optional double rightRateDeltaSigmaMPS = 31 [default = 0];
  if (has_rightratedeltasigmamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->rightratedeltasigmamps(), output);
  }

  // optional double downRateDeltaSigmaMPS = 32 [default = 0];
  if (has_downratedeltasigmamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->downratedeltasigmamps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.FusedState)
}

::google::protobuf::uint8* FusedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.FusedState)
  // required double timeS = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->times(), target);
  }

  // required double timeDeltaS = 2;
  if (has_timedeltas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timedeltas(), target);
  }

  // required double rollR = 3;
  if (has_rollr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rollr(), target);
  }

  // required double pitchR = 4;
  if (has_pitchr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitchr(), target);
  }

  // required double yawR = 5;
  if (has_yawr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yawr(), target);
  }

  // required double rollDeltaR = 6;
  if (has_rolldeltar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rolldeltar(), target);
  }

  // required double pitchDeltaR = 7;
  if (has_pitchdeltar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pitchdeltar(), target);
  }

  // required double yawDeltaR = 8;
  if (has_yawdeltar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->yawdeltar(), target);
  }

  // required double latR = 9;
  if (has_latr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->latr(), target);
  }

  // required double lonR = 10;
  if (has_lonr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lonr(), target);
  }

  // required double altM = 11;
  if (has_altm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->altm(), target);
  }

  // required double forwardDeltaM = 12;
  if (has_forwarddeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->forwarddeltam(), target);
  }

  // required double rightDeltaM = 13;
  if (has_rightdeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->rightdeltam(), target);
  }

  // required double downDeltaM = 14;
  if (has_downdeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->downdeltam(), target);
  }

  // required double forwardRateDeltaMPS = 15;
  if (has_forwardratedeltamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->forwardratedeltamps(), target);
  }

  // required double rightRateDeltaMPS = 16;
  if (has_rightratedeltamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->rightratedeltamps(), target);
  }

  // required double downRateDeltaMPS = 17;
  if (has_downratedeltamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->downratedeltamps(), target);
  }

  // optional double rollSigmaR = 18 [default = 0];
  if (has_rollsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->rollsigmar(), target);
  }

  // optional double pitchSigmaR = 19 [default = 0];
  if (has_pitchsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->pitchsigmar(), target);
  }

  // optional double yawSigmaR = 20 [default = 0];
  if (has_yawsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->yawsigmar(), target);
  }

  // optional double rollDeltaSigmaRPS = 21 [default = 0];
  if (has_rolldeltasigmarps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->rolldeltasigmarps(), target);
  }

  // optional double pitchDeltaSigmaRPS = 22 [default = 0];
  if (has_pitchdeltasigmarps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->pitchdeltasigmarps(), target);
  }

  // optional double yawDeltaSigmaRPS = 23 [default = 0];
  if (has_yawdeltasigmarps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->yawdeltasigmarps(), target);
  }

  // optional double latSigmaR = 24 [default = 0];
  if (has_latsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->latsigmar(), target);
  }

  // optional double lonSigmaR = 25 [default = 0];
  if (has_lonsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lonsigmar(), target);
  }

  // optional double altSigmaM = 26 [default = 0];
  if (has_altsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->altsigmam(), target);
  }

  // optional double forwardDeltaSigmaM = 27 [default = 0];
  if (has_forwarddeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->forwarddeltasigmam(), target);
  }

  // optional double rightDeltaSigmaM = 28 [default = 0];
  if (has_rightdeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->rightdeltasigmam(), target);
  }

  // optional double downDeltaSigmaM = 29 [default = 0];
  if (has_downdeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->downdeltasigmam(), target);
  }

  // optional double forwardRateDeltaSigmaMPS = 30 [default = 0];
  if (has_forwardratedeltasigmamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->forwardratedeltasigmamps(), target);
  }

  // optional double rightRateDeltaSigmaMPS = 31 [default = 0];
  if (has_rightratedeltasigmamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->rightratedeltasigmamps(), target);
  }

  // optional double downRateDeltaSigmaMPS = 32 [default = 0];
  if (has_downratedeltasigmamps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->downratedeltasigmamps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.FusedState)
  return target;
}

int FusedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeS = 1;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double timeDeltaS = 2;
    if (has_timedeltas()) {
      total_size += 1 + 8;
    }

    // required double rollR = 3;
    if (has_rollr()) {
      total_size += 1 + 8;
    }

    // required double pitchR = 4;
    if (has_pitchr()) {
      total_size += 1 + 8;
    }

    // required double yawR = 5;
    if (has_yawr()) {
      total_size += 1 + 8;
    }

    // required double rollDeltaR = 6;
    if (has_rolldeltar()) {
      total_size += 1 + 8;
    }

    // required double pitchDeltaR = 7;
    if (has_pitchdeltar()) {
      total_size += 1 + 8;
    }

    // required double yawDeltaR = 8;
    if (has_yawdeltar()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double latR = 9;
    if (has_latr()) {
      total_size += 1 + 8;
    }

    // required double lonR = 10;
    if (has_lonr()) {
      total_size += 1 + 8;
    }

    // required double altM = 11;
    if (has_altm()) {
      total_size += 1 + 8;
    }

    // required double forwardDeltaM = 12;
    if (has_forwarddeltam()) {
      total_size += 1 + 8;
    }

    // required double rightDeltaM = 13;
    if (has_rightdeltam()) {
      total_size += 1 + 8;
    }

    // required double downDeltaM = 14;
    if (has_downdeltam()) {
      total_size += 1 + 8;
    }

    // required double forwardRateDeltaMPS = 15;
    if (has_forwardratedeltamps()) {
      total_size += 1 + 8;
    }

    // required double rightRateDeltaMPS = 16;
    if (has_rightratedeltamps()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double downRateDeltaMPS = 17;
    if (has_downratedeltamps()) {
      total_size += 2 + 8;
    }

    // optional double rollSigmaR = 18 [default = 0];
    if (has_rollsigmar()) {
      total_size += 2 + 8;
    }

    // optional double pitchSigmaR = 19 [default = 0];
    if (has_pitchsigmar()) {
      total_size += 2 + 8;
    }

    // optional double yawSigmaR = 20 [default = 0];
    if (has_yawsigmar()) {
      total_size += 2 + 8;
    }

    // optional double rollDeltaSigmaRPS = 21 [default = 0];
    if (has_rolldeltasigmarps()) {
      total_size += 2 + 8;
    }

    // optional double pitchDeltaSigmaRPS = 22 [default = 0];
    if (has_pitchdeltasigmarps()) {
      total_size += 2 + 8;
    }

    // optional double yawDeltaSigmaRPS = 23 [default = 0];
    if (has_yawdeltasigmarps()) {
      total_size += 2 + 8;
    }

    // optional double latSigmaR = 24 [default = 0];
    if (has_latsigmar()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double lonSigmaR = 25 [default = 0];
    if (has_lonsigmar()) {
      total_size += 2 + 8;
    }

    // optional double altSigmaM = 26 [default = 0];
    if (has_altsigmam()) {
      total_size += 2 + 8;
    }

    // optional double forwardDeltaSigmaM = 27 [default = 0];
    if (has_forwarddeltasigmam()) {
      total_size += 2 + 8;
    }

    // optional double rightDeltaSigmaM = 28 [default = 0];
    if (has_rightdeltasigmam()) {
      total_size += 2 + 8;
    }

    // optional double downDeltaSigmaM = 29 [default = 0];
    if (has_downdeltasigmam()) {
      total_size += 2 + 8;
    }

    // optional double forwardRateDeltaSigmaMPS = 30 [default = 0];
    if (has_forwardratedeltasigmamps()) {
      total_size += 2 + 8;
    }

    // optional double rightRateDeltaSigmaMPS = 31 [default = 0];
    if (has_rightratedeltasigmamps()) {
      total_size += 2 + 8;
    }

    // optional double downRateDeltaSigmaMPS = 32 [default = 0];
    if (has_downratedeltasigmamps()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FusedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FusedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FusedState::MergeFrom(const FusedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_timedeltas()) {
      set_timedeltas(from.timedeltas());
    }
    if (from.has_rollr()) {
      set_rollr(from.rollr());
    }
    if (from.has_pitchr()) {
      set_pitchr(from.pitchr());
    }
    if (from.has_yawr()) {
      set_yawr(from.yawr());
    }
    if (from.has_rolldeltar()) {
      set_rolldeltar(from.rolldeltar());
    }
    if (from.has_pitchdeltar()) {
      set_pitchdeltar(from.pitchdeltar());
    }
    if (from.has_yawdeltar()) {
      set_yawdeltar(from.yawdeltar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_latr()) {
      set_latr(from.latr());
    }
    if (from.has_lonr()) {
      set_lonr(from.lonr());
    }
    if (from.has_altm()) {
      set_altm(from.altm());
    }
    if (from.has_forwarddeltam()) {
      set_forwarddeltam(from.forwarddeltam());
    }
    if (from.has_rightdeltam()) {
      set_rightdeltam(from.rightdeltam());
    }
    if (from.has_downdeltam()) {
      set_downdeltam(from.downdeltam());
    }
    if (from.has_forwardratedeltamps()) {
      set_forwardratedeltamps(from.forwardratedeltamps());
    }
    if (from.has_rightratedeltamps()) {
      set_rightratedeltamps(from.rightratedeltamps());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_downratedeltamps()) {
      set_downratedeltamps(from.downratedeltamps());
    }
    if (from.has_rollsigmar()) {
      set_rollsigmar(from.rollsigmar());
    }
    if (from.has_pitchsigmar()) {
      set_pitchsigmar(from.pitchsigmar());
    }
    if (from.has_yawsigmar()) {
      set_yawsigmar(from.yawsigmar());
    }
    if (from.has_rolldeltasigmarps()) {
      set_rolldeltasigmarps(from.rolldeltasigmarps());
    }
    if (from.has_pitchdeltasigmarps()) {
      set_pitchdeltasigmarps(from.pitchdeltasigmarps());
    }
    if (from.has_yawdeltasigmarps()) {
      set_yawdeltasigmarps(from.yawdeltasigmarps());
    }
    if (from.has_latsigmar()) {
      set_latsigmar(from.latsigmar());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lonsigmar()) {
      set_lonsigmar(from.lonsigmar());
    }
    if (from.has_altsigmam()) {
      set_altsigmam(from.altsigmam());
    }
    if (from.has_forwarddeltasigmam()) {
      set_forwarddeltasigmam(from.forwarddeltasigmam());
    }
    if (from.has_rightdeltasigmam()) {
      set_rightdeltasigmam(from.rightdeltasigmam());
    }
    if (from.has_downdeltasigmam()) {
      set_downdeltasigmam(from.downdeltasigmam());
    }
    if (from.has_forwardratedeltasigmamps()) {
      set_forwardratedeltasigmamps(from.forwardratedeltasigmamps());
    }
    if (from.has_rightratedeltasigmamps()) {
      set_rightratedeltasigmamps(from.rightratedeltasigmamps());
    }
    if (from.has_downratedeltasigmamps()) {
      set_downratedeltasigmamps(from.downratedeltasigmamps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FusedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusedState::CopyFrom(const FusedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusedState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void FusedState::Swap(FusedState* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(timedeltas_, other->timedeltas_);
    std::swap(rollr_, other->rollr_);
    std::swap(pitchr_, other->pitchr_);
    std::swap(yawr_, other->yawr_);
    std::swap(rolldeltar_, other->rolldeltar_);
    std::swap(pitchdeltar_, other->pitchdeltar_);
    std::swap(yawdeltar_, other->yawdeltar_);
    std::swap(latr_, other->latr_);
    std::swap(lonr_, other->lonr_);
    std::swap(altm_, other->altm_);
    std::swap(forwarddeltam_, other->forwarddeltam_);
    std::swap(rightdeltam_, other->rightdeltam_);
    std::swap(downdeltam_, other->downdeltam_);
    std::swap(forwardratedeltamps_, other->forwardratedeltamps_);
    std::swap(rightratedeltamps_, other->rightratedeltamps_);
    std::swap(downratedeltamps_, other->downratedeltamps_);
    std::swap(rollsigmar_, other->rollsigmar_);
    std::swap(pitchsigmar_, other->pitchsigmar_);
    std::swap(yawsigmar_, other->yawsigmar_);
    std::swap(rolldeltasigmarps_, other->rolldeltasigmarps_);
    std::swap(pitchdeltasigmarps_, other->pitchdeltasigmarps_);
    std::swap(yawdeltasigmarps_, other->yawdeltasigmarps_);
    std::swap(latsigmar_, other->latsigmar_);
    std::swap(lonsigmar_, other->lonsigmar_);
    std::swap(altsigmam_, other->altsigmam_);
    std::swap(forwarddeltasigmam_, other->forwarddeltasigmam_);
    std::swap(rightdeltasigmam_, other->rightdeltasigmam_);
    std::swap(downdeltasigmam_, other->downdeltasigmam_);
    std::swap(forwardratedeltasigmamps_, other->forwardratedeltasigmamps_);
    std::swap(rightratedeltasigmamps_, other->rightratedeltasigmamps_);
    std::swap(downratedeltasigmamps_, other->downratedeltasigmamps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FusedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FusedState_descriptor_;
  metadata.reflection = FusedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelFusedState::kOwnIDFieldNumber;
const int RelFusedState::kTargetIDFieldNumber;
const int RelFusedState::kTimeSFieldNumber;
const int RelFusedState::kRollRFieldNumber;
const int RelFusedState::kPitchRFieldNumber;
const int RelFusedState::kYawRFieldNumber;
const int RelFusedState::kForwardMFieldNumber;
const int RelFusedState::kRightMFieldNumber;
const int RelFusedState::kDownMFieldNumber;
const int RelFusedState::kForwardDeltaMFieldNumber;
const int RelFusedState::kRightDeltaMFieldNumber;
const int RelFusedState::kDownDeltaMFieldNumber;
const int RelFusedState::kForwardDeltaSigmaMFieldNumber;
const int RelFusedState::kRightDeltaSigmaMFieldNumber;
const int RelFusedState::kDownDeltaSigmaMFieldNumber;
const int RelFusedState::kRollSigmaRFieldNumber;
const int RelFusedState::kPitchSigmaRFieldNumber;
const int RelFusedState::kYawSigmaRFieldNumber;
const int RelFusedState::kForwardSigmaMFieldNumber;
const int RelFusedState::kRightSigmaMFieldNumber;
const int RelFusedState::kDownSigmaMFieldNumber;
#endif  // !_MSC_VER

RelFusedState::RelFusedState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nav.RelFusedState)
}

void RelFusedState::InitAsDefaultInstance() {
}

RelFusedState::RelFusedState(const RelFusedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nav.RelFusedState)
}

void RelFusedState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ownid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  times_ = 0;
  rollr_ = 0;
  pitchr_ = 0;
  yawr_ = 0;
  forwardm_ = 0;
  rightm_ = 0;
  downm_ = 0;
  forwarddeltam_ = 0;
  rightdeltam_ = 0;
  downdeltam_ = 0;
  forwarddeltasigmam_ = 0;
  rightdeltasigmam_ = 0;
  downdeltasigmam_ = 0;
  rollsigmar_ = 0;
  pitchsigmar_ = 0;
  yawsigmar_ = 0;
  forwardsigmam_ = 0;
  rightsigmam_ = 0;
  downsigmam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelFusedState::~RelFusedState() {
  // @@protoc_insertion_point(destructor:nav.RelFusedState)
  SharedDtor();
}

void RelFusedState::SharedDtor() {
  if (ownid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ownid_;
  }
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetid_;
  }
  if (this != default_instance_) {
  }
}

void RelFusedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelFusedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelFusedState_descriptor_;
}

const RelFusedState& RelFusedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nav_2eproto();
  return *default_instance_;
}

RelFusedState* RelFusedState::default_instance_ = NULL;

RelFusedState* RelFusedState::New() const {
  return new RelFusedState;
}

void RelFusedState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RelFusedState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(times_, rightm_);
    if (has_ownid()) {
      if (ownid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ownid_->clear();
      }
    }
    if (has_targetid()) {
      if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(downm_, rollsigmar_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(pitchsigmar_, downsigmam_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelFusedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nav.RelFusedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ownID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ownid().data(), this->ownid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ownid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetID;
        break;
      }

      // required string targetID = 2;
      case 2: {
        if (tag == 18) {
         parse_targetID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetid().data(), this->targetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_timeS;
        break;
      }

      // required double timeS = 3;
      case 3: {
        if (tag == 25) {
         parse_timeS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rollR;
        break;
      }

      // required double rollR = 4;
      case 4: {
        if (tag == 33) {
         parse_rollR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollr_)));
          set_has_rollr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_pitchR;
        break;
      }

      // required double pitchR = 5;
      case 5: {
        if (tag == 41) {
         parse_pitchR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchr_)));
          set_has_pitchr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_yawR;
        break;
      }

      // required double yawR = 6;
      case 6: {
        if (tag == 49) {
         parse_yawR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawr_)));
          set_has_yawr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_forwardM;
        break;
      }

      // required double forwardM = 7;
      case 7: {
        if (tag == 57) {
         parse_forwardM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardm_)));
          set_has_forwardm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_rightM;
        break;
      }

      // required double rightM = 8;
      case 8: {
        if (tag == 65) {
         parse_rightM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightm_)));
          set_has_rightm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_downM;
        break;
      }

      // required double downM = 9;
      case 9: {
        if (tag == 73) {
         parse_downM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downm_)));
          set_has_downm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_forwardDeltaM;
        break;
      }

      // required double forwardDeltaM = 10;
      case 10: {
        if (tag == 81) {
         parse_forwardDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwarddeltam_)));
          set_has_forwarddeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_rightDeltaM;
        break;
      }

      // required double rightDeltaM = 11;
      case 11: {
        if (tag == 89) {
         parse_rightDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightdeltam_)));
          set_has_rightdeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_downDeltaM;
        break;
      }

      // required double downDeltaM = 12;
      case 12: {
        if (tag == 97) {
         parse_downDeltaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downdeltam_)));
          set_has_downdeltam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_forwardDeltaSigmaM;
        break;
      }

      // optional double forwardDeltaSigmaM = 13 [default = 0];
      case 13: {
        if (tag == 105) {
         parse_forwardDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwarddeltasigmam_)));
          set_has_forwarddeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_rightDeltaSigmaM;
        break;
      }

      // optional double rightDeltaSigmaM = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_rightDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightdeltasigmam_)));
          set_has_rightdeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_downDeltaSigmaM;
        break;
      }

      // optional double downDeltaSigmaM = 15 [default = 0];
      case 15: {
        if (tag == 121) {
         parse_downDeltaSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downdeltasigmam_)));
          set_has_downdeltasigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_rollSigmaR;
        break;
      }

      // optional double rollSigmaR = 16 [default = 0];
      case 16: {
        if (tag == 129) {
         parse_rollSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollsigmar_)));
          set_has_rollsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_pitchSigmaR;
        break;
      }

      // optional double pitchSigmaR = 17 [default = 0];
      case 17: {
        if (tag == 137) {
         parse_pitchSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitchsigmar_)));
          set_has_pitchsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_yawSigmaR;
        break;
      }

      // optional double yawSigmaR = 18 [default = 0];
      case 18: {
        if (tag == 145) {
         parse_yawSigmaR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawsigmar_)));
          set_has_yawsigmar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_forwardSigmaM;
        break;
      }

      // optional double forwardSigmaM = 19 [default = 0];
      case 19: {
        if (tag == 153) {
         parse_forwardSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forwardsigmam_)));
          set_has_forwardsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_rightSigmaM;
        break;
      }

      // optional double rightSigmaM = 20 [default = 0];
      case 20: {
        if (tag == 161) {
         parse_rightSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightsigmam_)));
          set_has_rightsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_downSigmaM;
        break;
      }

      // optional double downSigmaM = 21 [default = 0];
      case 21: {
        if (tag == 169) {
         parse_downSigmaM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downsigmam_)));
          set_has_downsigmam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nav.RelFusedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nav.RelFusedState)
  return false;
#undef DO_
}

void RelFusedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nav.RelFusedState)
  // required string ownID = 1;
  if (has_ownid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ownid().data(), this->ownid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ownid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ownid(), output);
  }

  // required string targetID = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetid().data(), this->targetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->targetid(), output);
  }

  // required double timeS = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->times(), output);
  }

  // required double rollR = 4;
  if (has_rollr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rollr(), output);
  }

  // required double pitchR = 5;
  if (has_pitchr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pitchr(), output);
  }

  // required double yawR = 6;
  if (has_yawr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->yawr(), output);
  }

  // required double forwardM = 7;
  if (has_forwardm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->forwardm(), output);
  }

  // required double rightM = 8;
  if (has_rightm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rightm(), output);
  }

  // required double downM = 9;
  if (has_downm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->downm(), output);
  }

  // required double forwardDeltaM = 10;
  if (has_forwarddeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->forwarddeltam(), output);
  }

  // required double rightDeltaM = 11;
  if (has_rightdeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->rightdeltam(), output);
  }

  // required double downDeltaM = 12;
  if (has_downdeltam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->downdeltam(), output);
  }

  // optional double forwardDeltaSigmaM = 13 [default = 0];
  if (has_forwarddeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->forwarddeltasigmam(), output);
  }

  // optional double rightDeltaSigmaM = 14 [default = 0];
  if (has_rightdeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->rightdeltasigmam(), output);
  }

  // optional double downDeltaSigmaM = 15 [default = 0];
  if (has_downdeltasigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->downdeltasigmam(), output);
  }

  // optional double rollSigmaR = 16 [default = 0];
  if (has_rollsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->rollsigmar(), output);
  }

  // optional double pitchSigmaR = 17 [default = 0];
  if (has_pitchsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->pitchsigmar(), output);
  }

  // optional double yawSigmaR = 18 [default = 0];
  if (has_yawsigmar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->yawsigmar(), output);
  }

  // optional double forwardSigmaM = 19 [default = 0];
  if (has_forwardsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->forwardsigmam(), output);
  }

  // optional double rightSigmaM = 20 [default = 0];
  if (has_rightsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->rightsigmam(), output);
  }

  // optional double downSigmaM = 21 [default = 0];
  if (has_downsigmam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->downsigmam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nav.RelFusedState)
}

::google::protobuf::uint8* RelFusedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav.RelFusedState)
  // required string ownID = 1;
  if (has_ownid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ownid().data(), this->ownid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ownid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ownid(), target);
  }

  // required string targetID = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetid().data(), this->targetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetid(), target);
  }

  // required double timeS = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->times(), target);
  }

  // required double rollR = 4;
  if (has_rollr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rollr(), target);
  }

  // required double pitchR = 5;
  if (has_pitchr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pitchr(), target);
  }

  // required double yawR = 6;
  if (has_yawr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->yawr(), target);
  }

  // required double forwardM = 7;
  if (has_forwardm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->forwardm(), target);
  }

  // required double rightM = 8;
  if (has_rightm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rightm(), target);
  }

  // required double downM = 9;
  if (has_downm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->downm(), target);
  }

  // required double forwardDeltaM = 10;
  if (has_forwarddeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->forwarddeltam(), target);
  }

  // required double rightDeltaM = 11;
  if (has_rightdeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->rightdeltam(), target);
  }

  // required double downDeltaM = 12;
  if (has_downdeltam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->downdeltam(), target);
  }

  // optional double forwardDeltaSigmaM = 13 [default = 0];
  if (has_forwarddeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->forwarddeltasigmam(), target);
  }

  // optional double rightDeltaSigmaM = 14 [default = 0];
  if (has_rightdeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->rightdeltasigmam(), target);
  }

  // optional double downDeltaSigmaM = 15 [default = 0];
  if (has_downdeltasigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->downdeltasigmam(), target);
  }

  // optional double rollSigmaR = 16 [default = 0];
  if (has_rollsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->rollsigmar(), target);
  }

  // optional double pitchSigmaR = 17 [default = 0];
  if (has_pitchsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->pitchsigmar(), target);
  }

  // optional double yawSigmaR = 18 [default = 0];
  if (has_yawsigmar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->yawsigmar(), target);
  }

  // optional double forwardSigmaM = 19 [default = 0];
  if (has_forwardsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->forwardsigmam(), target);
  }

  // optional double rightSigmaM = 20 [default = 0];
  if (has_rightsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->rightsigmam(), target);
  }

  // optional double downSigmaM = 21 [default = 0];
  if (has_downsigmam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->downsigmam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav.RelFusedState)
  return target;
}

int RelFusedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ownID = 1;
    if (has_ownid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownid());
    }

    // required string targetID = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetid());
    }

    // required double timeS = 3;
    if (has_times()) {
      total_size += 1 + 8;
    }

    // required double rollR = 4;
    if (has_rollr()) {
      total_size += 1 + 8;
    }

    // required double pitchR = 5;
    if (has_pitchr()) {
      total_size += 1 + 8;
    }

    // required double yawR = 6;
    if (has_yawr()) {
      total_size += 1 + 8;
    }

    // required double forwardM = 7;
    if (has_forwardm()) {
      total_size += 1 + 8;
    }

    // required double rightM = 8;
    if (has_rightm()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double downM = 9;
    if (has_downm()) {
      total_size += 1 + 8;
    }

    // required double forwardDeltaM = 10;
    if (has_forwarddeltam()) {
      total_size += 1 + 8;
    }

    // required double rightDeltaM = 11;
    if (has_rightdeltam()) {
      total_size += 1 + 8;
    }

    // required double downDeltaM = 12;
    if (has_downdeltam()) {
      total_size += 1 + 8;
    }

    // optional double forwardDeltaSigmaM = 13 [default = 0];
    if (has_forwarddeltasigmam()) {
      total_size += 1 + 8;
    }

    // optional double rightDeltaSigmaM = 14 [default = 0];
    if (has_rightdeltasigmam()) {
      total_size += 1 + 8;
    }

    // optional double downDeltaSigmaM = 15 [default = 0];
    if (has_downdeltasigmam()) {
      total_size += 1 + 8;
    }

    // optional double rollSigmaR = 16 [default = 0];
    if (has_rollsigmar()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double pitchSigmaR = 17 [default = 0];
    if (has_pitchsigmar()) {
      total_size += 2 + 8;
    }

    // optional double yawSigmaR = 18 [default = 0];
    if (has_yawsigmar()) {
      total_size += 2 + 8;
    }

    // optional double forwardSigmaM = 19 [default = 0];
    if (has_forwardsigmam()) {
      total_size += 2 + 8;
    }

    // optional double rightSigmaM = 20 [default = 0];
    if (has_rightsigmam()) {
      total_size += 2 + 8;
    }

    // optional double downSigmaM = 21 [default = 0];
    if (has_downsigmam()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelFusedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelFusedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelFusedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelFusedState::MergeFrom(const RelFusedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownid()) {
      set_ownid(from.ownid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_rollr()) {
      set_rollr(from.rollr());
    }
    if (from.has_pitchr()) {
      set_pitchr(from.pitchr());
    }
    if (from.has_yawr()) {
      set_yawr(from.yawr());
    }
    if (from.has_forwardm()) {
      set_forwardm(from.forwardm());
    }
    if (from.has_rightm()) {
      set_rightm(from.rightm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_downm()) {
      set_downm(from.downm());
    }
    if (from.has_forwarddeltam()) {
      set_forwarddeltam(from.forwarddeltam());
    }
    if (from.has_rightdeltam()) {
      set_rightdeltam(from.rightdeltam());
    }
    if (from.has_downdeltam()) {
      set_downdeltam(from.downdeltam());
    }
    if (from.has_forwarddeltasigmam()) {
      set_forwarddeltasigmam(from.forwarddeltasigmam());
    }
    if (from.has_rightdeltasigmam()) {
      set_rightdeltasigmam(from.rightdeltasigmam());
    }
    if (from.has_downdeltasigmam()) {
      set_downdeltasigmam(from.downdeltasigmam());
    }
    if (from.has_rollsigmar()) {
      set_rollsigmar(from.rollsigmar());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pitchsigmar()) {
      set_pitchsigmar(from.pitchsigmar());
    }
    if (from.has_yawsigmar()) {
      set_yawsigmar(from.yawsigmar());
    }
    if (from.has_forwardsigmam()) {
      set_forwardsigmam(from.forwardsigmam());
    }
    if (from.has_rightsigmam()) {
      set_rightsigmam(from.rightsigmam());
    }
    if (from.has_downsigmam()) {
      set_downsigmam(from.downsigmam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelFusedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelFusedState::CopyFrom(const RelFusedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelFusedState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void RelFusedState::Swap(RelFusedState* other) {
  if (other != this) {
    std::swap(ownid_, other->ownid_);
    std::swap(targetid_, other->targetid_);
    std::swap(times_, other->times_);
    std::swap(rollr_, other->rollr_);
    std::swap(pitchr_, other->pitchr_);
    std::swap(yawr_, other->yawr_);
    std::swap(forwardm_, other->forwardm_);
    std::swap(rightm_, other->rightm_);
    std::swap(downm_, other->downm_);
    std::swap(forwarddeltam_, other->forwarddeltam_);
    std::swap(rightdeltam_, other->rightdeltam_);
    std::swap(downdeltam_, other->downdeltam_);
    std::swap(forwarddeltasigmam_, other->forwarddeltasigmam_);
    std::swap(rightdeltasigmam_, other->rightdeltasigmam_);
    std::swap(downdeltasigmam_, other->downdeltasigmam_);
    std::swap(rollsigmar_, other->rollsigmar_);
    std::swap(pitchsigmar_, other->pitchsigmar_);
    std::swap(yawsigmar_, other->yawsigmar_);
    std::swap(forwardsigmam_, other->forwardsigmam_);
    std::swap(rightsigmam_, other->rightsigmam_);
    std::swap(downsigmam_, other->downsigmam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelFusedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelFusedState_descriptor_;
  metadata.reflection = RelFusedState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav

// @@protoc_insertion_point(global_scope)
