// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav.proto

#ifndef PROTOBUF_nav_2eproto__INCLUDED
#define PROTOBUF_nav_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nav {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nav_2eproto();
void protobuf_AssignDesc_nav_2eproto();
void protobuf_ShutdownFile_nav_2eproto();

class LabViewIn;
class LabViewOut;
class Mission;
class Waystates;
class Ctrl;
class Img;
class RPY;
class LatLon;
class Alt;
class BodyRPYDelta;
class BodyFRDDelta;
class BodyFRDRateDelta;
class RelRPY;
class RelFRD;
class FusedState;
class RelFusedState;

enum Behavior {
  LOITER = 0,
  APPROACH = 1,
  CAPTURE = 2,
  RELEASE = 3,
  DEPART = 4
};
bool Behavior_IsValid(int value);
const Behavior Behavior_MIN = LOITER;
const Behavior Behavior_MAX = DEPART;
const int Behavior_ARRAYSIZE = Behavior_MAX + 1;

const ::google::protobuf::EnumDescriptor* Behavior_descriptor();
inline const ::std::string& Behavior_Name(Behavior value) {
  return ::google::protobuf::internal::NameOfEnum(
    Behavior_descriptor(), value);
}
inline bool Behavior_Parse(
    const ::std::string& name, Behavior* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Behavior>(
    Behavior_descriptor(), name, value);
}
// ===================================================================

class LabViewIn : public ::google::protobuf::Message {
 public:
  LabViewIn();
  virtual ~LabViewIn();

  LabViewIn(const LabViewIn& from);

  inline LabViewIn& operator=(const LabViewIn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabViewIn& default_instance();

  void Swap(LabViewIn* other);

  // implements Message ----------------------------------------------

  LabViewIn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabViewIn& from);
  void MergeFrom(const LabViewIn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nav.LabViewIn)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static LabViewIn* default_instance_;
};
// -------------------------------------------------------------------

class LabViewOut : public ::google::protobuf::Message {
 public:
  LabViewOut();
  virtual ~LabViewOut();

  LabViewOut(const LabViewOut& from);

  inline LabViewOut& operator=(const LabViewOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabViewOut& default_instance();

  void Swap(LabViewOut* other);

  // implements Message ----------------------------------------------

  LabViewOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabViewOut& from);
  void MergeFrom(const LabViewOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nav.LabViewOut)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static LabViewOut* default_instance_;
};
// -------------------------------------------------------------------

class Mission : public ::google::protobuf::Message {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  void Swap(Mission* other);

  // implements Message ----------------------------------------------

  Mission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .nav.Behavior behavior = 1;
  inline bool has_behavior() const;
  inline void clear_behavior();
  static const int kBehaviorFieldNumber = 1;
  inline ::nav::Behavior behavior() const;
  inline void set_behavior(::nav::Behavior value);

  // @@protoc_insertion_point(class_scope:nav.Mission)
 private:
  inline void set_has_behavior();
  inline void clear_has_behavior();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int behavior_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static Mission* default_instance_;
};
// -------------------------------------------------------------------

class Waystates : public ::google::protobuf::Message {
 public:
  Waystates();
  virtual ~Waystates();

  Waystates(const Waystates& from);

  inline Waystates& operator=(const Waystates& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Waystates& default_instance();

  void Swap(Waystates* other);

  // implements Message ----------------------------------------------

  Waystates* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waystates& from);
  void MergeFrom(const Waystates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double timeS = 1;
  inline int times_size() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times(int index) const;
  inline void set_times(int index, double value);
  inline void add_times(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      times() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_times();

  // repeated double rollR = 2;
  inline int rollr_size() const;
  inline void clear_rollr();
  static const int kRollRFieldNumber = 2;
  inline double rollr(int index) const;
  inline void set_rollr(int index, double value);
  inline void add_rollr(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      rollr() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_rollr();

  // repeated double pitchR = 3;
  inline int pitchr_size() const;
  inline void clear_pitchr();
  static const int kPitchRFieldNumber = 3;
  inline double pitchr(int index) const;
  inline void set_pitchr(int index, double value);
  inline void add_pitchr(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      pitchr() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_pitchr();

  // repeated double yawR = 4;
  inline int yawr_size() const;
  inline void clear_yawr();
  static const int kYawRFieldNumber = 4;
  inline double yawr(int index) const;
  inline void set_yawr(int index, double value);
  inline void add_yawr(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      yawr() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_yawr();

  // repeated double latR = 5;
  inline int latr_size() const;
  inline void clear_latr();
  static const int kLatRFieldNumber = 5;
  inline double latr(int index) const;
  inline void set_latr(int index, double value);
  inline void add_latr(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      latr() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_latr();

  // repeated double lonR = 6;
  inline int lonr_size() const;
  inline void clear_lonr();
  static const int kLonRFieldNumber = 6;
  inline double lonr(int index) const;
  inline void set_lonr(int index, double value);
  inline void add_lonr(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      lonr() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_lonr();

  // repeated double altM = 7;
  inline int altm_size() const;
  inline void clear_altm();
  static const int kAltMFieldNumber = 7;
  inline double altm(int index) const;
  inline void set_altm(int index, double value);
  inline void add_altm(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      altm() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_altm();

  // repeated double rollRateRPS = 8;
  inline int rollraterps_size() const;
  inline void clear_rollraterps();
  static const int kRollRateRPSFieldNumber = 8;
  inline double rollraterps(int index) const;
  inline void set_rollraterps(int index, double value);
  inline void add_rollraterps(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      rollraterps() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_rollraterps();

  // repeated double pitchRateRPS = 9;
  inline int pitchraterps_size() const;
  inline void clear_pitchraterps();
  static const int kPitchRateRPSFieldNumber = 9;
  inline double pitchraterps(int index) const;
  inline void set_pitchraterps(int index, double value);
  inline void add_pitchraterps(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      pitchraterps() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_pitchraterps();

  // repeated double yawRateRPS = 10;
  inline int yawraterps_size() const;
  inline void clear_yawraterps();
  static const int kYawRateRPSFieldNumber = 10;
  inline double yawraterps(int index) const;
  inline void set_yawraterps(int index, double value);
  inline void add_yawraterps(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      yawraterps() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_yawraterps();

  // repeated double forwardRateMPS = 11;
  inline int forwardratemps_size() const;
  inline void clear_forwardratemps();
  static const int kForwardRateMPSFieldNumber = 11;
  inline double forwardratemps(int index) const;
  inline void set_forwardratemps(int index, double value);
  inline void add_forwardratemps(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      forwardratemps() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_forwardratemps();

  // repeated double rightRateMPS = 12;
  inline int rightratemps_size() const;
  inline void clear_rightratemps();
  static const int kRightRateMPSFieldNumber = 12;
  inline double rightratemps(int index) const;
  inline void set_rightratemps(int index, double value);
  inline void add_rightratemps(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      rightratemps() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_rightratemps();

  // repeated double downRateMPS = 13;
  inline int downratemps_size() const;
  inline void clear_downratemps();
  static const int kDownRateMPSFieldNumber = 13;
  inline double downratemps(int index) const;
  inline void set_downratemps(int index, double value);
  inline void add_downratemps(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      downratemps() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_downratemps();

  // @@protoc_insertion_point(class_scope:nav.Waystates)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > times_;
  ::google::protobuf::RepeatedField< double > rollr_;
  ::google::protobuf::RepeatedField< double > pitchr_;
  ::google::protobuf::RepeatedField< double > yawr_;
  ::google::protobuf::RepeatedField< double > latr_;
  ::google::protobuf::RepeatedField< double > lonr_;
  ::google::protobuf::RepeatedField< double > altm_;
  ::google::protobuf::RepeatedField< double > rollraterps_;
  ::google::protobuf::RepeatedField< double > pitchraterps_;
  ::google::protobuf::RepeatedField< double > yawraterps_;
  ::google::protobuf::RepeatedField< double > forwardratemps_;
  ::google::protobuf::RepeatedField< double > rightratemps_;
  ::google::protobuf::RepeatedField< double > downratemps_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static Waystates* default_instance_;
};
// -------------------------------------------------------------------

class Ctrl : public ::google::protobuf::Message {
 public:
  Ctrl();
  virtual ~Ctrl();

  Ctrl(const Ctrl& from);

  inline Ctrl& operator=(const Ctrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ctrl& default_instance();

  void Swap(Ctrl* other);

  // implements Message ----------------------------------------------

  Ctrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ctrl& from);
  void MergeFrom(const Ctrl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double uReal = 1;
  inline int ureal_size() const;
  inline void clear_ureal();
  static const int kURealFieldNumber = 1;
  inline double ureal(int index) const;
  inline void set_ureal(int index, double value);
  inline void add_ureal(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      ureal() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_ureal();

  // repeated int32 uInt = 2;
  inline int uint_size() const;
  inline void clear_uint();
  static const int kUIntFieldNumber = 2;
  inline ::google::protobuf::int32 uint(int index) const;
  inline void set_uint(int index, ::google::protobuf::int32 value);
  inline void add_uint(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      uint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_uint();

  // @@protoc_insertion_point(class_scope:nav.Ctrl)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > ureal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > uint_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static Ctrl* default_instance_;
};
// -------------------------------------------------------------------

class Img : public ::google::protobuf::Message {
 public:
  Img();
  virtual ~Img();

  Img(const Img& from);

  inline Img& operator=(const Img& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Img& default_instance();

  void Swap(Img* other);

  // implements Message ----------------------------------------------

  Img* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Img& from);
  void MergeFrom(const Img& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double fovR = 2;
  inline bool has_fovr() const;
  inline void clear_fovr();
  static const int kFovRFieldNumber = 2;
  inline double fovr() const;
  inline void set_fovr(double value);

  // required uint32 steps = 3;
  inline bool has_steps() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 3;
  inline ::google::protobuf::uint32 steps() const;
  inline void set_steps(::google::protobuf::uint32 value);

  // required uint32 strides = 4;
  inline bool has_strides() const;
  inline void clear_strides();
  static const int kStridesFieldNumber = 4;
  inline ::google::protobuf::uint32 strides() const;
  inline void set_strides(::google::protobuf::uint32 value);

  // required uint32 layers = 5;
  inline bool has_layers() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 5;
  inline ::google::protobuf::uint32 layers() const;
  inline void set_layers(::google::protobuf::uint32 value);

  // required bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nav.Img)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_fovr();
  inline void clear_has_fovr();
  inline void set_has_steps();
  inline void clear_has_steps();
  inline void set_has_strides();
  inline void clear_has_strides();
  inline void set_has_layers();
  inline void clear_has_layers();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double fovr_;
  ::google::protobuf::uint32 steps_;
  ::google::protobuf::uint32 strides_;
  ::std::string* data_;
  ::google::protobuf::uint32 layers_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static Img* default_instance_;
};
// -------------------------------------------------------------------

class RPY : public ::google::protobuf::Message {
 public:
  RPY();
  virtual ~RPY();

  RPY(const RPY& from);

  inline RPY& operator=(const RPY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RPY& default_instance();

  void Swap(RPY* other);

  // implements Message ----------------------------------------------

  RPY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPY& from);
  void MergeFrom(const RPY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double rollR = 2;
  inline bool has_rollr() const;
  inline void clear_rollr();
  static const int kRollRFieldNumber = 2;
  inline double rollr() const;
  inline void set_rollr(double value);

  // required double pitchR = 3;
  inline bool has_pitchr() const;
  inline void clear_pitchr();
  static const int kPitchRFieldNumber = 3;
  inline double pitchr() const;
  inline void set_pitchr(double value);

  // required double yawR = 4;
  inline bool has_yawr() const;
  inline void clear_yawr();
  static const int kYawRFieldNumber = 4;
  inline double yawr() const;
  inline void set_yawr(double value);

  // optional double rollSigmaR = 5 [default = 0];
  inline bool has_rollsigmar() const;
  inline void clear_rollsigmar();
  static const int kRollSigmaRFieldNumber = 5;
  inline double rollsigmar() const;
  inline void set_rollsigmar(double value);

  // optional double pitchSigmaR = 6 [default = 0];
  inline bool has_pitchsigmar() const;
  inline void clear_pitchsigmar();
  static const int kPitchSigmaRFieldNumber = 6;
  inline double pitchsigmar() const;
  inline void set_pitchsigmar(double value);

  // optional double yawSigmaR = 7 [default = 0];
  inline bool has_yawsigmar() const;
  inline void clear_yawsigmar();
  static const int kYawSigmaRFieldNumber = 7;
  inline double yawsigmar() const;
  inline void set_yawsigmar(double value);

  // @@protoc_insertion_point(class_scope:nav.RPY)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_rollr();
  inline void clear_has_rollr();
  inline void set_has_pitchr();
  inline void clear_has_pitchr();
  inline void set_has_yawr();
  inline void clear_has_yawr();
  inline void set_has_rollsigmar();
  inline void clear_has_rollsigmar();
  inline void set_has_pitchsigmar();
  inline void clear_has_pitchsigmar();
  inline void set_has_yawsigmar();
  inline void clear_has_yawsigmar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double rollr_;
  double pitchr_;
  double yawr_;
  double rollsigmar_;
  double pitchsigmar_;
  double yawsigmar_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static RPY* default_instance_;
};
// -------------------------------------------------------------------

class LatLon : public ::google::protobuf::Message {
 public:
  LatLon();
  virtual ~LatLon();

  LatLon(const LatLon& from);

  inline LatLon& operator=(const LatLon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatLon& default_instance();

  void Swap(LatLon* other);

  // implements Message ----------------------------------------------

  LatLon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LatLon& from);
  void MergeFrom(const LatLon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double latR = 2;
  inline bool has_latr() const;
  inline void clear_latr();
  static const int kLatRFieldNumber = 2;
  inline double latr() const;
  inline void set_latr(double value);

  // required double lonR = 3;
  inline bool has_lonr() const;
  inline void clear_lonr();
  static const int kLonRFieldNumber = 3;
  inline double lonr() const;
  inline void set_lonr(double value);

  // optional double latSigmaR = 4 [default = 0];
  inline bool has_latsigmar() const;
  inline void clear_latsigmar();
  static const int kLatSigmaRFieldNumber = 4;
  inline double latsigmar() const;
  inline void set_latsigmar(double value);

  // optional double lonSigmaR = 5 [default = 0];
  inline bool has_lonsigmar() const;
  inline void clear_lonsigmar();
  static const int kLonSigmaRFieldNumber = 5;
  inline double lonsigmar() const;
  inline void set_lonsigmar(double value);

  // @@protoc_insertion_point(class_scope:nav.LatLon)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_latr();
  inline void clear_has_latr();
  inline void set_has_lonr();
  inline void clear_has_lonr();
  inline void set_has_latsigmar();
  inline void clear_has_latsigmar();
  inline void set_has_lonsigmar();
  inline void clear_has_lonsigmar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double latr_;
  double lonr_;
  double latsigmar_;
  double lonsigmar_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static LatLon* default_instance_;
};
// -------------------------------------------------------------------

class Alt : public ::google::protobuf::Message {
 public:
  Alt();
  virtual ~Alt();

  Alt(const Alt& from);

  inline Alt& operator=(const Alt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Alt& default_instance();

  void Swap(Alt* other);

  // implements Message ----------------------------------------------

  Alt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Alt& from);
  void MergeFrom(const Alt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double altM = 2;
  inline bool has_altm() const;
  inline void clear_altm();
  static const int kAltMFieldNumber = 2;
  inline double altm() const;
  inline void set_altm(double value);

  // optional double altSigmaM = 3 [default = 0];
  inline bool has_altsigmam() const;
  inline void clear_altsigmam();
  static const int kAltSigmaMFieldNumber = 3;
  inline double altsigmam() const;
  inline void set_altsigmam(double value);

  // @@protoc_insertion_point(class_scope:nav.Alt)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_altm();
  inline void clear_has_altm();
  inline void set_has_altsigmam();
  inline void clear_has_altsigmam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double altm_;
  double altsigmam_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static Alt* default_instance_;
};
// -------------------------------------------------------------------

class BodyRPYDelta : public ::google::protobuf::Message {
 public:
  BodyRPYDelta();
  virtual ~BodyRPYDelta();

  BodyRPYDelta(const BodyRPYDelta& from);

  inline BodyRPYDelta& operator=(const BodyRPYDelta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyRPYDelta& default_instance();

  void Swap(BodyRPYDelta* other);

  // implements Message ----------------------------------------------

  BodyRPYDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyRPYDelta& from);
  void MergeFrom(const BodyRPYDelta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double timeDeltaS = 2;
  inline bool has_timedeltas() const;
  inline void clear_timedeltas();
  static const int kTimeDeltaSFieldNumber = 2;
  inline double timedeltas() const;
  inline void set_timedeltas(double value);

  // required double rollDeltaR = 3;
  inline bool has_rolldeltar() const;
  inline void clear_rolldeltar();
  static const int kRollDeltaRFieldNumber = 3;
  inline double rolldeltar() const;
  inline void set_rolldeltar(double value);

  // required double pitchDeltaR = 4;
  inline bool has_pitchdeltar() const;
  inline void clear_pitchdeltar();
  static const int kPitchDeltaRFieldNumber = 4;
  inline double pitchdeltar() const;
  inline void set_pitchdeltar(double value);

  // required double yawDeltaR = 5;
  inline bool has_yawdeltar() const;
  inline void clear_yawdeltar();
  static const int kYawDeltaRFieldNumber = 5;
  inline double yawdeltar() const;
  inline void set_yawdeltar(double value);

  // optional double rollDeltaSigmaRPS = 6 [default = 0];
  inline bool has_rolldeltasigmarps() const;
  inline void clear_rolldeltasigmarps();
  static const int kRollDeltaSigmaRPSFieldNumber = 6;
  inline double rolldeltasigmarps() const;
  inline void set_rolldeltasigmarps(double value);

  // optional double pitchDeltaSigmaRPS = 7 [default = 0];
  inline bool has_pitchdeltasigmarps() const;
  inline void clear_pitchdeltasigmarps();
  static const int kPitchDeltaSigmaRPSFieldNumber = 7;
  inline double pitchdeltasigmarps() const;
  inline void set_pitchdeltasigmarps(double value);

  // optional double yawDeltaSigmaRPS = 8 [default = 0];
  inline bool has_yawdeltasigmarps() const;
  inline void clear_yawdeltasigmarps();
  static const int kYawDeltaSigmaRPSFieldNumber = 8;
  inline double yawdeltasigmarps() const;
  inline void set_yawdeltasigmarps(double value);

  // @@protoc_insertion_point(class_scope:nav.BodyRPYDelta)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_timedeltas();
  inline void clear_has_timedeltas();
  inline void set_has_rolldeltar();
  inline void clear_has_rolldeltar();
  inline void set_has_pitchdeltar();
  inline void clear_has_pitchdeltar();
  inline void set_has_yawdeltar();
  inline void clear_has_yawdeltar();
  inline void set_has_rolldeltasigmarps();
  inline void clear_has_rolldeltasigmarps();
  inline void set_has_pitchdeltasigmarps();
  inline void clear_has_pitchdeltasigmarps();
  inline void set_has_yawdeltasigmarps();
  inline void clear_has_yawdeltasigmarps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double timedeltas_;
  double rolldeltar_;
  double pitchdeltar_;
  double yawdeltar_;
  double rolldeltasigmarps_;
  double pitchdeltasigmarps_;
  double yawdeltasigmarps_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static BodyRPYDelta* default_instance_;
};
// -------------------------------------------------------------------

class BodyFRDDelta : public ::google::protobuf::Message {
 public:
  BodyFRDDelta();
  virtual ~BodyFRDDelta();

  BodyFRDDelta(const BodyFRDDelta& from);

  inline BodyFRDDelta& operator=(const BodyFRDDelta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyFRDDelta& default_instance();

  void Swap(BodyFRDDelta* other);

  // implements Message ----------------------------------------------

  BodyFRDDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyFRDDelta& from);
  void MergeFrom(const BodyFRDDelta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double timeDeltaS = 2;
  inline bool has_timedeltas() const;
  inline void clear_timedeltas();
  static const int kTimeDeltaSFieldNumber = 2;
  inline double timedeltas() const;
  inline void set_timedeltas(double value);

  // required double forwardDeltaM = 3;
  inline bool has_forwarddeltam() const;
  inline void clear_forwarddeltam();
  static const int kForwardDeltaMFieldNumber = 3;
  inline double forwarddeltam() const;
  inline void set_forwarddeltam(double value);

  // required double rightDeltaM = 4;
  inline bool has_rightdeltam() const;
  inline void clear_rightdeltam();
  static const int kRightDeltaMFieldNumber = 4;
  inline double rightdeltam() const;
  inline void set_rightdeltam(double value);

  // required double downDeltaM = 5;
  inline bool has_downdeltam() const;
  inline void clear_downdeltam();
  static const int kDownDeltaMFieldNumber = 5;
  inline double downdeltam() const;
  inline void set_downdeltam(double value);

  // optional double forwardDeltaSigmaM = 6 [default = 0];
  inline bool has_forwarddeltasigmam() const;
  inline void clear_forwarddeltasigmam();
  static const int kForwardDeltaSigmaMFieldNumber = 6;
  inline double forwarddeltasigmam() const;
  inline void set_forwarddeltasigmam(double value);

  // optional double rightDeltaSigmaM = 7 [default = 0];
  inline bool has_rightdeltasigmam() const;
  inline void clear_rightdeltasigmam();
  static const int kRightDeltaSigmaMFieldNumber = 7;
  inline double rightdeltasigmam() const;
  inline void set_rightdeltasigmam(double value);

  // optional double downDeltaSigmaM = 8 [default = 0];
  inline bool has_downdeltasigmam() const;
  inline void clear_downdeltasigmam();
  static const int kDownDeltaSigmaMFieldNumber = 8;
  inline double downdeltasigmam() const;
  inline void set_downdeltasigmam(double value);

  // @@protoc_insertion_point(class_scope:nav.BodyFRDDelta)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_timedeltas();
  inline void clear_has_timedeltas();
  inline void set_has_forwarddeltam();
  inline void clear_has_forwarddeltam();
  inline void set_has_rightdeltam();
  inline void clear_has_rightdeltam();
  inline void set_has_downdeltam();
  inline void clear_has_downdeltam();
  inline void set_has_forwarddeltasigmam();
  inline void clear_has_forwarddeltasigmam();
  inline void set_has_rightdeltasigmam();
  inline void clear_has_rightdeltasigmam();
  inline void set_has_downdeltasigmam();
  inline void clear_has_downdeltasigmam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double timedeltas_;
  double forwarddeltam_;
  double rightdeltam_;
  double downdeltam_;
  double forwarddeltasigmam_;
  double rightdeltasigmam_;
  double downdeltasigmam_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static BodyFRDDelta* default_instance_;
};
// -------------------------------------------------------------------

class BodyFRDRateDelta : public ::google::protobuf::Message {
 public:
  BodyFRDRateDelta();
  virtual ~BodyFRDRateDelta();

  BodyFRDRateDelta(const BodyFRDRateDelta& from);

  inline BodyFRDRateDelta& operator=(const BodyFRDRateDelta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyFRDRateDelta& default_instance();

  void Swap(BodyFRDRateDelta* other);

  // implements Message ----------------------------------------------

  BodyFRDRateDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BodyFRDRateDelta& from);
  void MergeFrom(const BodyFRDRateDelta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double timeDeltaS = 2;
  inline bool has_timedeltas() const;
  inline void clear_timedeltas();
  static const int kTimeDeltaSFieldNumber = 2;
  inline double timedeltas() const;
  inline void set_timedeltas(double value);

  // required double forwardRateDeltaMPS = 3;
  inline bool has_forwardratedeltamps() const;
  inline void clear_forwardratedeltamps();
  static const int kForwardRateDeltaMPSFieldNumber = 3;
  inline double forwardratedeltamps() const;
  inline void set_forwardratedeltamps(double value);

  // required double rightRateDeltaMPS = 4;
  inline bool has_rightratedeltamps() const;
  inline void clear_rightratedeltamps();
  static const int kRightRateDeltaMPSFieldNumber = 4;
  inline double rightratedeltamps() const;
  inline void set_rightratedeltamps(double value);

  // required double downRateDeltaMPS = 5;
  inline bool has_downratedeltamps() const;
  inline void clear_downratedeltamps();
  static const int kDownRateDeltaMPSFieldNumber = 5;
  inline double downratedeltamps() const;
  inline void set_downratedeltamps(double value);

  // optional double forwardRateDeltaSigmaMPS = 6 [default = 0];
  inline bool has_forwardratedeltasigmamps() const;
  inline void clear_forwardratedeltasigmamps();
  static const int kForwardRateDeltaSigmaMPSFieldNumber = 6;
  inline double forwardratedeltasigmamps() const;
  inline void set_forwardratedeltasigmamps(double value);

  // optional double rightRateDeltaSigmaMPS = 7 [default = 0];
  inline bool has_rightratedeltasigmamps() const;
  inline void clear_rightratedeltasigmamps();
  static const int kRightRateDeltaSigmaMPSFieldNumber = 7;
  inline double rightratedeltasigmamps() const;
  inline void set_rightratedeltasigmamps(double value);

  // optional double downRateDeltaSigmaMPS = 8 [default = 0];
  inline bool has_downratedeltasigmamps() const;
  inline void clear_downratedeltasigmamps();
  static const int kDownRateDeltaSigmaMPSFieldNumber = 8;
  inline double downratedeltasigmamps() const;
  inline void set_downratedeltasigmamps(double value);

  // @@protoc_insertion_point(class_scope:nav.BodyFRDRateDelta)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_timedeltas();
  inline void clear_has_timedeltas();
  inline void set_has_forwardratedeltamps();
  inline void clear_has_forwardratedeltamps();
  inline void set_has_rightratedeltamps();
  inline void clear_has_rightratedeltamps();
  inline void set_has_downratedeltamps();
  inline void clear_has_downratedeltamps();
  inline void set_has_forwardratedeltasigmamps();
  inline void clear_has_forwardratedeltasigmamps();
  inline void set_has_rightratedeltasigmamps();
  inline void clear_has_rightratedeltasigmamps();
  inline void set_has_downratedeltasigmamps();
  inline void clear_has_downratedeltasigmamps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double timedeltas_;
  double forwardratedeltamps_;
  double rightratedeltamps_;
  double downratedeltamps_;
  double forwardratedeltasigmamps_;
  double rightratedeltasigmamps_;
  double downratedeltasigmamps_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static BodyFRDRateDelta* default_instance_;
};
// -------------------------------------------------------------------

class RelRPY : public ::google::protobuf::Message {
 public:
  RelRPY();
  virtual ~RelRPY();

  RelRPY(const RelRPY& from);

  inline RelRPY& operator=(const RelRPY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelRPY& default_instance();

  void Swap(RelRPY* other);

  // implements Message ----------------------------------------------

  RelRPY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelRPY& from);
  void MergeFrom(const RelRPY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string targetID = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 1;
  inline const ::std::string& targetid() const;
  inline void set_targetid(const ::std::string& value);
  inline void set_targetid(const char* value);
  inline void set_targetid(const char* value, size_t size);
  inline ::std::string* mutable_targetid();
  inline ::std::string* release_targetid();
  inline void set_allocated_targetid(::std::string* targetid);

  // required double timeS = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 2;
  inline double times() const;
  inline void set_times(double value);

  // required double rollR = 3;
  inline bool has_rollr() const;
  inline void clear_rollr();
  static const int kRollRFieldNumber = 3;
  inline double rollr() const;
  inline void set_rollr(double value);

  // required double pitchR = 4;
  inline bool has_pitchr() const;
  inline void clear_pitchr();
  static const int kPitchRFieldNumber = 4;
  inline double pitchr() const;
  inline void set_pitchr(double value);

  // required double yawR = 5;
  inline bool has_yawr() const;
  inline void clear_yawr();
  static const int kYawRFieldNumber = 5;
  inline double yawr() const;
  inline void set_yawr(double value);

  // optional double rollSigmaR = 6 [default = 0];
  inline bool has_rollsigmar() const;
  inline void clear_rollsigmar();
  static const int kRollSigmaRFieldNumber = 6;
  inline double rollsigmar() const;
  inline void set_rollsigmar(double value);

  // optional double pitchSigmaR = 7 [default = 0];
  inline bool has_pitchsigmar() const;
  inline void clear_pitchsigmar();
  static const int kPitchSigmaRFieldNumber = 7;
  inline double pitchsigmar() const;
  inline void set_pitchsigmar(double value);

  // optional double yawSigmaR = 8 [default = 0];
  inline bool has_yawsigmar() const;
  inline void clear_yawsigmar();
  static const int kYawSigmaRFieldNumber = 8;
  inline double yawsigmar() const;
  inline void set_yawsigmar(double value);

  // @@protoc_insertion_point(class_scope:nav.RelRPY)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_rollr();
  inline void clear_has_rollr();
  inline void set_has_pitchr();
  inline void clear_has_pitchr();
  inline void set_has_yawr();
  inline void clear_has_yawr();
  inline void set_has_rollsigmar();
  inline void clear_has_rollsigmar();
  inline void set_has_pitchsigmar();
  inline void clear_has_pitchsigmar();
  inline void set_has_yawsigmar();
  inline void clear_has_yawsigmar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* targetid_;
  double times_;
  double rollr_;
  double pitchr_;
  double yawr_;
  double rollsigmar_;
  double pitchsigmar_;
  double yawsigmar_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static RelRPY* default_instance_;
};
// -------------------------------------------------------------------

class RelFRD : public ::google::protobuf::Message {
 public:
  RelFRD();
  virtual ~RelFRD();

  RelFRD(const RelFRD& from);

  inline RelFRD& operator=(const RelFRD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelFRD& default_instance();

  void Swap(RelFRD* other);

  // implements Message ----------------------------------------------

  RelFRD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelFRD& from);
  void MergeFrom(const RelFRD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string targetID = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 1;
  inline const ::std::string& targetid() const;
  inline void set_targetid(const ::std::string& value);
  inline void set_targetid(const char* value);
  inline void set_targetid(const char* value, size_t size);
  inline ::std::string* mutable_targetid();
  inline ::std::string* release_targetid();
  inline void set_allocated_targetid(::std::string* targetid);

  // required double timeS = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 2;
  inline double times() const;
  inline void set_times(double value);

  // required double forwardM = 3;
  inline bool has_forwardm() const;
  inline void clear_forwardm();
  static const int kForwardMFieldNumber = 3;
  inline double forwardm() const;
  inline void set_forwardm(double value);

  // required double rightM = 4;
  inline bool has_rightm() const;
  inline void clear_rightm();
  static const int kRightMFieldNumber = 4;
  inline double rightm() const;
  inline void set_rightm(double value);

  // required double downM = 5;
  inline bool has_downm() const;
  inline void clear_downm();
  static const int kDownMFieldNumber = 5;
  inline double downm() const;
  inline void set_downm(double value);

  // optional double forwardSigmaM = 6 [default = 0];
  inline bool has_forwardsigmam() const;
  inline void clear_forwardsigmam();
  static const int kForwardSigmaMFieldNumber = 6;
  inline double forwardsigmam() const;
  inline void set_forwardsigmam(double value);

  // optional double rightSigmaM = 7 [default = 0];
  inline bool has_rightsigmam() const;
  inline void clear_rightsigmam();
  static const int kRightSigmaMFieldNumber = 7;
  inline double rightsigmam() const;
  inline void set_rightsigmam(double value);

  // optional double downSigmaM = 8 [default = 0];
  inline bool has_downsigmam() const;
  inline void clear_downsigmam();
  static const int kDownSigmaMFieldNumber = 8;
  inline double downsigmam() const;
  inline void set_downsigmam(double value);

  // @@protoc_insertion_point(class_scope:nav.RelFRD)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_forwardm();
  inline void clear_has_forwardm();
  inline void set_has_rightm();
  inline void clear_has_rightm();
  inline void set_has_downm();
  inline void clear_has_downm();
  inline void set_has_forwardsigmam();
  inline void clear_has_forwardsigmam();
  inline void set_has_rightsigmam();
  inline void clear_has_rightsigmam();
  inline void set_has_downsigmam();
  inline void clear_has_downsigmam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* targetid_;
  double times_;
  double forwardm_;
  double rightm_;
  double downm_;
  double forwardsigmam_;
  double rightsigmam_;
  double downsigmam_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static RelFRD* default_instance_;
};
// -------------------------------------------------------------------

class FusedState : public ::google::protobuf::Message {
 public:
  FusedState();
  virtual ~FusedState();

  FusedState(const FusedState& from);

  inline FusedState& operator=(const FusedState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FusedState& default_instance();

  void Swap(FusedState* other);

  // implements Message ----------------------------------------------

  FusedState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FusedState& from);
  void MergeFrom(const FusedState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double timeS = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 1;
  inline double times() const;
  inline void set_times(double value);

  // required double timeDeltaS = 2;
  inline bool has_timedeltas() const;
  inline void clear_timedeltas();
  static const int kTimeDeltaSFieldNumber = 2;
  inline double timedeltas() const;
  inline void set_timedeltas(double value);

  // required double rollR = 3;
  inline bool has_rollr() const;
  inline void clear_rollr();
  static const int kRollRFieldNumber = 3;
  inline double rollr() const;
  inline void set_rollr(double value);

  // required double pitchR = 4;
  inline bool has_pitchr() const;
  inline void clear_pitchr();
  static const int kPitchRFieldNumber = 4;
  inline double pitchr() const;
  inline void set_pitchr(double value);

  // required double yawR = 5;
  inline bool has_yawr() const;
  inline void clear_yawr();
  static const int kYawRFieldNumber = 5;
  inline double yawr() const;
  inline void set_yawr(double value);

  // required double rollDeltaR = 6;
  inline bool has_rolldeltar() const;
  inline void clear_rolldeltar();
  static const int kRollDeltaRFieldNumber = 6;
  inline double rolldeltar() const;
  inline void set_rolldeltar(double value);

  // required double pitchDeltaR = 7;
  inline bool has_pitchdeltar() const;
  inline void clear_pitchdeltar();
  static const int kPitchDeltaRFieldNumber = 7;
  inline double pitchdeltar() const;
  inline void set_pitchdeltar(double value);

  // required double yawDeltaR = 8;
  inline bool has_yawdeltar() const;
  inline void clear_yawdeltar();
  static const int kYawDeltaRFieldNumber = 8;
  inline double yawdeltar() const;
  inline void set_yawdeltar(double value);

  // required double latR = 9;
  inline bool has_latr() const;
  inline void clear_latr();
  static const int kLatRFieldNumber = 9;
  inline double latr() const;
  inline void set_latr(double value);

  // required double lonR = 10;
  inline bool has_lonr() const;
  inline void clear_lonr();
  static const int kLonRFieldNumber = 10;
  inline double lonr() const;
  inline void set_lonr(double value);

  // required double altM = 11;
  inline bool has_altm() const;
  inline void clear_altm();
  static const int kAltMFieldNumber = 11;
  inline double altm() const;
  inline void set_altm(double value);

  // required double forwardDeltaM = 12;
  inline bool has_forwarddeltam() const;
  inline void clear_forwarddeltam();
  static const int kForwardDeltaMFieldNumber = 12;
  inline double forwarddeltam() const;
  inline void set_forwarddeltam(double value);

  // required double rightDeltaM = 13;
  inline bool has_rightdeltam() const;
  inline void clear_rightdeltam();
  static const int kRightDeltaMFieldNumber = 13;
  inline double rightdeltam() const;
  inline void set_rightdeltam(double value);

  // required double downDeltaM = 14;
  inline bool has_downdeltam() const;
  inline void clear_downdeltam();
  static const int kDownDeltaMFieldNumber = 14;
  inline double downdeltam() const;
  inline void set_downdeltam(double value);

  // required double forwardRateDeltaMPS = 15;
  inline bool has_forwardratedeltamps() const;
  inline void clear_forwardratedeltamps();
  static const int kForwardRateDeltaMPSFieldNumber = 15;
  inline double forwardratedeltamps() const;
  inline void set_forwardratedeltamps(double value);

  // required double rightRateDeltaMPS = 16;
  inline bool has_rightratedeltamps() const;
  inline void clear_rightratedeltamps();
  static const int kRightRateDeltaMPSFieldNumber = 16;
  inline double rightratedeltamps() const;
  inline void set_rightratedeltamps(double value);

  // required double downRateDeltaMPS = 17;
  inline bool has_downratedeltamps() const;
  inline void clear_downratedeltamps();
  static const int kDownRateDeltaMPSFieldNumber = 17;
  inline double downratedeltamps() const;
  inline void set_downratedeltamps(double value);

  // optional double rollSigmaR = 18 [default = 0];
  inline bool has_rollsigmar() const;
  inline void clear_rollsigmar();
  static const int kRollSigmaRFieldNumber = 18;
  inline double rollsigmar() const;
  inline void set_rollsigmar(double value);

  // optional double pitchSigmaR = 19 [default = 0];
  inline bool has_pitchsigmar() const;
  inline void clear_pitchsigmar();
  static const int kPitchSigmaRFieldNumber = 19;
  inline double pitchsigmar() const;
  inline void set_pitchsigmar(double value);

  // optional double yawSigmaR = 20 [default = 0];
  inline bool has_yawsigmar() const;
  inline void clear_yawsigmar();
  static const int kYawSigmaRFieldNumber = 20;
  inline double yawsigmar() const;
  inline void set_yawsigmar(double value);

  // optional double rollDeltaSigmaRPS = 21 [default = 0];
  inline bool has_rolldeltasigmarps() const;
  inline void clear_rolldeltasigmarps();
  static const int kRollDeltaSigmaRPSFieldNumber = 21;
  inline double rolldeltasigmarps() const;
  inline void set_rolldeltasigmarps(double value);

  // optional double pitchDeltaSigmaRPS = 22 [default = 0];
  inline bool has_pitchdeltasigmarps() const;
  inline void clear_pitchdeltasigmarps();
  static const int kPitchDeltaSigmaRPSFieldNumber = 22;
  inline double pitchdeltasigmarps() const;
  inline void set_pitchdeltasigmarps(double value);

  // optional double yawDeltaSigmaRPS = 23 [default = 0];
  inline bool has_yawdeltasigmarps() const;
  inline void clear_yawdeltasigmarps();
  static const int kYawDeltaSigmaRPSFieldNumber = 23;
  inline double yawdeltasigmarps() const;
  inline void set_yawdeltasigmarps(double value);

  // optional double latSigmaR = 24 [default = 0];
  inline bool has_latsigmar() const;
  inline void clear_latsigmar();
  static const int kLatSigmaRFieldNumber = 24;
  inline double latsigmar() const;
  inline void set_latsigmar(double value);

  // optional double lonSigmaR = 25 [default = 0];
  inline bool has_lonsigmar() const;
  inline void clear_lonsigmar();
  static const int kLonSigmaRFieldNumber = 25;
  inline double lonsigmar() const;
  inline void set_lonsigmar(double value);

  // optional double altSigmaM = 26 [default = 0];
  inline bool has_altsigmam() const;
  inline void clear_altsigmam();
  static const int kAltSigmaMFieldNumber = 26;
  inline double altsigmam() const;
  inline void set_altsigmam(double value);

  // optional double forwardDeltaSigmaM = 27 [default = 0];
  inline bool has_forwarddeltasigmam() const;
  inline void clear_forwarddeltasigmam();
  static const int kForwardDeltaSigmaMFieldNumber = 27;
  inline double forwarddeltasigmam() const;
  inline void set_forwarddeltasigmam(double value);

  // optional double rightDeltaSigmaM = 28 [default = 0];
  inline bool has_rightdeltasigmam() const;
  inline void clear_rightdeltasigmam();
  static const int kRightDeltaSigmaMFieldNumber = 28;
  inline double rightdeltasigmam() const;
  inline void set_rightdeltasigmam(double value);

  // optional double downDeltaSigmaM = 29 [default = 0];
  inline bool has_downdeltasigmam() const;
  inline void clear_downdeltasigmam();
  static const int kDownDeltaSigmaMFieldNumber = 29;
  inline double downdeltasigmam() const;
  inline void set_downdeltasigmam(double value);

  // optional double forwardRateDeltaSigmaMPS = 30 [default = 0];
  inline bool has_forwardratedeltasigmamps() const;
  inline void clear_forwardratedeltasigmamps();
  static const int kForwardRateDeltaSigmaMPSFieldNumber = 30;
  inline double forwardratedeltasigmamps() const;
  inline void set_forwardratedeltasigmamps(double value);

  // optional double rightRateDeltaSigmaMPS = 31 [default = 0];
  inline bool has_rightratedeltasigmamps() const;
  inline void clear_rightratedeltasigmamps();
  static const int kRightRateDeltaSigmaMPSFieldNumber = 31;
  inline double rightratedeltasigmamps() const;
  inline void set_rightratedeltasigmamps(double value);

  // optional double downRateDeltaSigmaMPS = 32 [default = 0];
  inline bool has_downratedeltasigmamps() const;
  inline void clear_downratedeltasigmamps();
  static const int kDownRateDeltaSigmaMPSFieldNumber = 32;
  inline double downratedeltasigmamps() const;
  inline void set_downratedeltasigmamps(double value);

  // @@protoc_insertion_point(class_scope:nav.FusedState)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_timedeltas();
  inline void clear_has_timedeltas();
  inline void set_has_rollr();
  inline void clear_has_rollr();
  inline void set_has_pitchr();
  inline void clear_has_pitchr();
  inline void set_has_yawr();
  inline void clear_has_yawr();
  inline void set_has_rolldeltar();
  inline void clear_has_rolldeltar();
  inline void set_has_pitchdeltar();
  inline void clear_has_pitchdeltar();
  inline void set_has_yawdeltar();
  inline void clear_has_yawdeltar();
  inline void set_has_latr();
  inline void clear_has_latr();
  inline void set_has_lonr();
  inline void clear_has_lonr();
  inline void set_has_altm();
  inline void clear_has_altm();
  inline void set_has_forwarddeltam();
  inline void clear_has_forwarddeltam();
  inline void set_has_rightdeltam();
  inline void clear_has_rightdeltam();
  inline void set_has_downdeltam();
  inline void clear_has_downdeltam();
  inline void set_has_forwardratedeltamps();
  inline void clear_has_forwardratedeltamps();
  inline void set_has_rightratedeltamps();
  inline void clear_has_rightratedeltamps();
  inline void set_has_downratedeltamps();
  inline void clear_has_downratedeltamps();
  inline void set_has_rollsigmar();
  inline void clear_has_rollsigmar();
  inline void set_has_pitchsigmar();
  inline void clear_has_pitchsigmar();
  inline void set_has_yawsigmar();
  inline void clear_has_yawsigmar();
  inline void set_has_rolldeltasigmarps();
  inline void clear_has_rolldeltasigmarps();
  inline void set_has_pitchdeltasigmarps();
  inline void clear_has_pitchdeltasigmarps();
  inline void set_has_yawdeltasigmarps();
  inline void clear_has_yawdeltasigmarps();
  inline void set_has_latsigmar();
  inline void clear_has_latsigmar();
  inline void set_has_lonsigmar();
  inline void clear_has_lonsigmar();
  inline void set_has_altsigmam();
  inline void clear_has_altsigmam();
  inline void set_has_forwarddeltasigmam();
  inline void clear_has_forwarddeltasigmam();
  inline void set_has_rightdeltasigmam();
  inline void clear_has_rightdeltasigmam();
  inline void set_has_downdeltasigmam();
  inline void clear_has_downdeltasigmam();
  inline void set_has_forwardratedeltasigmamps();
  inline void clear_has_forwardratedeltasigmamps();
  inline void set_has_rightratedeltasigmamps();
  inline void clear_has_rightratedeltasigmamps();
  inline void set_has_downratedeltasigmamps();
  inline void clear_has_downratedeltasigmamps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double times_;
  double timedeltas_;
  double rollr_;
  double pitchr_;
  double yawr_;
  double rolldeltar_;
  double pitchdeltar_;
  double yawdeltar_;
  double latr_;
  double lonr_;
  double altm_;
  double forwarddeltam_;
  double rightdeltam_;
  double downdeltam_;
  double forwardratedeltamps_;
  double rightratedeltamps_;
  double downratedeltamps_;
  double rollsigmar_;
  double pitchsigmar_;
  double yawsigmar_;
  double rolldeltasigmarps_;
  double pitchdeltasigmarps_;
  double yawdeltasigmarps_;
  double latsigmar_;
  double lonsigmar_;
  double altsigmam_;
  double forwarddeltasigmam_;
  double rightdeltasigmam_;
  double downdeltasigmam_;
  double forwardratedeltasigmamps_;
  double rightratedeltasigmamps_;
  double downratedeltasigmamps_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static FusedState* default_instance_;
};
// -------------------------------------------------------------------

class RelFusedState : public ::google::protobuf::Message {
 public:
  RelFusedState();
  virtual ~RelFusedState();

  RelFusedState(const RelFusedState& from);

  inline RelFusedState& operator=(const RelFusedState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelFusedState& default_instance();

  void Swap(RelFusedState* other);

  // implements Message ----------------------------------------------

  RelFusedState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelFusedState& from);
  void MergeFrom(const RelFusedState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ownID = 1;
  inline bool has_ownid() const;
  inline void clear_ownid();
  static const int kOwnIDFieldNumber = 1;
  inline const ::std::string& ownid() const;
  inline void set_ownid(const ::std::string& value);
  inline void set_ownid(const char* value);
  inline void set_ownid(const char* value, size_t size);
  inline ::std::string* mutable_ownid();
  inline ::std::string* release_ownid();
  inline void set_allocated_ownid(::std::string* ownid);

  // required string targetID = 2;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  inline const ::std::string& targetid() const;
  inline void set_targetid(const ::std::string& value);
  inline void set_targetid(const char* value);
  inline void set_targetid(const char* value, size_t size);
  inline ::std::string* mutable_targetid();
  inline ::std::string* release_targetid();
  inline void set_allocated_targetid(::std::string* targetid);

  // required double timeS = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimeSFieldNumber = 3;
  inline double times() const;
  inline void set_times(double value);

  // required double rollR = 4;
  inline bool has_rollr() const;
  inline void clear_rollr();
  static const int kRollRFieldNumber = 4;
  inline double rollr() const;
  inline void set_rollr(double value);

  // required double pitchR = 5;
  inline bool has_pitchr() const;
  inline void clear_pitchr();
  static const int kPitchRFieldNumber = 5;
  inline double pitchr() const;
  inline void set_pitchr(double value);

  // required double yawR = 6;
  inline bool has_yawr() const;
  inline void clear_yawr();
  static const int kYawRFieldNumber = 6;
  inline double yawr() const;
  inline void set_yawr(double value);

  // required double forwardM = 7;
  inline bool has_forwardm() const;
  inline void clear_forwardm();
  static const int kForwardMFieldNumber = 7;
  inline double forwardm() const;
  inline void set_forwardm(double value);

  // required double rightM = 8;
  inline bool has_rightm() const;
  inline void clear_rightm();
  static const int kRightMFieldNumber = 8;
  inline double rightm() const;
  inline void set_rightm(double value);

  // required double downM = 9;
  inline bool has_downm() const;
  inline void clear_downm();
  static const int kDownMFieldNumber = 9;
  inline double downm() const;
  inline void set_downm(double value);

  // required double forwardDeltaM = 10;
  inline bool has_forwarddeltam() const;
  inline void clear_forwarddeltam();
  static const int kForwardDeltaMFieldNumber = 10;
  inline double forwarddeltam() const;
  inline void set_forwarddeltam(double value);

  // required double rightDeltaM = 11;
  inline bool has_rightdeltam() const;
  inline void clear_rightdeltam();
  static const int kRightDeltaMFieldNumber = 11;
  inline double rightdeltam() const;
  inline void set_rightdeltam(double value);

  // required double downDeltaM = 12;
  inline bool has_downdeltam() const;
  inline void clear_downdeltam();
  static const int kDownDeltaMFieldNumber = 12;
  inline double downdeltam() const;
  inline void set_downdeltam(double value);

  // optional double forwardDeltaSigmaM = 13 [default = 0];
  inline bool has_forwarddeltasigmam() const;
  inline void clear_forwarddeltasigmam();
  static const int kForwardDeltaSigmaMFieldNumber = 13;
  inline double forwarddeltasigmam() const;
  inline void set_forwarddeltasigmam(double value);

  // optional double rightDeltaSigmaM = 14 [default = 0];
  inline bool has_rightdeltasigmam() const;
  inline void clear_rightdeltasigmam();
  static const int kRightDeltaSigmaMFieldNumber = 14;
  inline double rightdeltasigmam() const;
  inline void set_rightdeltasigmam(double value);

  // optional double downDeltaSigmaM = 15 [default = 0];
  inline bool has_downdeltasigmam() const;
  inline void clear_downdeltasigmam();
  static const int kDownDeltaSigmaMFieldNumber = 15;
  inline double downdeltasigmam() const;
  inline void set_downdeltasigmam(double value);

  // optional double rollSigmaR = 16 [default = 0];
  inline bool has_rollsigmar() const;
  inline void clear_rollsigmar();
  static const int kRollSigmaRFieldNumber = 16;
  inline double rollsigmar() const;
  inline void set_rollsigmar(double value);

  // optional double pitchSigmaR = 17 [default = 0];
  inline bool has_pitchsigmar() const;
  inline void clear_pitchsigmar();
  static const int kPitchSigmaRFieldNumber = 17;
  inline double pitchsigmar() const;
  inline void set_pitchsigmar(double value);

  // optional double yawSigmaR = 18 [default = 0];
  inline bool has_yawsigmar() const;
  inline void clear_yawsigmar();
  static const int kYawSigmaRFieldNumber = 18;
  inline double yawsigmar() const;
  inline void set_yawsigmar(double value);

  // optional double forwardSigmaM = 19 [default = 0];
  inline bool has_forwardsigmam() const;
  inline void clear_forwardsigmam();
  static const int kForwardSigmaMFieldNumber = 19;
  inline double forwardsigmam() const;
  inline void set_forwardsigmam(double value);

  // optional double rightSigmaM = 20 [default = 0];
  inline bool has_rightsigmam() const;
  inline void clear_rightsigmam();
  static const int kRightSigmaMFieldNumber = 20;
  inline double rightsigmam() const;
  inline void set_rightsigmam(double value);

  // optional double downSigmaM = 21 [default = 0];
  inline bool has_downsigmam() const;
  inline void clear_downsigmam();
  static const int kDownSigmaMFieldNumber = 21;
  inline double downsigmam() const;
  inline void set_downsigmam(double value);

  // @@protoc_insertion_point(class_scope:nav.RelFusedState)
 private:
  inline void set_has_ownid();
  inline void clear_has_ownid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_rollr();
  inline void clear_has_rollr();
  inline void set_has_pitchr();
  inline void clear_has_pitchr();
  inline void set_has_yawr();
  inline void clear_has_yawr();
  inline void set_has_forwardm();
  inline void clear_has_forwardm();
  inline void set_has_rightm();
  inline void clear_has_rightm();
  inline void set_has_downm();
  inline void clear_has_downm();
  inline void set_has_forwarddeltam();
  inline void clear_has_forwarddeltam();
  inline void set_has_rightdeltam();
  inline void clear_has_rightdeltam();
  inline void set_has_downdeltam();
  inline void clear_has_downdeltam();
  inline void set_has_forwarddeltasigmam();
  inline void clear_has_forwarddeltasigmam();
  inline void set_has_rightdeltasigmam();
  inline void clear_has_rightdeltasigmam();
  inline void set_has_downdeltasigmam();
  inline void clear_has_downdeltasigmam();
  inline void set_has_rollsigmar();
  inline void clear_has_rollsigmar();
  inline void set_has_pitchsigmar();
  inline void clear_has_pitchsigmar();
  inline void set_has_yawsigmar();
  inline void clear_has_yawsigmar();
  inline void set_has_forwardsigmam();
  inline void clear_has_forwardsigmam();
  inline void set_has_rightsigmam();
  inline void clear_has_rightsigmam();
  inline void set_has_downsigmam();
  inline void clear_has_downsigmam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ownid_;
  ::std::string* targetid_;
  double times_;
  double rollr_;
  double pitchr_;
  double yawr_;
  double forwardm_;
  double rightm_;
  double downm_;
  double forwarddeltam_;
  double rightdeltam_;
  double downdeltam_;
  double forwarddeltasigmam_;
  double rightdeltasigmam_;
  double downdeltasigmam_;
  double rollsigmar_;
  double pitchsigmar_;
  double yawsigmar_;
  double forwardsigmam_;
  double rightsigmam_;
  double downsigmam_;
  friend void  protobuf_AddDesc_nav_2eproto();
  friend void protobuf_AssignDesc_nav_2eproto();
  friend void protobuf_ShutdownFile_nav_2eproto();

  void InitAsDefaultInstance();
  static RelFusedState* default_instance_;
};
// ===================================================================


// ===================================================================

// LabViewIn

// required bytes data = 1;
inline bool LabViewIn::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabViewIn::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabViewIn::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabViewIn::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& LabViewIn::data() const {
  // @@protoc_insertion_point(field_get:nav.LabViewIn.data)
  return *data_;
}
inline void LabViewIn::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:nav.LabViewIn.data)
}
inline void LabViewIn::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.LabViewIn.data)
}
inline void LabViewIn::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.LabViewIn.data)
}
inline ::std::string* LabViewIn::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.LabViewIn.data)
  return data_;
}
inline ::std::string* LabViewIn::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabViewIn::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.LabViewIn.data)
}

// -------------------------------------------------------------------

// LabViewOut

// required bytes data = 1;
inline bool LabViewOut::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabViewOut::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabViewOut::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabViewOut::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& LabViewOut::data() const {
  // @@protoc_insertion_point(field_get:nav.LabViewOut.data)
  return *data_;
}
inline void LabViewOut::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:nav.LabViewOut.data)
}
inline void LabViewOut::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.LabViewOut.data)
}
inline void LabViewOut::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.LabViewOut.data)
}
inline ::std::string* LabViewOut::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.LabViewOut.data)
  return data_;
}
inline ::std::string* LabViewOut::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabViewOut::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.LabViewOut.data)
}

// -------------------------------------------------------------------

// Mission

// required .nav.Behavior behavior = 1;
inline bool Mission::has_behavior() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mission::set_has_behavior() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mission::clear_has_behavior() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mission::clear_behavior() {
  behavior_ = 0;
  clear_has_behavior();
}
inline ::nav::Behavior Mission::behavior() const {
  // @@protoc_insertion_point(field_get:nav.Mission.behavior)
  return static_cast< ::nav::Behavior >(behavior_);
}
inline void Mission::set_behavior(::nav::Behavior value) {
  assert(::nav::Behavior_IsValid(value));
  set_has_behavior();
  behavior_ = value;
  // @@protoc_insertion_point(field_set:nav.Mission.behavior)
}

// -------------------------------------------------------------------

// Waystates

// repeated double timeS = 1;
inline int Waystates::times_size() const {
  return times_.size();
}
inline void Waystates::clear_times() {
  times_.Clear();
}
inline double Waystates::times(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.timeS)
  return times_.Get(index);
}
inline void Waystates::set_times(int index, double value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.timeS)
}
inline void Waystates::add_times(double value) {
  times_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.timeS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::times() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.timeS)
  return times_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.timeS)
  return &times_;
}

// repeated double rollR = 2;
inline int Waystates::rollr_size() const {
  return rollr_.size();
}
inline void Waystates::clear_rollr() {
  rollr_.Clear();
}
inline double Waystates::rollr(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.rollR)
  return rollr_.Get(index);
}
inline void Waystates::set_rollr(int index, double value) {
  rollr_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.rollR)
}
inline void Waystates::add_rollr(double value) {
  rollr_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.rollR)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::rollr() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.rollR)
  return rollr_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_rollr() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.rollR)
  return &rollr_;
}

// repeated double pitchR = 3;
inline int Waystates::pitchr_size() const {
  return pitchr_.size();
}
inline void Waystates::clear_pitchr() {
  pitchr_.Clear();
}
inline double Waystates::pitchr(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.pitchR)
  return pitchr_.Get(index);
}
inline void Waystates::set_pitchr(int index, double value) {
  pitchr_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.pitchR)
}
inline void Waystates::add_pitchr(double value) {
  pitchr_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.pitchR)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::pitchr() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.pitchR)
  return pitchr_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_pitchr() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.pitchR)
  return &pitchr_;
}

// repeated double yawR = 4;
inline int Waystates::yawr_size() const {
  return yawr_.size();
}
inline void Waystates::clear_yawr() {
  yawr_.Clear();
}
inline double Waystates::yawr(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.yawR)
  return yawr_.Get(index);
}
inline void Waystates::set_yawr(int index, double value) {
  yawr_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.yawR)
}
inline void Waystates::add_yawr(double value) {
  yawr_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.yawR)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::yawr() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.yawR)
  return yawr_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_yawr() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.yawR)
  return &yawr_;
}

// repeated double latR = 5;
inline int Waystates::latr_size() const {
  return latr_.size();
}
inline void Waystates::clear_latr() {
  latr_.Clear();
}
inline double Waystates::latr(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.latR)
  return latr_.Get(index);
}
inline void Waystates::set_latr(int index, double value) {
  latr_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.latR)
}
inline void Waystates::add_latr(double value) {
  latr_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.latR)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::latr() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.latR)
  return latr_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_latr() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.latR)
  return &latr_;
}

// repeated double lonR = 6;
inline int Waystates::lonr_size() const {
  return lonr_.size();
}
inline void Waystates::clear_lonr() {
  lonr_.Clear();
}
inline double Waystates::lonr(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.lonR)
  return lonr_.Get(index);
}
inline void Waystates::set_lonr(int index, double value) {
  lonr_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.lonR)
}
inline void Waystates::add_lonr(double value) {
  lonr_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.lonR)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::lonr() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.lonR)
  return lonr_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_lonr() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.lonR)
  return &lonr_;
}

// repeated double altM = 7;
inline int Waystates::altm_size() const {
  return altm_.size();
}
inline void Waystates::clear_altm() {
  altm_.Clear();
}
inline double Waystates::altm(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.altM)
  return altm_.Get(index);
}
inline void Waystates::set_altm(int index, double value) {
  altm_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.altM)
}
inline void Waystates::add_altm(double value) {
  altm_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.altM)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::altm() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.altM)
  return altm_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_altm() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.altM)
  return &altm_;
}

// repeated double rollRateRPS = 8;
inline int Waystates::rollraterps_size() const {
  return rollraterps_.size();
}
inline void Waystates::clear_rollraterps() {
  rollraterps_.Clear();
}
inline double Waystates::rollraterps(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.rollRateRPS)
  return rollraterps_.Get(index);
}
inline void Waystates::set_rollraterps(int index, double value) {
  rollraterps_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.rollRateRPS)
}
inline void Waystates::add_rollraterps(double value) {
  rollraterps_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.rollRateRPS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::rollraterps() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.rollRateRPS)
  return rollraterps_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_rollraterps() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.rollRateRPS)
  return &rollraterps_;
}

// repeated double pitchRateRPS = 9;
inline int Waystates::pitchraterps_size() const {
  return pitchraterps_.size();
}
inline void Waystates::clear_pitchraterps() {
  pitchraterps_.Clear();
}
inline double Waystates::pitchraterps(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.pitchRateRPS)
  return pitchraterps_.Get(index);
}
inline void Waystates::set_pitchraterps(int index, double value) {
  pitchraterps_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.pitchRateRPS)
}
inline void Waystates::add_pitchraterps(double value) {
  pitchraterps_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.pitchRateRPS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::pitchraterps() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.pitchRateRPS)
  return pitchraterps_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_pitchraterps() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.pitchRateRPS)
  return &pitchraterps_;
}

// repeated double yawRateRPS = 10;
inline int Waystates::yawraterps_size() const {
  return yawraterps_.size();
}
inline void Waystates::clear_yawraterps() {
  yawraterps_.Clear();
}
inline double Waystates::yawraterps(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.yawRateRPS)
  return yawraterps_.Get(index);
}
inline void Waystates::set_yawraterps(int index, double value) {
  yawraterps_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.yawRateRPS)
}
inline void Waystates::add_yawraterps(double value) {
  yawraterps_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.yawRateRPS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::yawraterps() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.yawRateRPS)
  return yawraterps_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_yawraterps() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.yawRateRPS)
  return &yawraterps_;
}

// repeated double forwardRateMPS = 11;
inline int Waystates::forwardratemps_size() const {
  return forwardratemps_.size();
}
inline void Waystates::clear_forwardratemps() {
  forwardratemps_.Clear();
}
inline double Waystates::forwardratemps(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.forwardRateMPS)
  return forwardratemps_.Get(index);
}
inline void Waystates::set_forwardratemps(int index, double value) {
  forwardratemps_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.forwardRateMPS)
}
inline void Waystates::add_forwardratemps(double value) {
  forwardratemps_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.forwardRateMPS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::forwardratemps() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.forwardRateMPS)
  return forwardratemps_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_forwardratemps() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.forwardRateMPS)
  return &forwardratemps_;
}

// repeated double rightRateMPS = 12;
inline int Waystates::rightratemps_size() const {
  return rightratemps_.size();
}
inline void Waystates::clear_rightratemps() {
  rightratemps_.Clear();
}
inline double Waystates::rightratemps(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.rightRateMPS)
  return rightratemps_.Get(index);
}
inline void Waystates::set_rightratemps(int index, double value) {
  rightratemps_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.rightRateMPS)
}
inline void Waystates::add_rightratemps(double value) {
  rightratemps_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.rightRateMPS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::rightratemps() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.rightRateMPS)
  return rightratemps_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_rightratemps() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.rightRateMPS)
  return &rightratemps_;
}

// repeated double downRateMPS = 13;
inline int Waystates::downratemps_size() const {
  return downratemps_.size();
}
inline void Waystates::clear_downratemps() {
  downratemps_.Clear();
}
inline double Waystates::downratemps(int index) const {
  // @@protoc_insertion_point(field_get:nav.Waystates.downRateMPS)
  return downratemps_.Get(index);
}
inline void Waystates::set_downratemps(int index, double value) {
  downratemps_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Waystates.downRateMPS)
}
inline void Waystates::add_downratemps(double value) {
  downratemps_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Waystates.downRateMPS)
}
inline const ::google::protobuf::RepeatedField< double >&
Waystates::downratemps() const {
  // @@protoc_insertion_point(field_list:nav.Waystates.downRateMPS)
  return downratemps_;
}
inline ::google::protobuf::RepeatedField< double >*
Waystates::mutable_downratemps() {
  // @@protoc_insertion_point(field_mutable_list:nav.Waystates.downRateMPS)
  return &downratemps_;
}

// -------------------------------------------------------------------

// Ctrl

// repeated double uReal = 1;
inline int Ctrl::ureal_size() const {
  return ureal_.size();
}
inline void Ctrl::clear_ureal() {
  ureal_.Clear();
}
inline double Ctrl::ureal(int index) const {
  // @@protoc_insertion_point(field_get:nav.Ctrl.uReal)
  return ureal_.Get(index);
}
inline void Ctrl::set_ureal(int index, double value) {
  ureal_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Ctrl.uReal)
}
inline void Ctrl::add_ureal(double value) {
  ureal_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Ctrl.uReal)
}
inline const ::google::protobuf::RepeatedField< double >&
Ctrl::ureal() const {
  // @@protoc_insertion_point(field_list:nav.Ctrl.uReal)
  return ureal_;
}
inline ::google::protobuf::RepeatedField< double >*
Ctrl::mutable_ureal() {
  // @@protoc_insertion_point(field_mutable_list:nav.Ctrl.uReal)
  return &ureal_;
}

// repeated int32 uInt = 2;
inline int Ctrl::uint_size() const {
  return uint_.size();
}
inline void Ctrl::clear_uint() {
  uint_.Clear();
}
inline ::google::protobuf::int32 Ctrl::uint(int index) const {
  // @@protoc_insertion_point(field_get:nav.Ctrl.uInt)
  return uint_.Get(index);
}
inline void Ctrl::set_uint(int index, ::google::protobuf::int32 value) {
  uint_.Set(index, value);
  // @@protoc_insertion_point(field_set:nav.Ctrl.uInt)
}
inline void Ctrl::add_uint(::google::protobuf::int32 value) {
  uint_.Add(value);
  // @@protoc_insertion_point(field_add:nav.Ctrl.uInt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Ctrl::uint() const {
  // @@protoc_insertion_point(field_list:nav.Ctrl.uInt)
  return uint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Ctrl::mutable_uint() {
  // @@protoc_insertion_point(field_mutable_list:nav.Ctrl.uInt)
  return &uint_;
}

// -------------------------------------------------------------------

// Img

// required double timeS = 1;
inline bool Img::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Img::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Img::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Img::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double Img::times() const {
  // @@protoc_insertion_point(field_get:nav.Img.timeS)
  return times_;
}
inline void Img::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.Img.timeS)
}

// required double fovR = 2;
inline bool Img::has_fovr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Img::set_has_fovr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Img::clear_has_fovr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Img::clear_fovr() {
  fovr_ = 0;
  clear_has_fovr();
}
inline double Img::fovr() const {
  // @@protoc_insertion_point(field_get:nav.Img.fovR)
  return fovr_;
}
inline void Img::set_fovr(double value) {
  set_has_fovr();
  fovr_ = value;
  // @@protoc_insertion_point(field_set:nav.Img.fovR)
}

// required uint32 steps = 3;
inline bool Img::has_steps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Img::set_has_steps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Img::clear_has_steps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Img::clear_steps() {
  steps_ = 0u;
  clear_has_steps();
}
inline ::google::protobuf::uint32 Img::steps() const {
  // @@protoc_insertion_point(field_get:nav.Img.steps)
  return steps_;
}
inline void Img::set_steps(::google::protobuf::uint32 value) {
  set_has_steps();
  steps_ = value;
  // @@protoc_insertion_point(field_set:nav.Img.steps)
}

// required uint32 strides = 4;
inline bool Img::has_strides() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Img::set_has_strides() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Img::clear_has_strides() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Img::clear_strides() {
  strides_ = 0u;
  clear_has_strides();
}
inline ::google::protobuf::uint32 Img::strides() const {
  // @@protoc_insertion_point(field_get:nav.Img.strides)
  return strides_;
}
inline void Img::set_strides(::google::protobuf::uint32 value) {
  set_has_strides();
  strides_ = value;
  // @@protoc_insertion_point(field_set:nav.Img.strides)
}

// required uint32 layers = 5;
inline bool Img::has_layers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Img::set_has_layers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Img::clear_has_layers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Img::clear_layers() {
  layers_ = 0u;
  clear_has_layers();
}
inline ::google::protobuf::uint32 Img::layers() const {
  // @@protoc_insertion_point(field_get:nav.Img.layers)
  return layers_;
}
inline void Img::set_layers(::google::protobuf::uint32 value) {
  set_has_layers();
  layers_ = value;
  // @@protoc_insertion_point(field_set:nav.Img.layers)
}

// required bytes data = 6;
inline bool Img::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Img::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Img::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Img::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Img::data() const {
  // @@protoc_insertion_point(field_get:nav.Img.data)
  return *data_;
}
inline void Img::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:nav.Img.data)
}
inline void Img::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.Img.data)
}
inline void Img::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.Img.data)
}
inline ::std::string* Img::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.Img.data)
  return data_;
}
inline ::std::string* Img::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Img::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.Img.data)
}

// -------------------------------------------------------------------

// RPY

// required double timeS = 1;
inline bool RPY::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPY::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPY::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPY::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double RPY::times() const {
  // @@protoc_insertion_point(field_get:nav.RPY.timeS)
  return times_;
}
inline void RPY::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.timeS)
}

// required double rollR = 2;
inline bool RPY::has_rollr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPY::set_has_rollr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPY::clear_has_rollr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPY::clear_rollr() {
  rollr_ = 0;
  clear_has_rollr();
}
inline double RPY::rollr() const {
  // @@protoc_insertion_point(field_get:nav.RPY.rollR)
  return rollr_;
}
inline void RPY::set_rollr(double value) {
  set_has_rollr();
  rollr_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.rollR)
}

// required double pitchR = 3;
inline bool RPY::has_pitchr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPY::set_has_pitchr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPY::clear_has_pitchr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPY::clear_pitchr() {
  pitchr_ = 0;
  clear_has_pitchr();
}
inline double RPY::pitchr() const {
  // @@protoc_insertion_point(field_get:nav.RPY.pitchR)
  return pitchr_;
}
inline void RPY::set_pitchr(double value) {
  set_has_pitchr();
  pitchr_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.pitchR)
}

// required double yawR = 4;
inline bool RPY::has_yawr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPY::set_has_yawr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPY::clear_has_yawr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPY::clear_yawr() {
  yawr_ = 0;
  clear_has_yawr();
}
inline double RPY::yawr() const {
  // @@protoc_insertion_point(field_get:nav.RPY.yawR)
  return yawr_;
}
inline void RPY::set_yawr(double value) {
  set_has_yawr();
  yawr_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.yawR)
}

// optional double rollSigmaR = 5 [default = 0];
inline bool RPY::has_rollsigmar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPY::set_has_rollsigmar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPY::clear_has_rollsigmar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPY::clear_rollsigmar() {
  rollsigmar_ = 0;
  clear_has_rollsigmar();
}
inline double RPY::rollsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RPY.rollSigmaR)
  return rollsigmar_;
}
inline void RPY::set_rollsigmar(double value) {
  set_has_rollsigmar();
  rollsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.rollSigmaR)
}

// optional double pitchSigmaR = 6 [default = 0];
inline bool RPY::has_pitchsigmar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RPY::set_has_pitchsigmar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RPY::clear_has_pitchsigmar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RPY::clear_pitchsigmar() {
  pitchsigmar_ = 0;
  clear_has_pitchsigmar();
}
inline double RPY::pitchsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RPY.pitchSigmaR)
  return pitchsigmar_;
}
inline void RPY::set_pitchsigmar(double value) {
  set_has_pitchsigmar();
  pitchsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.pitchSigmaR)
}

// optional double yawSigmaR = 7 [default = 0];
inline bool RPY::has_yawsigmar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPY::set_has_yawsigmar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPY::clear_has_yawsigmar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RPY::clear_yawsigmar() {
  yawsigmar_ = 0;
  clear_has_yawsigmar();
}
inline double RPY::yawsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RPY.yawSigmaR)
  return yawsigmar_;
}
inline void RPY::set_yawsigmar(double value) {
  set_has_yawsigmar();
  yawsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RPY.yawSigmaR)
}

// -------------------------------------------------------------------

// LatLon

// required double timeS = 1;
inline bool LatLon::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatLon::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatLon::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatLon::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double LatLon::times() const {
  // @@protoc_insertion_point(field_get:nav.LatLon.timeS)
  return times_;
}
inline void LatLon::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.LatLon.timeS)
}

// required double latR = 2;
inline bool LatLon::has_latr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatLon::set_has_latr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatLon::clear_has_latr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatLon::clear_latr() {
  latr_ = 0;
  clear_has_latr();
}
inline double LatLon::latr() const {
  // @@protoc_insertion_point(field_get:nav.LatLon.latR)
  return latr_;
}
inline void LatLon::set_latr(double value) {
  set_has_latr();
  latr_ = value;
  // @@protoc_insertion_point(field_set:nav.LatLon.latR)
}

// required double lonR = 3;
inline bool LatLon::has_lonr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatLon::set_has_lonr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatLon::clear_has_lonr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatLon::clear_lonr() {
  lonr_ = 0;
  clear_has_lonr();
}
inline double LatLon::lonr() const {
  // @@protoc_insertion_point(field_get:nav.LatLon.lonR)
  return lonr_;
}
inline void LatLon::set_lonr(double value) {
  set_has_lonr();
  lonr_ = value;
  // @@protoc_insertion_point(field_set:nav.LatLon.lonR)
}

// optional double latSigmaR = 4 [default = 0];
inline bool LatLon::has_latsigmar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LatLon::set_has_latsigmar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LatLon::clear_has_latsigmar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LatLon::clear_latsigmar() {
  latsigmar_ = 0;
  clear_has_latsigmar();
}
inline double LatLon::latsigmar() const {
  // @@protoc_insertion_point(field_get:nav.LatLon.latSigmaR)
  return latsigmar_;
}
inline void LatLon::set_latsigmar(double value) {
  set_has_latsigmar();
  latsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.LatLon.latSigmaR)
}

// optional double lonSigmaR = 5 [default = 0];
inline bool LatLon::has_lonsigmar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LatLon::set_has_lonsigmar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LatLon::clear_has_lonsigmar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LatLon::clear_lonsigmar() {
  lonsigmar_ = 0;
  clear_has_lonsigmar();
}
inline double LatLon::lonsigmar() const {
  // @@protoc_insertion_point(field_get:nav.LatLon.lonSigmaR)
  return lonsigmar_;
}
inline void LatLon::set_lonsigmar(double value) {
  set_has_lonsigmar();
  lonsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.LatLon.lonSigmaR)
}

// -------------------------------------------------------------------

// Alt

// required double timeS = 1;
inline bool Alt::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alt::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alt::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alt::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double Alt::times() const {
  // @@protoc_insertion_point(field_get:nav.Alt.timeS)
  return times_;
}
inline void Alt::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.Alt.timeS)
}

// required double altM = 2;
inline bool Alt::has_altm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alt::set_has_altm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Alt::clear_has_altm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Alt::clear_altm() {
  altm_ = 0;
  clear_has_altm();
}
inline double Alt::altm() const {
  // @@protoc_insertion_point(field_get:nav.Alt.altM)
  return altm_;
}
inline void Alt::set_altm(double value) {
  set_has_altm();
  altm_ = value;
  // @@protoc_insertion_point(field_set:nav.Alt.altM)
}

// optional double altSigmaM = 3 [default = 0];
inline bool Alt::has_altsigmam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Alt::set_has_altsigmam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Alt::clear_has_altsigmam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Alt::clear_altsigmam() {
  altsigmam_ = 0;
  clear_has_altsigmam();
}
inline double Alt::altsigmam() const {
  // @@protoc_insertion_point(field_get:nav.Alt.altSigmaM)
  return altsigmam_;
}
inline void Alt::set_altsigmam(double value) {
  set_has_altsigmam();
  altsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.Alt.altSigmaM)
}

// -------------------------------------------------------------------

// BodyRPYDelta

// required double timeS = 1;
inline bool BodyRPYDelta::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyRPYDelta::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyRPYDelta::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyRPYDelta::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double BodyRPYDelta::times() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.timeS)
  return times_;
}
inline void BodyRPYDelta::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.timeS)
}

// required double timeDeltaS = 2;
inline bool BodyRPYDelta::has_timedeltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyRPYDelta::set_has_timedeltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyRPYDelta::clear_has_timedeltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyRPYDelta::clear_timedeltas() {
  timedeltas_ = 0;
  clear_has_timedeltas();
}
inline double BodyRPYDelta::timedeltas() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.timeDeltaS)
  return timedeltas_;
}
inline void BodyRPYDelta::set_timedeltas(double value) {
  set_has_timedeltas();
  timedeltas_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.timeDeltaS)
}

// required double rollDeltaR = 3;
inline bool BodyRPYDelta::has_rolldeltar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyRPYDelta::set_has_rolldeltar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyRPYDelta::clear_has_rolldeltar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyRPYDelta::clear_rolldeltar() {
  rolldeltar_ = 0;
  clear_has_rolldeltar();
}
inline double BodyRPYDelta::rolldeltar() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.rollDeltaR)
  return rolldeltar_;
}
inline void BodyRPYDelta::set_rolldeltar(double value) {
  set_has_rolldeltar();
  rolldeltar_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.rollDeltaR)
}

// required double pitchDeltaR = 4;
inline bool BodyRPYDelta::has_pitchdeltar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyRPYDelta::set_has_pitchdeltar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyRPYDelta::clear_has_pitchdeltar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyRPYDelta::clear_pitchdeltar() {
  pitchdeltar_ = 0;
  clear_has_pitchdeltar();
}
inline double BodyRPYDelta::pitchdeltar() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.pitchDeltaR)
  return pitchdeltar_;
}
inline void BodyRPYDelta::set_pitchdeltar(double value) {
  set_has_pitchdeltar();
  pitchdeltar_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.pitchDeltaR)
}

// required double yawDeltaR = 5;
inline bool BodyRPYDelta::has_yawdeltar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BodyRPYDelta::set_has_yawdeltar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BodyRPYDelta::clear_has_yawdeltar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BodyRPYDelta::clear_yawdeltar() {
  yawdeltar_ = 0;
  clear_has_yawdeltar();
}
inline double BodyRPYDelta::yawdeltar() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.yawDeltaR)
  return yawdeltar_;
}
inline void BodyRPYDelta::set_yawdeltar(double value) {
  set_has_yawdeltar();
  yawdeltar_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.yawDeltaR)
}

// optional double rollDeltaSigmaRPS = 6 [default = 0];
inline bool BodyRPYDelta::has_rolldeltasigmarps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BodyRPYDelta::set_has_rolldeltasigmarps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BodyRPYDelta::clear_has_rolldeltasigmarps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BodyRPYDelta::clear_rolldeltasigmarps() {
  rolldeltasigmarps_ = 0;
  clear_has_rolldeltasigmarps();
}
inline double BodyRPYDelta::rolldeltasigmarps() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.rollDeltaSigmaRPS)
  return rolldeltasigmarps_;
}
inline void BodyRPYDelta::set_rolldeltasigmarps(double value) {
  set_has_rolldeltasigmarps();
  rolldeltasigmarps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.rollDeltaSigmaRPS)
}

// optional double pitchDeltaSigmaRPS = 7 [default = 0];
inline bool BodyRPYDelta::has_pitchdeltasigmarps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BodyRPYDelta::set_has_pitchdeltasigmarps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BodyRPYDelta::clear_has_pitchdeltasigmarps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BodyRPYDelta::clear_pitchdeltasigmarps() {
  pitchdeltasigmarps_ = 0;
  clear_has_pitchdeltasigmarps();
}
inline double BodyRPYDelta::pitchdeltasigmarps() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.pitchDeltaSigmaRPS)
  return pitchdeltasigmarps_;
}
inline void BodyRPYDelta::set_pitchdeltasigmarps(double value) {
  set_has_pitchdeltasigmarps();
  pitchdeltasigmarps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.pitchDeltaSigmaRPS)
}

// optional double yawDeltaSigmaRPS = 8 [default = 0];
inline bool BodyRPYDelta::has_yawdeltasigmarps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BodyRPYDelta::set_has_yawdeltasigmarps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BodyRPYDelta::clear_has_yawdeltasigmarps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BodyRPYDelta::clear_yawdeltasigmarps() {
  yawdeltasigmarps_ = 0;
  clear_has_yawdeltasigmarps();
}
inline double BodyRPYDelta::yawdeltasigmarps() const {
  // @@protoc_insertion_point(field_get:nav.BodyRPYDelta.yawDeltaSigmaRPS)
  return yawdeltasigmarps_;
}
inline void BodyRPYDelta::set_yawdeltasigmarps(double value) {
  set_has_yawdeltasigmarps();
  yawdeltasigmarps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyRPYDelta.yawDeltaSigmaRPS)
}

// -------------------------------------------------------------------

// BodyFRDDelta

// required double timeS = 1;
inline bool BodyFRDDelta::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyFRDDelta::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyFRDDelta::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyFRDDelta::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double BodyFRDDelta::times() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.timeS)
  return times_;
}
inline void BodyFRDDelta::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.timeS)
}

// required double timeDeltaS = 2;
inline bool BodyFRDDelta::has_timedeltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyFRDDelta::set_has_timedeltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyFRDDelta::clear_has_timedeltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyFRDDelta::clear_timedeltas() {
  timedeltas_ = 0;
  clear_has_timedeltas();
}
inline double BodyFRDDelta::timedeltas() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.timeDeltaS)
  return timedeltas_;
}
inline void BodyFRDDelta::set_timedeltas(double value) {
  set_has_timedeltas();
  timedeltas_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.timeDeltaS)
}

// required double forwardDeltaM = 3;
inline bool BodyFRDDelta::has_forwarddeltam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyFRDDelta::set_has_forwarddeltam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyFRDDelta::clear_has_forwarddeltam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyFRDDelta::clear_forwarddeltam() {
  forwarddeltam_ = 0;
  clear_has_forwarddeltam();
}
inline double BodyFRDDelta::forwarddeltam() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.forwardDeltaM)
  return forwarddeltam_;
}
inline void BodyFRDDelta::set_forwarddeltam(double value) {
  set_has_forwarddeltam();
  forwarddeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.forwardDeltaM)
}

// required double rightDeltaM = 4;
inline bool BodyFRDDelta::has_rightdeltam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyFRDDelta::set_has_rightdeltam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyFRDDelta::clear_has_rightdeltam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyFRDDelta::clear_rightdeltam() {
  rightdeltam_ = 0;
  clear_has_rightdeltam();
}
inline double BodyFRDDelta::rightdeltam() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.rightDeltaM)
  return rightdeltam_;
}
inline void BodyFRDDelta::set_rightdeltam(double value) {
  set_has_rightdeltam();
  rightdeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.rightDeltaM)
}

// required double downDeltaM = 5;
inline bool BodyFRDDelta::has_downdeltam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BodyFRDDelta::set_has_downdeltam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BodyFRDDelta::clear_has_downdeltam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BodyFRDDelta::clear_downdeltam() {
  downdeltam_ = 0;
  clear_has_downdeltam();
}
inline double BodyFRDDelta::downdeltam() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.downDeltaM)
  return downdeltam_;
}
inline void BodyFRDDelta::set_downdeltam(double value) {
  set_has_downdeltam();
  downdeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.downDeltaM)
}

// optional double forwardDeltaSigmaM = 6 [default = 0];
inline bool BodyFRDDelta::has_forwarddeltasigmam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BodyFRDDelta::set_has_forwarddeltasigmam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BodyFRDDelta::clear_has_forwarddeltasigmam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BodyFRDDelta::clear_forwarddeltasigmam() {
  forwarddeltasigmam_ = 0;
  clear_has_forwarddeltasigmam();
}
inline double BodyFRDDelta::forwarddeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.forwardDeltaSigmaM)
  return forwarddeltasigmam_;
}
inline void BodyFRDDelta::set_forwarddeltasigmam(double value) {
  set_has_forwarddeltasigmam();
  forwarddeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.forwardDeltaSigmaM)
}

// optional double rightDeltaSigmaM = 7 [default = 0];
inline bool BodyFRDDelta::has_rightdeltasigmam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BodyFRDDelta::set_has_rightdeltasigmam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BodyFRDDelta::clear_has_rightdeltasigmam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BodyFRDDelta::clear_rightdeltasigmam() {
  rightdeltasigmam_ = 0;
  clear_has_rightdeltasigmam();
}
inline double BodyFRDDelta::rightdeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.rightDeltaSigmaM)
  return rightdeltasigmam_;
}
inline void BodyFRDDelta::set_rightdeltasigmam(double value) {
  set_has_rightdeltasigmam();
  rightdeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.rightDeltaSigmaM)
}

// optional double downDeltaSigmaM = 8 [default = 0];
inline bool BodyFRDDelta::has_downdeltasigmam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BodyFRDDelta::set_has_downdeltasigmam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BodyFRDDelta::clear_has_downdeltasigmam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BodyFRDDelta::clear_downdeltasigmam() {
  downdeltasigmam_ = 0;
  clear_has_downdeltasigmam();
}
inline double BodyFRDDelta::downdeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDDelta.downDeltaSigmaM)
  return downdeltasigmam_;
}
inline void BodyFRDDelta::set_downdeltasigmam(double value) {
  set_has_downdeltasigmam();
  downdeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDDelta.downDeltaSigmaM)
}

// -------------------------------------------------------------------

// BodyFRDRateDelta

// required double timeS = 1;
inline bool BodyFRDRateDelta::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyFRDRateDelta::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyFRDRateDelta::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyFRDRateDelta::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double BodyFRDRateDelta::times() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.timeS)
  return times_;
}
inline void BodyFRDRateDelta::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.timeS)
}

// required double timeDeltaS = 2;
inline bool BodyFRDRateDelta::has_timedeltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyFRDRateDelta::set_has_timedeltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyFRDRateDelta::clear_has_timedeltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyFRDRateDelta::clear_timedeltas() {
  timedeltas_ = 0;
  clear_has_timedeltas();
}
inline double BodyFRDRateDelta::timedeltas() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.timeDeltaS)
  return timedeltas_;
}
inline void BodyFRDRateDelta::set_timedeltas(double value) {
  set_has_timedeltas();
  timedeltas_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.timeDeltaS)
}

// required double forwardRateDeltaMPS = 3;
inline bool BodyFRDRateDelta::has_forwardratedeltamps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyFRDRateDelta::set_has_forwardratedeltamps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyFRDRateDelta::clear_has_forwardratedeltamps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyFRDRateDelta::clear_forwardratedeltamps() {
  forwardratedeltamps_ = 0;
  clear_has_forwardratedeltamps();
}
inline double BodyFRDRateDelta::forwardratedeltamps() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.forwardRateDeltaMPS)
  return forwardratedeltamps_;
}
inline void BodyFRDRateDelta::set_forwardratedeltamps(double value) {
  set_has_forwardratedeltamps();
  forwardratedeltamps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.forwardRateDeltaMPS)
}

// required double rightRateDeltaMPS = 4;
inline bool BodyFRDRateDelta::has_rightratedeltamps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyFRDRateDelta::set_has_rightratedeltamps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyFRDRateDelta::clear_has_rightratedeltamps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyFRDRateDelta::clear_rightratedeltamps() {
  rightratedeltamps_ = 0;
  clear_has_rightratedeltamps();
}
inline double BodyFRDRateDelta::rightratedeltamps() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.rightRateDeltaMPS)
  return rightratedeltamps_;
}
inline void BodyFRDRateDelta::set_rightratedeltamps(double value) {
  set_has_rightratedeltamps();
  rightratedeltamps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.rightRateDeltaMPS)
}

// required double downRateDeltaMPS = 5;
inline bool BodyFRDRateDelta::has_downratedeltamps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BodyFRDRateDelta::set_has_downratedeltamps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BodyFRDRateDelta::clear_has_downratedeltamps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BodyFRDRateDelta::clear_downratedeltamps() {
  downratedeltamps_ = 0;
  clear_has_downratedeltamps();
}
inline double BodyFRDRateDelta::downratedeltamps() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.downRateDeltaMPS)
  return downratedeltamps_;
}
inline void BodyFRDRateDelta::set_downratedeltamps(double value) {
  set_has_downratedeltamps();
  downratedeltamps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.downRateDeltaMPS)
}

// optional double forwardRateDeltaSigmaMPS = 6 [default = 0];
inline bool BodyFRDRateDelta::has_forwardratedeltasigmamps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BodyFRDRateDelta::set_has_forwardratedeltasigmamps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BodyFRDRateDelta::clear_has_forwardratedeltasigmamps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BodyFRDRateDelta::clear_forwardratedeltasigmamps() {
  forwardratedeltasigmamps_ = 0;
  clear_has_forwardratedeltasigmamps();
}
inline double BodyFRDRateDelta::forwardratedeltasigmamps() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.forwardRateDeltaSigmaMPS)
  return forwardratedeltasigmamps_;
}
inline void BodyFRDRateDelta::set_forwardratedeltasigmamps(double value) {
  set_has_forwardratedeltasigmamps();
  forwardratedeltasigmamps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.forwardRateDeltaSigmaMPS)
}

// optional double rightRateDeltaSigmaMPS = 7 [default = 0];
inline bool BodyFRDRateDelta::has_rightratedeltasigmamps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BodyFRDRateDelta::set_has_rightratedeltasigmamps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BodyFRDRateDelta::clear_has_rightratedeltasigmamps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BodyFRDRateDelta::clear_rightratedeltasigmamps() {
  rightratedeltasigmamps_ = 0;
  clear_has_rightratedeltasigmamps();
}
inline double BodyFRDRateDelta::rightratedeltasigmamps() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.rightRateDeltaSigmaMPS)
  return rightratedeltasigmamps_;
}
inline void BodyFRDRateDelta::set_rightratedeltasigmamps(double value) {
  set_has_rightratedeltasigmamps();
  rightratedeltasigmamps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.rightRateDeltaSigmaMPS)
}

// optional double downRateDeltaSigmaMPS = 8 [default = 0];
inline bool BodyFRDRateDelta::has_downratedeltasigmamps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BodyFRDRateDelta::set_has_downratedeltasigmamps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BodyFRDRateDelta::clear_has_downratedeltasigmamps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BodyFRDRateDelta::clear_downratedeltasigmamps() {
  downratedeltasigmamps_ = 0;
  clear_has_downratedeltasigmamps();
}
inline double BodyFRDRateDelta::downratedeltasigmamps() const {
  // @@protoc_insertion_point(field_get:nav.BodyFRDRateDelta.downRateDeltaSigmaMPS)
  return downratedeltasigmamps_;
}
inline void BodyFRDRateDelta::set_downratedeltasigmamps(double value) {
  set_has_downratedeltasigmamps();
  downratedeltasigmamps_ = value;
  // @@protoc_insertion_point(field_set:nav.BodyFRDRateDelta.downRateDeltaSigmaMPS)
}

// -------------------------------------------------------------------

// RelRPY

// required string targetID = 1;
inline bool RelRPY::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelRPY::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelRPY::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelRPY::clear_targetid() {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_->clear();
  }
  clear_has_targetid();
}
inline const ::std::string& RelRPY::targetid() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.targetID)
  return *targetid_;
}
inline void RelRPY::set_targetid(const ::std::string& value) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(value);
  // @@protoc_insertion_point(field_set:nav.RelRPY.targetID)
}
inline void RelRPY::set_targetid(const char* value) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.RelRPY.targetID)
}
inline void RelRPY::set_targetid(const char* value, size_t size) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.RelRPY.targetID)
}
inline ::std::string* RelRPY::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.RelRPY.targetID)
  return targetid_;
}
inline ::std::string* RelRPY::release_targetid() {
  clear_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetid_;
    targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RelRPY::set_allocated_targetid(::std::string* targetid) {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetid_;
  }
  if (targetid) {
    set_has_targetid();
    targetid_ = targetid;
  } else {
    clear_has_targetid();
    targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.RelRPY.targetID)
}

// required double timeS = 2;
inline bool RelRPY::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelRPY::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelRPY::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelRPY::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double RelRPY::times() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.timeS)
  return times_;
}
inline void RelRPY::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.timeS)
}

// required double rollR = 3;
inline bool RelRPY::has_rollr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelRPY::set_has_rollr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelRPY::clear_has_rollr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelRPY::clear_rollr() {
  rollr_ = 0;
  clear_has_rollr();
}
inline double RelRPY::rollr() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.rollR)
  return rollr_;
}
inline void RelRPY::set_rollr(double value) {
  set_has_rollr();
  rollr_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.rollR)
}

// required double pitchR = 4;
inline bool RelRPY::has_pitchr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelRPY::set_has_pitchr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelRPY::clear_has_pitchr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelRPY::clear_pitchr() {
  pitchr_ = 0;
  clear_has_pitchr();
}
inline double RelRPY::pitchr() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.pitchR)
  return pitchr_;
}
inline void RelRPY::set_pitchr(double value) {
  set_has_pitchr();
  pitchr_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.pitchR)
}

// required double yawR = 5;
inline bool RelRPY::has_yawr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelRPY::set_has_yawr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelRPY::clear_has_yawr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelRPY::clear_yawr() {
  yawr_ = 0;
  clear_has_yawr();
}
inline double RelRPY::yawr() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.yawR)
  return yawr_;
}
inline void RelRPY::set_yawr(double value) {
  set_has_yawr();
  yawr_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.yawR)
}

// optional double rollSigmaR = 6 [default = 0];
inline bool RelRPY::has_rollsigmar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelRPY::set_has_rollsigmar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelRPY::clear_has_rollsigmar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelRPY::clear_rollsigmar() {
  rollsigmar_ = 0;
  clear_has_rollsigmar();
}
inline double RelRPY::rollsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.rollSigmaR)
  return rollsigmar_;
}
inline void RelRPY::set_rollsigmar(double value) {
  set_has_rollsigmar();
  rollsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.rollSigmaR)
}

// optional double pitchSigmaR = 7 [default = 0];
inline bool RelRPY::has_pitchsigmar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RelRPY::set_has_pitchsigmar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RelRPY::clear_has_pitchsigmar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RelRPY::clear_pitchsigmar() {
  pitchsigmar_ = 0;
  clear_has_pitchsigmar();
}
inline double RelRPY::pitchsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.pitchSigmaR)
  return pitchsigmar_;
}
inline void RelRPY::set_pitchsigmar(double value) {
  set_has_pitchsigmar();
  pitchsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.pitchSigmaR)
}

// optional double yawSigmaR = 8 [default = 0];
inline bool RelRPY::has_yawsigmar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RelRPY::set_has_yawsigmar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RelRPY::clear_has_yawsigmar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RelRPY::clear_yawsigmar() {
  yawsigmar_ = 0;
  clear_has_yawsigmar();
}
inline double RelRPY::yawsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RelRPY.yawSigmaR)
  return yawsigmar_;
}
inline void RelRPY::set_yawsigmar(double value) {
  set_has_yawsigmar();
  yawsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RelRPY.yawSigmaR)
}

// -------------------------------------------------------------------

// RelFRD

// required string targetID = 1;
inline bool RelFRD::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelFRD::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelFRD::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelFRD::clear_targetid() {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_->clear();
  }
  clear_has_targetid();
}
inline const ::std::string& RelFRD::targetid() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.targetID)
  return *targetid_;
}
inline void RelFRD::set_targetid(const ::std::string& value) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(value);
  // @@protoc_insertion_point(field_set:nav.RelFRD.targetID)
}
inline void RelFRD::set_targetid(const char* value) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.RelFRD.targetID)
}
inline void RelFRD::set_targetid(const char* value, size_t size) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.RelFRD.targetID)
}
inline ::std::string* RelFRD::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.RelFRD.targetID)
  return targetid_;
}
inline ::std::string* RelFRD::release_targetid() {
  clear_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetid_;
    targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RelFRD::set_allocated_targetid(::std::string* targetid) {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetid_;
  }
  if (targetid) {
    set_has_targetid();
    targetid_ = targetid;
  } else {
    clear_has_targetid();
    targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.RelFRD.targetID)
}

// required double timeS = 2;
inline bool RelFRD::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelFRD::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelFRD::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelFRD::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double RelFRD::times() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.timeS)
  return times_;
}
inline void RelFRD::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.timeS)
}

// required double forwardM = 3;
inline bool RelFRD::has_forwardm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelFRD::set_has_forwardm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelFRD::clear_has_forwardm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelFRD::clear_forwardm() {
  forwardm_ = 0;
  clear_has_forwardm();
}
inline double RelFRD::forwardm() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.forwardM)
  return forwardm_;
}
inline void RelFRD::set_forwardm(double value) {
  set_has_forwardm();
  forwardm_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.forwardM)
}

// required double rightM = 4;
inline bool RelFRD::has_rightm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelFRD::set_has_rightm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelFRD::clear_has_rightm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelFRD::clear_rightm() {
  rightm_ = 0;
  clear_has_rightm();
}
inline double RelFRD::rightm() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.rightM)
  return rightm_;
}
inline void RelFRD::set_rightm(double value) {
  set_has_rightm();
  rightm_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.rightM)
}

// required double downM = 5;
inline bool RelFRD::has_downm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelFRD::set_has_downm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelFRD::clear_has_downm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelFRD::clear_downm() {
  downm_ = 0;
  clear_has_downm();
}
inline double RelFRD::downm() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.downM)
  return downm_;
}
inline void RelFRD::set_downm(double value) {
  set_has_downm();
  downm_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.downM)
}

// optional double forwardSigmaM = 6 [default = 0];
inline bool RelFRD::has_forwardsigmam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelFRD::set_has_forwardsigmam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelFRD::clear_has_forwardsigmam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelFRD::clear_forwardsigmam() {
  forwardsigmam_ = 0;
  clear_has_forwardsigmam();
}
inline double RelFRD::forwardsigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.forwardSigmaM)
  return forwardsigmam_;
}
inline void RelFRD::set_forwardsigmam(double value) {
  set_has_forwardsigmam();
  forwardsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.forwardSigmaM)
}

// optional double rightSigmaM = 7 [default = 0];
inline bool RelFRD::has_rightsigmam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RelFRD::set_has_rightsigmam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RelFRD::clear_has_rightsigmam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RelFRD::clear_rightsigmam() {
  rightsigmam_ = 0;
  clear_has_rightsigmam();
}
inline double RelFRD::rightsigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.rightSigmaM)
  return rightsigmam_;
}
inline void RelFRD::set_rightsigmam(double value) {
  set_has_rightsigmam();
  rightsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.rightSigmaM)
}

// optional double downSigmaM = 8 [default = 0];
inline bool RelFRD::has_downsigmam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RelFRD::set_has_downsigmam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RelFRD::clear_has_downsigmam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RelFRD::clear_downsigmam() {
  downsigmam_ = 0;
  clear_has_downsigmam();
}
inline double RelFRD::downsigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFRD.downSigmaM)
  return downsigmam_;
}
inline void RelFRD::set_downsigmam(double value) {
  set_has_downsigmam();
  downsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFRD.downSigmaM)
}

// -------------------------------------------------------------------

// FusedState

// required double timeS = 1;
inline bool FusedState::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FusedState::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FusedState::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FusedState::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double FusedState::times() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.timeS)
  return times_;
}
inline void FusedState::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.timeS)
}

// required double timeDeltaS = 2;
inline bool FusedState::has_timedeltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FusedState::set_has_timedeltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FusedState::clear_has_timedeltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FusedState::clear_timedeltas() {
  timedeltas_ = 0;
  clear_has_timedeltas();
}
inline double FusedState::timedeltas() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.timeDeltaS)
  return timedeltas_;
}
inline void FusedState::set_timedeltas(double value) {
  set_has_timedeltas();
  timedeltas_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.timeDeltaS)
}

// required double rollR = 3;
inline bool FusedState::has_rollr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FusedState::set_has_rollr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FusedState::clear_has_rollr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FusedState::clear_rollr() {
  rollr_ = 0;
  clear_has_rollr();
}
inline double FusedState::rollr() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rollR)
  return rollr_;
}
inline void FusedState::set_rollr(double value) {
  set_has_rollr();
  rollr_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rollR)
}

// required double pitchR = 4;
inline bool FusedState::has_pitchr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FusedState::set_has_pitchr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FusedState::clear_has_pitchr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FusedState::clear_pitchr() {
  pitchr_ = 0;
  clear_has_pitchr();
}
inline double FusedState::pitchr() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.pitchR)
  return pitchr_;
}
inline void FusedState::set_pitchr(double value) {
  set_has_pitchr();
  pitchr_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.pitchR)
}

// required double yawR = 5;
inline bool FusedState::has_yawr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FusedState::set_has_yawr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FusedState::clear_has_yawr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FusedState::clear_yawr() {
  yawr_ = 0;
  clear_has_yawr();
}
inline double FusedState::yawr() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.yawR)
  return yawr_;
}
inline void FusedState::set_yawr(double value) {
  set_has_yawr();
  yawr_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.yawR)
}

// required double rollDeltaR = 6;
inline bool FusedState::has_rolldeltar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FusedState::set_has_rolldeltar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FusedState::clear_has_rolldeltar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FusedState::clear_rolldeltar() {
  rolldeltar_ = 0;
  clear_has_rolldeltar();
}
inline double FusedState::rolldeltar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rollDeltaR)
  return rolldeltar_;
}
inline void FusedState::set_rolldeltar(double value) {
  set_has_rolldeltar();
  rolldeltar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rollDeltaR)
}

// required double pitchDeltaR = 7;
inline bool FusedState::has_pitchdeltar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FusedState::set_has_pitchdeltar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FusedState::clear_has_pitchdeltar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FusedState::clear_pitchdeltar() {
  pitchdeltar_ = 0;
  clear_has_pitchdeltar();
}
inline double FusedState::pitchdeltar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.pitchDeltaR)
  return pitchdeltar_;
}
inline void FusedState::set_pitchdeltar(double value) {
  set_has_pitchdeltar();
  pitchdeltar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.pitchDeltaR)
}

// required double yawDeltaR = 8;
inline bool FusedState::has_yawdeltar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FusedState::set_has_yawdeltar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FusedState::clear_has_yawdeltar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FusedState::clear_yawdeltar() {
  yawdeltar_ = 0;
  clear_has_yawdeltar();
}
inline double FusedState::yawdeltar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.yawDeltaR)
  return yawdeltar_;
}
inline void FusedState::set_yawdeltar(double value) {
  set_has_yawdeltar();
  yawdeltar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.yawDeltaR)
}

// required double latR = 9;
inline bool FusedState::has_latr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FusedState::set_has_latr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FusedState::clear_has_latr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FusedState::clear_latr() {
  latr_ = 0;
  clear_has_latr();
}
inline double FusedState::latr() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.latR)
  return latr_;
}
inline void FusedState::set_latr(double value) {
  set_has_latr();
  latr_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.latR)
}

// required double lonR = 10;
inline bool FusedState::has_lonr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FusedState::set_has_lonr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FusedState::clear_has_lonr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FusedState::clear_lonr() {
  lonr_ = 0;
  clear_has_lonr();
}
inline double FusedState::lonr() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.lonR)
  return lonr_;
}
inline void FusedState::set_lonr(double value) {
  set_has_lonr();
  lonr_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.lonR)
}

// required double altM = 11;
inline bool FusedState::has_altm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FusedState::set_has_altm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FusedState::clear_has_altm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FusedState::clear_altm() {
  altm_ = 0;
  clear_has_altm();
}
inline double FusedState::altm() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.altM)
  return altm_;
}
inline void FusedState::set_altm(double value) {
  set_has_altm();
  altm_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.altM)
}

// required double forwardDeltaM = 12;
inline bool FusedState::has_forwarddeltam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FusedState::set_has_forwarddeltam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FusedState::clear_has_forwarddeltam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FusedState::clear_forwarddeltam() {
  forwarddeltam_ = 0;
  clear_has_forwarddeltam();
}
inline double FusedState::forwarddeltam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.forwardDeltaM)
  return forwarddeltam_;
}
inline void FusedState::set_forwarddeltam(double value) {
  set_has_forwarddeltam();
  forwarddeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.forwardDeltaM)
}

// required double rightDeltaM = 13;
inline bool FusedState::has_rightdeltam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FusedState::set_has_rightdeltam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FusedState::clear_has_rightdeltam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FusedState::clear_rightdeltam() {
  rightdeltam_ = 0;
  clear_has_rightdeltam();
}
inline double FusedState::rightdeltam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rightDeltaM)
  return rightdeltam_;
}
inline void FusedState::set_rightdeltam(double value) {
  set_has_rightdeltam();
  rightdeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rightDeltaM)
}

// required double downDeltaM = 14;
inline bool FusedState::has_downdeltam() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FusedState::set_has_downdeltam() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FusedState::clear_has_downdeltam() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FusedState::clear_downdeltam() {
  downdeltam_ = 0;
  clear_has_downdeltam();
}
inline double FusedState::downdeltam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.downDeltaM)
  return downdeltam_;
}
inline void FusedState::set_downdeltam(double value) {
  set_has_downdeltam();
  downdeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.downDeltaM)
}

// required double forwardRateDeltaMPS = 15;
inline bool FusedState::has_forwardratedeltamps() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FusedState::set_has_forwardratedeltamps() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FusedState::clear_has_forwardratedeltamps() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FusedState::clear_forwardratedeltamps() {
  forwardratedeltamps_ = 0;
  clear_has_forwardratedeltamps();
}
inline double FusedState::forwardratedeltamps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.forwardRateDeltaMPS)
  return forwardratedeltamps_;
}
inline void FusedState::set_forwardratedeltamps(double value) {
  set_has_forwardratedeltamps();
  forwardratedeltamps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.forwardRateDeltaMPS)
}

// required double rightRateDeltaMPS = 16;
inline bool FusedState::has_rightratedeltamps() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FusedState::set_has_rightratedeltamps() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FusedState::clear_has_rightratedeltamps() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FusedState::clear_rightratedeltamps() {
  rightratedeltamps_ = 0;
  clear_has_rightratedeltamps();
}
inline double FusedState::rightratedeltamps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rightRateDeltaMPS)
  return rightratedeltamps_;
}
inline void FusedState::set_rightratedeltamps(double value) {
  set_has_rightratedeltamps();
  rightratedeltamps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rightRateDeltaMPS)
}

// required double downRateDeltaMPS = 17;
inline bool FusedState::has_downratedeltamps() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FusedState::set_has_downratedeltamps() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FusedState::clear_has_downratedeltamps() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FusedState::clear_downratedeltamps() {
  downratedeltamps_ = 0;
  clear_has_downratedeltamps();
}
inline double FusedState::downratedeltamps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.downRateDeltaMPS)
  return downratedeltamps_;
}
inline void FusedState::set_downratedeltamps(double value) {
  set_has_downratedeltamps();
  downratedeltamps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.downRateDeltaMPS)
}

// optional double rollSigmaR = 18 [default = 0];
inline bool FusedState::has_rollsigmar() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FusedState::set_has_rollsigmar() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FusedState::clear_has_rollsigmar() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FusedState::clear_rollsigmar() {
  rollsigmar_ = 0;
  clear_has_rollsigmar();
}
inline double FusedState::rollsigmar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rollSigmaR)
  return rollsigmar_;
}
inline void FusedState::set_rollsigmar(double value) {
  set_has_rollsigmar();
  rollsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rollSigmaR)
}

// optional double pitchSigmaR = 19 [default = 0];
inline bool FusedState::has_pitchsigmar() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FusedState::set_has_pitchsigmar() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FusedState::clear_has_pitchsigmar() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FusedState::clear_pitchsigmar() {
  pitchsigmar_ = 0;
  clear_has_pitchsigmar();
}
inline double FusedState::pitchsigmar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.pitchSigmaR)
  return pitchsigmar_;
}
inline void FusedState::set_pitchsigmar(double value) {
  set_has_pitchsigmar();
  pitchsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.pitchSigmaR)
}

// optional double yawSigmaR = 20 [default = 0];
inline bool FusedState::has_yawsigmar() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FusedState::set_has_yawsigmar() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FusedState::clear_has_yawsigmar() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FusedState::clear_yawsigmar() {
  yawsigmar_ = 0;
  clear_has_yawsigmar();
}
inline double FusedState::yawsigmar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.yawSigmaR)
  return yawsigmar_;
}
inline void FusedState::set_yawsigmar(double value) {
  set_has_yawsigmar();
  yawsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.yawSigmaR)
}

// optional double rollDeltaSigmaRPS = 21 [default = 0];
inline bool FusedState::has_rolldeltasigmarps() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FusedState::set_has_rolldeltasigmarps() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FusedState::clear_has_rolldeltasigmarps() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FusedState::clear_rolldeltasigmarps() {
  rolldeltasigmarps_ = 0;
  clear_has_rolldeltasigmarps();
}
inline double FusedState::rolldeltasigmarps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rollDeltaSigmaRPS)
  return rolldeltasigmarps_;
}
inline void FusedState::set_rolldeltasigmarps(double value) {
  set_has_rolldeltasigmarps();
  rolldeltasigmarps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rollDeltaSigmaRPS)
}

// optional double pitchDeltaSigmaRPS = 22 [default = 0];
inline bool FusedState::has_pitchdeltasigmarps() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FusedState::set_has_pitchdeltasigmarps() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FusedState::clear_has_pitchdeltasigmarps() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FusedState::clear_pitchdeltasigmarps() {
  pitchdeltasigmarps_ = 0;
  clear_has_pitchdeltasigmarps();
}
inline double FusedState::pitchdeltasigmarps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.pitchDeltaSigmaRPS)
  return pitchdeltasigmarps_;
}
inline void FusedState::set_pitchdeltasigmarps(double value) {
  set_has_pitchdeltasigmarps();
  pitchdeltasigmarps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.pitchDeltaSigmaRPS)
}

// optional double yawDeltaSigmaRPS = 23 [default = 0];
inline bool FusedState::has_yawdeltasigmarps() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FusedState::set_has_yawdeltasigmarps() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FusedState::clear_has_yawdeltasigmarps() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FusedState::clear_yawdeltasigmarps() {
  yawdeltasigmarps_ = 0;
  clear_has_yawdeltasigmarps();
}
inline double FusedState::yawdeltasigmarps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.yawDeltaSigmaRPS)
  return yawdeltasigmarps_;
}
inline void FusedState::set_yawdeltasigmarps(double value) {
  set_has_yawdeltasigmarps();
  yawdeltasigmarps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.yawDeltaSigmaRPS)
}

// optional double latSigmaR = 24 [default = 0];
inline bool FusedState::has_latsigmar() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FusedState::set_has_latsigmar() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FusedState::clear_has_latsigmar() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FusedState::clear_latsigmar() {
  latsigmar_ = 0;
  clear_has_latsigmar();
}
inline double FusedState::latsigmar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.latSigmaR)
  return latsigmar_;
}
inline void FusedState::set_latsigmar(double value) {
  set_has_latsigmar();
  latsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.latSigmaR)
}

// optional double lonSigmaR = 25 [default = 0];
inline bool FusedState::has_lonsigmar() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FusedState::set_has_lonsigmar() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FusedState::clear_has_lonsigmar() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FusedState::clear_lonsigmar() {
  lonsigmar_ = 0;
  clear_has_lonsigmar();
}
inline double FusedState::lonsigmar() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.lonSigmaR)
  return lonsigmar_;
}
inline void FusedState::set_lonsigmar(double value) {
  set_has_lonsigmar();
  lonsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.lonSigmaR)
}

// optional double altSigmaM = 26 [default = 0];
inline bool FusedState::has_altsigmam() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FusedState::set_has_altsigmam() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FusedState::clear_has_altsigmam() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FusedState::clear_altsigmam() {
  altsigmam_ = 0;
  clear_has_altsigmam();
}
inline double FusedState::altsigmam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.altSigmaM)
  return altsigmam_;
}
inline void FusedState::set_altsigmam(double value) {
  set_has_altsigmam();
  altsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.altSigmaM)
}

// optional double forwardDeltaSigmaM = 27 [default = 0];
inline bool FusedState::has_forwarddeltasigmam() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FusedState::set_has_forwarddeltasigmam() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FusedState::clear_has_forwarddeltasigmam() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FusedState::clear_forwarddeltasigmam() {
  forwarddeltasigmam_ = 0;
  clear_has_forwarddeltasigmam();
}
inline double FusedState::forwarddeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.forwardDeltaSigmaM)
  return forwarddeltasigmam_;
}
inline void FusedState::set_forwarddeltasigmam(double value) {
  set_has_forwarddeltasigmam();
  forwarddeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.forwardDeltaSigmaM)
}

// optional double rightDeltaSigmaM = 28 [default = 0];
inline bool FusedState::has_rightdeltasigmam() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FusedState::set_has_rightdeltasigmam() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FusedState::clear_has_rightdeltasigmam() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FusedState::clear_rightdeltasigmam() {
  rightdeltasigmam_ = 0;
  clear_has_rightdeltasigmam();
}
inline double FusedState::rightdeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rightDeltaSigmaM)
  return rightdeltasigmam_;
}
inline void FusedState::set_rightdeltasigmam(double value) {
  set_has_rightdeltasigmam();
  rightdeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rightDeltaSigmaM)
}

// optional double downDeltaSigmaM = 29 [default = 0];
inline bool FusedState::has_downdeltasigmam() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void FusedState::set_has_downdeltasigmam() {
  _has_bits_[0] |= 0x10000000u;
}
inline void FusedState::clear_has_downdeltasigmam() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void FusedState::clear_downdeltasigmam() {
  downdeltasigmam_ = 0;
  clear_has_downdeltasigmam();
}
inline double FusedState::downdeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.downDeltaSigmaM)
  return downdeltasigmam_;
}
inline void FusedState::set_downdeltasigmam(double value) {
  set_has_downdeltasigmam();
  downdeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.downDeltaSigmaM)
}

// optional double forwardRateDeltaSigmaMPS = 30 [default = 0];
inline bool FusedState::has_forwardratedeltasigmamps() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void FusedState::set_has_forwardratedeltasigmamps() {
  _has_bits_[0] |= 0x20000000u;
}
inline void FusedState::clear_has_forwardratedeltasigmamps() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void FusedState::clear_forwardratedeltasigmamps() {
  forwardratedeltasigmamps_ = 0;
  clear_has_forwardratedeltasigmamps();
}
inline double FusedState::forwardratedeltasigmamps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.forwardRateDeltaSigmaMPS)
  return forwardratedeltasigmamps_;
}
inline void FusedState::set_forwardratedeltasigmamps(double value) {
  set_has_forwardratedeltasigmamps();
  forwardratedeltasigmamps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.forwardRateDeltaSigmaMPS)
}

// optional double rightRateDeltaSigmaMPS = 31 [default = 0];
inline bool FusedState::has_rightratedeltasigmamps() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void FusedState::set_has_rightratedeltasigmamps() {
  _has_bits_[0] |= 0x40000000u;
}
inline void FusedState::clear_has_rightratedeltasigmamps() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void FusedState::clear_rightratedeltasigmamps() {
  rightratedeltasigmamps_ = 0;
  clear_has_rightratedeltasigmamps();
}
inline double FusedState::rightratedeltasigmamps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.rightRateDeltaSigmaMPS)
  return rightratedeltasigmamps_;
}
inline void FusedState::set_rightratedeltasigmamps(double value) {
  set_has_rightratedeltasigmamps();
  rightratedeltasigmamps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.rightRateDeltaSigmaMPS)
}

// optional double downRateDeltaSigmaMPS = 32 [default = 0];
inline bool FusedState::has_downratedeltasigmamps() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void FusedState::set_has_downratedeltasigmamps() {
  _has_bits_[0] |= 0x80000000u;
}
inline void FusedState::clear_has_downratedeltasigmamps() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void FusedState::clear_downratedeltasigmamps() {
  downratedeltasigmamps_ = 0;
  clear_has_downratedeltasigmamps();
}
inline double FusedState::downratedeltasigmamps() const {
  // @@protoc_insertion_point(field_get:nav.FusedState.downRateDeltaSigmaMPS)
  return downratedeltasigmamps_;
}
inline void FusedState::set_downratedeltasigmamps(double value) {
  set_has_downratedeltasigmamps();
  downratedeltasigmamps_ = value;
  // @@protoc_insertion_point(field_set:nav.FusedState.downRateDeltaSigmaMPS)
}

// -------------------------------------------------------------------

// RelFusedState

// required string ownID = 1;
inline bool RelFusedState::has_ownid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelFusedState::set_has_ownid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelFusedState::clear_has_ownid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelFusedState::clear_ownid() {
  if (ownid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ownid_->clear();
  }
  clear_has_ownid();
}
inline const ::std::string& RelFusedState::ownid() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.ownID)
  return *ownid_;
}
inline void RelFusedState::set_ownid(const ::std::string& value) {
  set_has_ownid();
  if (ownid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ownid_ = new ::std::string;
  }
  ownid_->assign(value);
  // @@protoc_insertion_point(field_set:nav.RelFusedState.ownID)
}
inline void RelFusedState::set_ownid(const char* value) {
  set_has_ownid();
  if (ownid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ownid_ = new ::std::string;
  }
  ownid_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.RelFusedState.ownID)
}
inline void RelFusedState::set_ownid(const char* value, size_t size) {
  set_has_ownid();
  if (ownid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ownid_ = new ::std::string;
  }
  ownid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.RelFusedState.ownID)
}
inline ::std::string* RelFusedState::mutable_ownid() {
  set_has_ownid();
  if (ownid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ownid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.RelFusedState.ownID)
  return ownid_;
}
inline ::std::string* RelFusedState::release_ownid() {
  clear_has_ownid();
  if (ownid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ownid_;
    ownid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RelFusedState::set_allocated_ownid(::std::string* ownid) {
  if (ownid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ownid_;
  }
  if (ownid) {
    set_has_ownid();
    ownid_ = ownid;
  } else {
    clear_has_ownid();
    ownid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.RelFusedState.ownID)
}

// required string targetID = 2;
inline bool RelFusedState::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelFusedState::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelFusedState::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelFusedState::clear_targetid() {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_->clear();
  }
  clear_has_targetid();
}
inline const ::std::string& RelFusedState::targetid() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.targetID)
  return *targetid_;
}
inline void RelFusedState::set_targetid(const ::std::string& value) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(value);
  // @@protoc_insertion_point(field_set:nav.RelFusedState.targetID)
}
inline void RelFusedState::set_targetid(const char* value) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:nav.RelFusedState.targetID)
}
inline void RelFusedState::set_targetid(const char* value, size_t size) {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  targetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nav.RelFusedState.targetID)
}
inline ::std::string* RelFusedState::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:nav.RelFusedState.targetID)
  return targetid_;
}
inline ::std::string* RelFusedState::release_targetid() {
  clear_has_targetid();
  if (targetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetid_;
    targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RelFusedState::set_allocated_targetid(::std::string* targetid) {
  if (targetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetid_;
  }
  if (targetid) {
    set_has_targetid();
    targetid_ = targetid;
  } else {
    clear_has_targetid();
    targetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:nav.RelFusedState.targetID)
}

// required double timeS = 3;
inline bool RelFusedState::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelFusedState::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelFusedState::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelFusedState::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline double RelFusedState::times() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.timeS)
  return times_;
}
inline void RelFusedState::set_times(double value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.timeS)
}

// required double rollR = 4;
inline bool RelFusedState::has_rollr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelFusedState::set_has_rollr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelFusedState::clear_has_rollr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelFusedState::clear_rollr() {
  rollr_ = 0;
  clear_has_rollr();
}
inline double RelFusedState::rollr() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.rollR)
  return rollr_;
}
inline void RelFusedState::set_rollr(double value) {
  set_has_rollr();
  rollr_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.rollR)
}

// required double pitchR = 5;
inline bool RelFusedState::has_pitchr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelFusedState::set_has_pitchr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelFusedState::clear_has_pitchr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelFusedState::clear_pitchr() {
  pitchr_ = 0;
  clear_has_pitchr();
}
inline double RelFusedState::pitchr() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.pitchR)
  return pitchr_;
}
inline void RelFusedState::set_pitchr(double value) {
  set_has_pitchr();
  pitchr_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.pitchR)
}

// required double yawR = 6;
inline bool RelFusedState::has_yawr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelFusedState::set_has_yawr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelFusedState::clear_has_yawr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelFusedState::clear_yawr() {
  yawr_ = 0;
  clear_has_yawr();
}
inline double RelFusedState::yawr() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.yawR)
  return yawr_;
}
inline void RelFusedState::set_yawr(double value) {
  set_has_yawr();
  yawr_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.yawR)
}

// required double forwardM = 7;
inline bool RelFusedState::has_forwardm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RelFusedState::set_has_forwardm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RelFusedState::clear_has_forwardm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RelFusedState::clear_forwardm() {
  forwardm_ = 0;
  clear_has_forwardm();
}
inline double RelFusedState::forwardm() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.forwardM)
  return forwardm_;
}
inline void RelFusedState::set_forwardm(double value) {
  set_has_forwardm();
  forwardm_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.forwardM)
}

// required double rightM = 8;
inline bool RelFusedState::has_rightm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RelFusedState::set_has_rightm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RelFusedState::clear_has_rightm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RelFusedState::clear_rightm() {
  rightm_ = 0;
  clear_has_rightm();
}
inline double RelFusedState::rightm() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.rightM)
  return rightm_;
}
inline void RelFusedState::set_rightm(double value) {
  set_has_rightm();
  rightm_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.rightM)
}

// required double downM = 9;
inline bool RelFusedState::has_downm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RelFusedState::set_has_downm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RelFusedState::clear_has_downm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RelFusedState::clear_downm() {
  downm_ = 0;
  clear_has_downm();
}
inline double RelFusedState::downm() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.downM)
  return downm_;
}
inline void RelFusedState::set_downm(double value) {
  set_has_downm();
  downm_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.downM)
}

// required double forwardDeltaM = 10;
inline bool RelFusedState::has_forwarddeltam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RelFusedState::set_has_forwarddeltam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RelFusedState::clear_has_forwarddeltam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RelFusedState::clear_forwarddeltam() {
  forwarddeltam_ = 0;
  clear_has_forwarddeltam();
}
inline double RelFusedState::forwarddeltam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.forwardDeltaM)
  return forwarddeltam_;
}
inline void RelFusedState::set_forwarddeltam(double value) {
  set_has_forwarddeltam();
  forwarddeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.forwardDeltaM)
}

// required double rightDeltaM = 11;
inline bool RelFusedState::has_rightdeltam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RelFusedState::set_has_rightdeltam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RelFusedState::clear_has_rightdeltam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RelFusedState::clear_rightdeltam() {
  rightdeltam_ = 0;
  clear_has_rightdeltam();
}
inline double RelFusedState::rightdeltam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.rightDeltaM)
  return rightdeltam_;
}
inline void RelFusedState::set_rightdeltam(double value) {
  set_has_rightdeltam();
  rightdeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.rightDeltaM)
}

// required double downDeltaM = 12;
inline bool RelFusedState::has_downdeltam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RelFusedState::set_has_downdeltam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RelFusedState::clear_has_downdeltam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RelFusedState::clear_downdeltam() {
  downdeltam_ = 0;
  clear_has_downdeltam();
}
inline double RelFusedState::downdeltam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.downDeltaM)
  return downdeltam_;
}
inline void RelFusedState::set_downdeltam(double value) {
  set_has_downdeltam();
  downdeltam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.downDeltaM)
}

// optional double forwardDeltaSigmaM = 13 [default = 0];
inline bool RelFusedState::has_forwarddeltasigmam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RelFusedState::set_has_forwarddeltasigmam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RelFusedState::clear_has_forwarddeltasigmam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RelFusedState::clear_forwarddeltasigmam() {
  forwarddeltasigmam_ = 0;
  clear_has_forwarddeltasigmam();
}
inline double RelFusedState::forwarddeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.forwardDeltaSigmaM)
  return forwarddeltasigmam_;
}
inline void RelFusedState::set_forwarddeltasigmam(double value) {
  set_has_forwarddeltasigmam();
  forwarddeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.forwardDeltaSigmaM)
}

// optional double rightDeltaSigmaM = 14 [default = 0];
inline bool RelFusedState::has_rightdeltasigmam() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RelFusedState::set_has_rightdeltasigmam() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RelFusedState::clear_has_rightdeltasigmam() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RelFusedState::clear_rightdeltasigmam() {
  rightdeltasigmam_ = 0;
  clear_has_rightdeltasigmam();
}
inline double RelFusedState::rightdeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.rightDeltaSigmaM)
  return rightdeltasigmam_;
}
inline void RelFusedState::set_rightdeltasigmam(double value) {
  set_has_rightdeltasigmam();
  rightdeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.rightDeltaSigmaM)
}

// optional double downDeltaSigmaM = 15 [default = 0];
inline bool RelFusedState::has_downdeltasigmam() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RelFusedState::set_has_downdeltasigmam() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RelFusedState::clear_has_downdeltasigmam() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RelFusedState::clear_downdeltasigmam() {
  downdeltasigmam_ = 0;
  clear_has_downdeltasigmam();
}
inline double RelFusedState::downdeltasigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.downDeltaSigmaM)
  return downdeltasigmam_;
}
inline void RelFusedState::set_downdeltasigmam(double value) {
  set_has_downdeltasigmam();
  downdeltasigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.downDeltaSigmaM)
}

// optional double rollSigmaR = 16 [default = 0];
inline bool RelFusedState::has_rollsigmar() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RelFusedState::set_has_rollsigmar() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RelFusedState::clear_has_rollsigmar() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RelFusedState::clear_rollsigmar() {
  rollsigmar_ = 0;
  clear_has_rollsigmar();
}
inline double RelFusedState::rollsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.rollSigmaR)
  return rollsigmar_;
}
inline void RelFusedState::set_rollsigmar(double value) {
  set_has_rollsigmar();
  rollsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.rollSigmaR)
}

// optional double pitchSigmaR = 17 [default = 0];
inline bool RelFusedState::has_pitchsigmar() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RelFusedState::set_has_pitchsigmar() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RelFusedState::clear_has_pitchsigmar() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RelFusedState::clear_pitchsigmar() {
  pitchsigmar_ = 0;
  clear_has_pitchsigmar();
}
inline double RelFusedState::pitchsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.pitchSigmaR)
  return pitchsigmar_;
}
inline void RelFusedState::set_pitchsigmar(double value) {
  set_has_pitchsigmar();
  pitchsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.pitchSigmaR)
}

// optional double yawSigmaR = 18 [default = 0];
inline bool RelFusedState::has_yawsigmar() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RelFusedState::set_has_yawsigmar() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RelFusedState::clear_has_yawsigmar() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RelFusedState::clear_yawsigmar() {
  yawsigmar_ = 0;
  clear_has_yawsigmar();
}
inline double RelFusedState::yawsigmar() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.yawSigmaR)
  return yawsigmar_;
}
inline void RelFusedState::set_yawsigmar(double value) {
  set_has_yawsigmar();
  yawsigmar_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.yawSigmaR)
}

// optional double forwardSigmaM = 19 [default = 0];
inline bool RelFusedState::has_forwardsigmam() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RelFusedState::set_has_forwardsigmam() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RelFusedState::clear_has_forwardsigmam() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RelFusedState::clear_forwardsigmam() {
  forwardsigmam_ = 0;
  clear_has_forwardsigmam();
}
inline double RelFusedState::forwardsigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.forwardSigmaM)
  return forwardsigmam_;
}
inline void RelFusedState::set_forwardsigmam(double value) {
  set_has_forwardsigmam();
  forwardsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.forwardSigmaM)
}

// optional double rightSigmaM = 20 [default = 0];
inline bool RelFusedState::has_rightsigmam() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RelFusedState::set_has_rightsigmam() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RelFusedState::clear_has_rightsigmam() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RelFusedState::clear_rightsigmam() {
  rightsigmam_ = 0;
  clear_has_rightsigmam();
}
inline double RelFusedState::rightsigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.rightSigmaM)
  return rightsigmam_;
}
inline void RelFusedState::set_rightsigmam(double value) {
  set_has_rightsigmam();
  rightsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.rightSigmaM)
}

// optional double downSigmaM = 21 [default = 0];
inline bool RelFusedState::has_downsigmam() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RelFusedState::set_has_downsigmam() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RelFusedState::clear_has_downsigmam() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RelFusedState::clear_downsigmam() {
  downsigmam_ = 0;
  clear_has_downsigmam();
}
inline double RelFusedState::downsigmam() const {
  // @@protoc_insertion_point(field_get:nav.RelFusedState.downSigmaM)
  return downsigmam_;
}
inline void RelFusedState::set_downsigmam(double value) {
  set_has_downsigmam();
  downsigmam_ = value;
  // @@protoc_insertion_point(field_set:nav.RelFusedState.downSigmaM)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nav::Behavior> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nav::Behavior>() {
  return ::nav::Behavior_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nav_2eproto__INCLUDED
