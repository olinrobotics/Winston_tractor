classdef OCDriver < Msg.App & Msg.Cmd & Msg.Log
  methods (Access = public)
    function this = OCDriver()
      cfg = JSONRead('guard.json');
      this@Msg.App(cfg.ownID, cfg.fastTick, cfg.ctrlTick, cfg.maxLength);
      this@Msg.Cmd(cfg.ackPeriod, cfg.timeWarp);
      this@Msg.Log();
      this.cfg = cfg;
      this.stateTopic = Msg.Proto.topic('nav.Waystates', cfg.ownID);
    end

    function sub = topics(this)
      sub{1, 1} = this.stateTopic;
    end
  
    function flag = init(this) %#ok unused input
      flag = true;
    end

    function idle(this, inbox)
      if(isempty(inbox))
        this.sendCtrl(3000, 3500);
      elseif(Msg.Proto.isTopic(inbox, this.stateTopic))
        [~, ~, this.waystates] = Msg.Proto.unpack(inbox);
      end
    end

    function flag = run(this, inbox)
      if(isempty(inbox))
        this.sendCtrl(3000, 0);
      elseif(Msg.Proto.isTopic(inbox, this.stateTopic))
        [~, ~, this.waystates] = Msg.Proto.unpack(inbox);
      end
      flag = false;
    end

    function term(this)
      this.sendCtrl(3000, 3500);
    end
  end
  
  properties (GetAccess = private, SetAccess = private)
    cfg
    waystates
    stateTopic
  end

  methods (Access = private)
    function sendCtrl(this, uTurn, uSpeed)
      lvin = nav.LabViewInBuilder();
      ctrl = nav.CtrlBuilder();
      u.turn = int32(uTurn);
      u.speed = int32(uSpeed);
      data = [typecast(u.turn, 'uint8'), typecast(u.speed, 'uint8')];
      lvin.setData(lvin.getData().copyFrom(data));
      this.send(Msg.Proto.pack('nav.LabViewIn', this.cfg.ownID, lvin));
      ctrl.addUInt(u.turn);
      ctrl.addUInt(u.speed);
      this.send(Msg.Proto.pack('nav.Ctrl', this.cfg.ownID, ctrl));
      this.log('uTurn = %d uSpeed = %d', u.turn, u.speed);
    end
  end
end
  
% function [yawi, lati, loni, wi, vi] = interpState(time, yaw, lat, lon, w, v, timei)
% % NOTE: assumes at least two fixed sized time steps
% % NOTE: assumes all inputs except ti are of the same size
% N = size(time);
% if(N<2)
%   yawi = nan;
%   lati = nan;
%   loni = nan;
%   wi = nan;
%   vi = nan;
%   return;
% end
% n = double(N)*(timei-time(1))/(time(N)-time(1));
% nf = floor(n)+1; % 1-based index
% nc = nf+2; % 1-based index
% if(nf<1)
%   yawi = yaw(1)+(timei-time(1))*w(1);
%   lati = 
% elseif(nc<=N)
%   qa=q(:,j);
%   qb=q(:,j+1);
%   w1=vdot(:,j)/3;
%   w3=vdot(:,j+1)/3;
%   w2=tom.Rotation.quatToAxis(tom.Rotation.quatToHomo(tom.Rotation.quatInv(tom.Rotation.axisToQuat(w1)))*...
%     tom.Rotation.quatToHomo(dq(:,j))*tom.Rotation.quatInv(tom.Rotation.axisToQuat(w3)));
%   B=Bh(dt);
%   Bd=Bhd(dt);
%   qo=tom.Rotation.quatToHomo(qa);
%   exp1=tom.Rotation.quatToHomo(tom.Rotation.axisToQuat(B(1)*w1));
%   exp2=tom.Rotation.quatToHomo(tom.Rotation.axisToQuat(B(2)*w2));
%   exp3=tom.Rotation.quatToHomo(tom.Rotation.axisToQuat(B(3)*w3));
%   wbd1=tom.Rotation.quatToHomo([0;Bd(1)*w1]);
%   wbd2=tom.Rotation.quatToHomo([0;Bd(2)*w2]);
%   wbd3=tom.Rotation.quatToHomo([0;Bd(3)*w3]);
%   qi(:,i)=qo*exp1*exp2*tom.Rotation.homoToQuat(exp3);
%   qidot(:,i)=qo*exp1*wbd1*exp2*tom.Rotation.homoToQuat(exp3) + qo*exp1*exp2*wbd2*tom.Rotation.homoToQuat(exp3) + qo*exp1*exp2*exp3*tom.Rotation.homoToQuat(wbd3);
%   
% else
%   
% end
% 
% end
% 
% function x=Bh(t)
% tc=t.^3;
% x(1,:)=1-(1-t).^3;
% x(2,:)=3*t.*t-2*tc;
% x(3,:)=tc;
% end
% 
% function xd=Bhd(t)
% xd(1,:)=3*(1-t).^2;
% xd(2,:)=6*t.*(1-t);
% xd(3,:)=3*t.*t;
% end