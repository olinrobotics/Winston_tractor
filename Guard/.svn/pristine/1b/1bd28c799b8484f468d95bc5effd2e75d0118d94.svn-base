% An application that simulates the target interface of a satellite (which may or may not be controllable).
classdef OCTractorSimTarget < ARDSim
  properties (GetAccess = public, Constant = true)
    vehicleModelName = 'CartBall';
    dockForwardM = -1.0;
    dockDownM = -1.0;
    latR0 = 42.3656*math.DEGTORAD;
    lonR0 = -71.0096*math.DEGTORAD;
    altM0 = 0.0;
    xReal0 = [zeros(3, 1);...
      OCTractorSimTarget.latR0;...
      OCTractorSimTarget.lonR0;...
      OCTractorSimTarget.altM0;...
      zeros(3, 1)];
    uInt0 = [int32(3000); int32(3500)];
  end
  
  properties (GetAccess = private, SetAccess = private)
    targetID
  end
  
  methods (Access = public)
    function this = OCTractorSimTarget()
      cfg = JSONRead('guard.json');
      dynamicModel = OCDynamics(ARDSim.simPeriod);
      this = this@ARDSim(cfg.targetID, '', OCTractorSimTarget.vehicleModelName, dynamicModel,...
        OCTractorSimTarget.xReal0, zeros(0, 1), zeros(0, 1, 'int32'), OCTractorSimTarget.uInt0);
      this.targetID = cfg.targetID;
    end
    
    function process(this, inbox)
      process@ARDSim(this, inbox);
      if(isempty(inbox)&&this.isReady())
        % simulate navigation sensors
        pbRPY = this.getRPY();
        this.send(Msg.Proto.pack('nav.RPY', this.targetID, pbRPY));
        
        pbLatLon = this.getLatLon();
        this.send(Msg.Proto.pack('nav.LatLon', this.targetID, pbLatLon));
        
        pbAlt = this.getAlt();
        this.send(Msg.Proto.pack('nav.Alt', this.targetID, pbAlt));
        
        pbBodyRPYDelta = this.getBodyRPYDelta();
        this.send(Msg.Proto.pack('nav.BodyRPYDelta', this.targetID, pbBodyRPYDelta));
        
        pbBodyFRDDelta = this.getBodyFRDDelta();
        this.send(Msg.Proto.pack('nav.BodyFRDDelta', this.targetID, pbBodyFRDDelta));
        
        this.log('LatD=%+013.9f;LonD=%+014.9f', pbLatLon.getLatR()*math.RADTODEG,...
          pbLatLon.getLonR()*math.RADTODEG);
      end
    end
  end
end
