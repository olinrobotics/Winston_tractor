% An application that simulates the ownship interface of a tractor.
classdef OCTractorSimOwn < ARDSim
  properties (GetAccess = public, Constant = true)
    offsetLatR = -0.000001;
    offsetLonR = 0.0;
    offsetAltM = -OCTractorSimTarget.dockDownM;
    latR0 = OCTractorSimTarget.latR0+OCTractorSimOwn.offsetLatR;
    lonR0 = OCTractorSimTarget.lonR0+OCTractorSimOwn.offsetLonR;
    altR0 = OCTractorSimTarget.altM0+OCTractorSimOwn.offsetAltM;
    xReal0 = [zeros(3, 1); OCTractorSimOwn.latR0; OCTractorSimOwn.lonR0; OCTractorSimOwn.altR0; zeros(3, 1)];
    uInt0 = [int32(3000); int32(3500)];
    fovR = str2double(FlightGear.Config.hfov)*math.DEGTORAD;
  end
  
  properties (GetAccess = private, SetAccess = private)
    ownID
    startTime
    isPolling
    imgPeriod
  end
  
  methods (Access = public)
    function this = OCTractorSimOwn()
      cfg = JSONRead('guard.json');
      dynamicModel = OCDynamics(ARDSim.simPeriod);
      this = this@ARDSim(cfg.ownID, '', '', dynamicModel, OCTractorSimOwn.xReal0, zeros(0, 1),...
        zeros(0, 1, 'int32'), OCTractorSimOwn.uInt0);
      this.ownID = cfg.ownID;
      this.startTime = -inf;
      this.isPolling = false;
      this.imgPeriod = cfg.imgPeriod;
    end
    
    function process(this, inbox)
      process@ARDSim(this, inbox);
      if(isempty(inbox)&&this.isReady())
        % simulate navigation sensors
        pbRPY = this.getRPY();
        this.send(Msg.Proto.pack('nav.RPY', this.ownID, pbRPY));
        
        pbLatLon = this.getLatLon();
        this.send(Msg.Proto.pack('nav.LatLon', this.ownID, pbLatLon));
        
        pbAlt = this.getAlt();
        this.send(Msg.Proto.pack('nav.Alt', this.ownID, pbAlt));
        
        pbBodyRPYDelta = this.getBodyRPYDelta();
        this.send(Msg.Proto.pack('nav.BodyRPYDelta', this.ownID, pbBodyRPYDelta));
        
        pbBodyFRDDelta = this.getBodyFRDDelta();
        this.send(Msg.Proto.pack('nav.BodyFRDDelta', this.ownID, pbBodyFRDDelta));
        
        % simulate camera
        success = false;
        if(this.isPolling)
          [success, img] = this.pollImage();
        else
          time = this.getTime();
          if((time-this.startTime)>this.imgPeriod)
            [success, img] = this.pollImage();
            this.startTime = time;
            this.isPolling = true;
          end
        end
        if(success)
          pbImg = nav.ImgBuilder();
          pbImg.setTimeS(this.startTime);
          pbImg.setFovR(OCTractorSimOwn.fovR);
          pbSetImg(pbImg, img);
          this.send(Msg.Proto.pack('nav.Img', this.ownID, pbImg));
          this.isPolling = false;
        end
      end
    end
  end
end
