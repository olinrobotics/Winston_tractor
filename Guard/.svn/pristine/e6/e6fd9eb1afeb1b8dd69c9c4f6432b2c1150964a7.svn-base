% An application that produces waypoints for a vehicle to follow.
classdef OCPlanner < Msg.App & Msg.Log
  properties (Constant = true, GetAccess = public)
    relax = 0.8; % relaxation of dynamic constraints
  end
  
  properties (GetAccess = private, SetAccess = private)
    cfg
    own
    target
    dynamics
    minRadius
    maxSpeed
    lowSpeed
    spacing
    vRate
  end
  
  methods (Access = public)
    function this = OCPlanner()
      cfg = JSONRead('guard.json');
      this = this@Msg.App(mfilename('class'), cfg.fastTick, cfg.slowTick);
      this = this@Msg.Log();
      this.cfg = cfg;
      this.dynamics = OCDynamics(cfg.ctrlTick);
      this.minRadius = 1.0/(this.dynamics.kss(this.dynamics.uTurnMin)*OCPlanner.relax);
      vMax = this.dynamics.vss(this.dynamics.uSpeedMin);
      vLow = this.dynamics.vss(this.dynamics.uSpeedLow);
      this.maxSpeed = vMax*OCPlanner.relax+vLow*(1.0-OCPlanner.relax);
      this.lowSpeed = vLow*OCPlanner.relax+vMax*(1.0-OCPlanner.relax);
      this.spacing = pi*this.minRadius/4.0; % 8 segments around the minimum radius circle
      this.vRate = this.dynamics.vRateMax*OCPlanner.relax;
    end

    function sub = topics(this)
      sub{1, 1} = Msg.Proto.topic('nav.FusedState', this.cfg.ownID);
      sub{2, 1} = Msg.Proto.topic('nav.FusedState', this.cfg.targetID);
    end
    
    function process(this, inbox)
      if(~isempty(inbox))
        [topic, id, pb] = Msg.Proto.unpack(inbox);
        if(strcmp(topic, 'nav.FusedState'))
          if(strcmp(id, this.cfg.ownID))
            this.own = pb;
          elseif(strcmp(id, this.cfg.targetID))
            this.target = pb;
          end
        end
      else
        if(~isempty(this.own)&&~isempty(this.target))
          timeA = this.own.getTimeS();
          dtA = this.own.getTimeDeltaS();
          yawA = this.own.getYawR();
          omegaA = this.own.getYawDeltaR()/dtA;
          latA = this.own.getLatR();
          lonA = this.own.getLonR();
          speedA = this.own.getForwardDeltaM()/dtA;

          dtB = this.target.getTimeDeltaS();
          yawB = this.target.getYawR();
          omegaB = this.target.getYawDeltaR()/dtB;
          latB = this.target.getLatR();
          lonB = this.target.getLonR();
          speedB = this.target.getForwardDeltaM()/dtB;

          rLatM = earth.WGS84.radiusOfCurvature(latA);
          rLonM = cos(earth.WGS84.geodeticToGeocentric(latA))*earth.WGS84.geodeticRadius(latA);

          % plan path in relative north-east
          northA = 0.0;
          eastA = 0.0;
          northB = (latB-latA)*rLatM;
          eastB = (lonB-lonA)*rLonM;
          
          % plan to predicted location
          closureDist = sqrt(northB*northB+eastB*eastB);
          closureSpeed = max(this.lowSpeed, this.maxSpeed-speedB);
          dtD = closureDist/closureSpeed;
          dsD = dtD*speedB;
          dsC = dsD-this.spacing; % can be negative
          
          [forwardBD, rightBD, yawBD] = evalCircle(speedB, omegaB, dsD);
          yawD = math.Rotation.wrapToPI(yawB+yawBD);
          northD = northB+forwardBD*cos(yawB)-rightBD*sin(yawB);
          eastD = eastB+forwardBD*sin(yawB)+rightBD*cos(yawB);

          [forwardBC, rightBC, yawBC] = evalCircle(speedB, omegaB, dsC);
          yawC = math.Rotation.wrapToPI(yawB+yawBC);
          northC = northB+forwardBC*cos(yawB)-rightBC*sin(yawB);
          eastC = eastB+forwardBC*sin(yawB)+rightBC*cos(yawB);
          
          stateA = [northA; eastA; yawA];
          stateC = [northC; eastC; yawC];
          stateD = [northD; eastD; yawD];
          if(sqrt(northC*northC+eastC*eastC)<=this.spacing)
            path = [stateA, stateD];
          else
            path = dubins(stateA', stateC', this.minRadius, this.spacing);
            path = [path, stateD];
          end
          
          K = size(path, 2);
          if(K>=2)
            % extract elements
            north = path(1, :);
            east = path(2, :);
            yaw = path(3, :);
            
            % convert back to lat-lon
            lat = latA+north/rLatM;
            lon = lonA+east/rLonM;
            
            % plan speed profile
            dtMin = this.spacing/this.maxSpeed;
            vDelta = this.vRate*dtMin;
            speed = zeros(1, K);
            speed(1) = speedA;
            speed(K) = speedB;
            kLow = 1;
            kHigh = K;
            direction = speedB>speedA;
            while(kLow<(kHigh-1))
              if(direction)
                kLow = kLow+1;
                speedA = min(speedA+vDelta, this.maxSpeed);
                speed(kLow) = speedA;
              else
                kHigh = kHigh-1;
                speedB = min(speedB+vDelta, this.maxSpeed);
                speed(kHigh) = speedB;
              end
              direction = speedB>speedA;
            end
            
            % plan time profile
            speedAvg = (speed(1:(K-1))+speed(2:K))/2.0;
            time = zeros(1, K);
            time(1) = timeA;
            for k = 2:K
              time(k) = time(k-1)+this.spacing/speedAvg(k-1);
            end
            
            % plan rotation rate profile
            omega = gradient(unwrap(yaw))./gradient(time);
            omega(1) = omegaA;
            omega(K) = omegaB;

            % construct output
            pb = nav.WaystatesBuilder();
            
            % output states
            for k = 1:K
              addState(pb, time(k), yaw(k), lat(k), lon(k), omega(k), speed(k));
            end

            this.send(Msg.Proto.pack('nav.Waystates', this.cfg.ownID, pb));
          end
        end
      end
    end
  end
end

function [x, y, p] = evalCircle(v0, pd0, s)
if(abs(pd0)<=eps)
  r0 = inf;
else
  r0 = v0/pd0;
end
absr0 = abs(r0);
if(absr0<=eps)
  p = 0.0;
  x = 0.0;
  y = 0.0;
elseif(absr0>=(1.0/eps))
  p = 0.0;
  x = s;
  y = 0.0;
else
  p = s/r0;
  x = r0*sin(p);
  y = r0*(1.0-cos(p));
end
end

function addState(pb, timeS, yawR, latR, lonR, wRPS, vMPS)
% figure(1);
% hold('on');
% plot(lonR, latR, 'r.');
pb.addTimeS(timeS);
pb.addYawR(yawR);
pb.addPitchR(0.0);
pb.addRollR(0.0);
pb.addLatR(latR);
pb.addLonR(lonR);
pb.addAltM(0.0);
pb.addRollRateRPS(0.0);
pb.addPitchRateRPS(0.0);
pb.addYawRateRPS(wRPS);
pb.addForwardRateMPS(vMPS);
pb.addRightRateMPS(0.0);
pb.addDownRateMPS(0.0);
end
